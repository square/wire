// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.Percents in percents_in_kdoc.proto
import Foundation
import Wire

public struct Percents {

    /**
     * e.g. "No limits, free to send and just 2.75% to receive".
     */
    public var text: String?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if WIRE_INCLUDE_MEMBERWISE_INITIALIZER
extension Percents {

    @_disfavoredOverload
    @available(*, deprecated)
    public init(text: Swift.String? = nil) {
        self.text = text
    }

}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension Percents : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Percents : Hashable {
}
#endif

#if swift(>=5.5)
extension Percents : Sendable {
}
#endif

extension Percents : ProtoMessage {

    public static func protoMessageTypeURL() -> Swift.String {
        return "type.googleapis.com/squareup.protos.kotlin.Percents"
    }

}

extension Percents : Proto2Codable {

    public init(from protoReader: Wire.ProtoReader) throws {
        var text: Swift.String? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: text = try protoReader.decode(Swift.String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.text = text
    }

    public func encode(to protoWriter: Wire.ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.text)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension Percents : Codable {

    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)
        self.text = try container.decodeIfPresent(Swift.String.self, forKey: "text")
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.text, forKey: "text")
    }

}
#endif
