// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.packed_encoding.EmbeddedMessage in packed_encoding.proto
import Foundation
import Wire

public struct EmbeddedMessage {

    public var inner_repeated_number: [Int32] = []
    public var inner_number_after: Int32?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Void = { _ in }) {
        configure(&self)
    }

}

#if WIRE_INCLUDE_MEMBERWISE_INITIALIZER
extension EmbeddedMessage {

    @_disfavoredOverload
    @available(*, deprecated)
    public init(inner_repeated_number: [Swift.Int32] = [], inner_number_after: Swift.Int32? = nil) {
        self.inner_repeated_number = inner_repeated_number
        self.inner_number_after = inner_number_after
    }

}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension EmbeddedMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension EmbeddedMessage : Hashable {
}
#endif

#if swift(>=5.5)
extension EmbeddedMessage : Sendable {
}
#endif

extension EmbeddedMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> Swift.String {
        return "type.googleapis.com/squareup.protos.packed_encoding.EmbeddedMessage"
    }

}

extension EmbeddedMessage : Proto2Codable {

    public init(from reader: Wire.ProtoReader) throws {
        var inner_repeated_number: [Swift.Int32] = []
        var inner_number_after: Swift.Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &inner_repeated_number)
            case 2: inner_number_after = try reader.decode(Swift.Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.inner_repeated_number = inner_repeated_number
        self.inner_number_after = inner_number_after
    }

    public func encode(to writer: Wire.ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.inner_repeated_number, packed: true)
        try writer.encode(tag: 2, value: self.inner_number_after)
        try writer.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension EmbeddedMessage : Codable {

    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)
        self.inner_repeated_number = try container.decodeProtoArray(Swift.Int32.self, firstOfKeys: "innerRepeatedNumber", "inner_repeated_number")
        self.inner_number_after = try container.decodeIfPresent(Swift.Int32.self, firstOfKeys: "innerNumberAfter", "inner_number_after")
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.inner_repeated_number.isEmpty {
            try container.encodeProtoArray(self.inner_repeated_number, forKey: preferCamelCase ? "innerRepeatedNumber" : "inner_repeated_number")
        }
        try container.encodeIfPresent(self.inner_number_after, forKey: preferCamelCase ? "innerNumberAfter" : "inner_number_after")
    }

}
#endif
