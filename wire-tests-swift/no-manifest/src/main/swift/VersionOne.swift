// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.unknownfields.VersionOne in unknown_fields.proto
import Foundation
import Wire

public struct VersionOne {

    @ProtoDefaulted
    public var i: Int32?
    @ProtoDefaulted
    public var obj: NestedVersionOne?
    public var en: EnumVersionOne?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension VersionOne : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension VersionOne : Hashable {
}
#endif

extension VersionOne : Sendable {
}

extension VersionOne : ProtoDefaultedValue {

    public static var defaultedValue: VersionOne {
        VersionOne()
    }
}

extension VersionOne : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.unknownfields.VersionOne"
    }

}

extension VersionOne : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var i: Int32? = nil
        var obj: NestedVersionOne? = nil
        var en: EnumVersionOne? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: i = try protoReader.decode(Int32.self)
            case 7: obj = try protoReader.decode(NestedVersionOne.self)
            case 8: en = try protoReader.decode(EnumVersionOne.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._i.wrappedValue = i
        self._obj.wrappedValue = obj
        self.en = en
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.i)
        try protoWriter.encode(tag: 7, value: self.obj)
        try protoWriter.encode(tag: 8, value: self.en)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension VersionOne : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._i.wrappedValue = try container.decodeIfPresent(Int32.self, forKey: "i")
        self._obj.wrappedValue = try container.decodeIfPresent(NestedVersionOne.self, forKey: "obj")
        self.en = try container.decodeIfPresent(EnumVersionOne.self, forKey: "en")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.i, forKey: "i")
        try container.encodeIfPresent(self.obj, forKey: "obj")
        try container.encodeIfPresent(self.en, forKey: "en")
    }

}
#endif
