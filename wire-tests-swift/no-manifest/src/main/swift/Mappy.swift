// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.protos.kotlin.map.Mappy in map.proto
import Foundation
import Wire

public struct Mappy {

    public var things: [String : Thing] = [:]
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Mappy : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Mappy : Hashable {
}
#endif

extension Mappy : Sendable {
}

extension Mappy : ProtoDefaultedValue {

    public static var defaultedValue: Mappy {
        Mappy()
    }
}

extension Mappy : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/com.squareup.wire.protos.kotlin.map.Mappy"
    }

}

extension Mappy : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var things: [String : Thing] = [:]

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: try protoReader.decode(into: &things)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.things = things
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.things)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension Mappy : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.things = try container.decodeProtoMap([String : Thing].self, forKey: "things")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.things.isEmpty {
            try container.encodeProtoMap(self.things, forKey: "things")
        }
    }

}
#endif
