// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.NegativeValueMessage in negative_value_enum.proto
import Foundation
import Wire

public struct NegativeValueMessage {

    @ProtoDefaulted
    public var value: NegativeValueEnum?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if WIRE_INCLUDE_MEMBERWISE_INITIALIZER
extension NegativeValueMessage {

    @_disfavoredOverload
    @available(*, deprecated)
    public init(value: NegativeValueEnum? = nil) {
        self._value.wrappedValue = value
    }

}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension NegativeValueMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension NegativeValueMessage : Hashable {
}
#endif

#if swift(>=5.5)
extension NegativeValueMessage : Sendable {
}
#endif

extension NegativeValueMessage : ProtoDefaultedValue {

    public static var defaultedValue: NegativeValueMessage {
        NegativeValueMessage()
    }
}

extension NegativeValueMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> Swift.String {
        return "type.googleapis.com/squareup.protos.kotlin.NegativeValueMessage"
    }

}

extension NegativeValueMessage : Proto2Codable {

    public init(from protoReader: Wire.ProtoReader) throws {
        var value: NegativeValueEnum? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: value = try protoReader.decode(NegativeValueEnum.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._value.wrappedValue = value
    }

    public func encode(to protoWriter: Wire.ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.value)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension NegativeValueMessage : Codable {

    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)
        self._value.wrappedValue = try container.decodeIfPresent(NegativeValueEnum.self, forKey: "value")
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.value, forKey: "value")
    }

}
#endif
