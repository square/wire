// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.proto3.kotlin.swift_all_wrappers.AllSwiftWrappers in swift_all_wrappers.proto
import Foundation
import Wire

@dynamicMemberLookup
public struct AllSwiftWrappers {

    @CopyOnWrite
    private var storage: Storage
    /**
     * Access the underlying storage
     */
    public subscript<Property>(dynamicMember keyPath: WritableKeyPath<Storage, Property>) -> Property {
        get {
            storage[keyPath: keyPath]
        }
        set {
            storage[keyPath: keyPath] = newValue
        }
    }
    public var double_value: Double? {
        get {
            storage.double_value
        }
        set {
            storage.double_value = newValue
        }
    }
    public var float_value: Float? {
        get {
            storage.float_value
        }
        set {
            storage.float_value = newValue
        }
    }
    public var int64_value: Int64? {
        get {
            storage.int64_value
        }
        set {
            storage.int64_value = newValue
        }
    }
    public var uint64_value: UInt64? {
        get {
            storage.uint64_value
        }
        set {
            storage.uint64_value = newValue
        }
    }
    public var int32_value: Int32? {
        get {
            storage.int32_value
        }
        set {
            storage.int32_value = newValue
        }
    }
    public var uint32_value: UInt32? {
        get {
            storage.uint32_value
        }
        set {
            storage.uint32_value = newValue
        }
    }
    public var bool_value: Bool? {
        get {
            storage.bool_value
        }
        set {
            storage.bool_value = newValue
        }
    }
    public var string_value: String? {
        get {
            storage.string_value
        }
        set {
            storage.string_value = newValue
        }
    }
    public var bytes_value: Foundation.Data? {
        get {
            storage.bytes_value
        }
        set {
            storage.bytes_value = newValue
        }
    }
    public var rep_double_value: [Double] {
        get {
            storage.rep_double_value
        }
        set {
            storage.rep_double_value = newValue
        }
    }
    public var rep_float_value: [Float] {
        get {
            storage.rep_float_value
        }
        set {
            storage.rep_float_value = newValue
        }
    }
    public var rep_int64_value: [Int64] {
        get {
            storage.rep_int64_value
        }
        set {
            storage.rep_int64_value = newValue
        }
    }
    public var rep_uint64_value: [UInt64] {
        get {
            storage.rep_uint64_value
        }
        set {
            storage.rep_uint64_value = newValue
        }
    }
    public var rep_int32_value: [Int32] {
        get {
            storage.rep_int32_value
        }
        set {
            storage.rep_int32_value = newValue
        }
    }
    public var rep_uint32_value: [UInt32] {
        get {
            storage.rep_uint32_value
        }
        set {
            storage.rep_uint32_value = newValue
        }
    }
    public var rep_bool_value: [Bool] {
        get {
            storage.rep_bool_value
        }
        set {
            storage.rep_bool_value = newValue
        }
    }
    public var rep_string_value: [String] {
        get {
            storage.rep_string_value
        }
        set {
            storage.rep_string_value = newValue
        }
    }
    public var rep_bytes_value: [Foundation.Data] {
        get {
            storage.rep_bytes_value
        }
        set {
            storage.rep_bytes_value = newValue
        }
    }
    public var map_int32_double_value: [Int32 : Double] {
        get {
            storage.map_int32_double_value
        }
        set {
            storage.map_int32_double_value = newValue
        }
    }
    public var map_int32_float_value: [Int32 : Float] {
        get {
            storage.map_int32_float_value
        }
        set {
            storage.map_int32_float_value = newValue
        }
    }
    public var map_int32_int64_value: [Int32 : Int64] {
        get {
            storage.map_int32_int64_value
        }
        set {
            storage.map_int32_int64_value = newValue
        }
    }
    public var map_int32_uint64_value: [Int32 : UInt64] {
        get {
            storage.map_int32_uint64_value
        }
        set {
            storage.map_int32_uint64_value = newValue
        }
    }
    public var map_int32_int32_value: [Int32 : Int32] {
        get {
            storage.map_int32_int32_value
        }
        set {
            storage.map_int32_int32_value = newValue
        }
    }
    public var map_int32_uint32_value: [Int32 : UInt32] {
        get {
            storage.map_int32_uint32_value
        }
        set {
            storage.map_int32_uint32_value = newValue
        }
    }
    public var map_int32_bool_value: [Int32 : Bool] {
        get {
            storage.map_int32_bool_value
        }
        set {
            storage.map_int32_bool_value = newValue
        }
    }
    public var map_int32_string_value: [Int32 : String] {
        get {
            storage.map_int32_string_value
        }
        set {
            storage.map_int32_string_value = newValue
        }
    }
    public var map_int32_bytes_value: [Int32 : Foundation.Data] {
        get {
            storage.map_int32_bytes_value
        }
        set {
            storage.map_int32_bytes_value = newValue
        }
    }
    public var unknownFields: UnknownFields {
        get {
            storage.unknownFields
        }
        set {
            storage.unknownFields = newValue
        }
    }

    public init(configure: (inout Self.Storage) -> Swift.Void = { _ in }) {
        self.storage = Storage(
                configure: configure
                )
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension AllSwiftWrappers : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension AllSwiftWrappers : Hashable {
}
#endif

extension AllSwiftWrappers : Sendable {
}

extension AllSwiftWrappers : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension AllSwiftWrappers : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        self.storage = try Storage(from: protoReader)
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try storage.encode(to: protoWriter)
    }

}

extension AllSwiftWrappers : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.proto3.kotlin.swift_all_wrappers.AllSwiftWrappers"
    }

}

#if !WIRE_REMOVE_CODABLE
extension AllSwiftWrappers : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.storage = try container.decode(Storage.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(storage)
    }

}
#endif

extension AllSwiftWrappers {

    /**
     * Underlying storage for AllSwiftWrappers
     */
    public struct Storage {

        public var double_value: Double?
        public var float_value: Float?
        public var int64_value: Int64?
        public var uint64_value: UInt64?
        public var int32_value: Int32?
        public var uint32_value: UInt32?
        public var bool_value: Bool?
        public var string_value: String?
        public var bytes_value: Foundation.Data?
        public var rep_double_value: [Double] = []
        public var rep_float_value: [Float] = []
        public var rep_int64_value: [Int64] = []
        public var rep_uint64_value: [UInt64] = []
        public var rep_int32_value: [Int32] = []
        public var rep_uint32_value: [UInt32] = []
        public var rep_bool_value: [Bool] = []
        public var rep_string_value: [String] = []
        public var rep_bytes_value: [Foundation.Data] = []
        public var map_int32_double_value: [Int32 : Double] = [:]
        public var map_int32_float_value: [Int32 : Float] = [:]
        public var map_int32_int64_value: [Int32 : Int64] = [:]
        public var map_int32_uint64_value: [Int32 : UInt64] = [:]
        public var map_int32_int32_value: [Int32 : Int32] = [:]
        public var map_int32_uint32_value: [Int32 : UInt32] = [:]
        public var map_int32_bool_value: [Int32 : Bool] = [:]
        public var map_int32_string_value: [Int32 : String] = [:]
        public var map_int32_bytes_value: [Int32 : Foundation.Data] = [:]
        public var unknownFields: UnknownFields = .init()

        public init(configure: (inout Self) -> Swift.Void = { _ in }) {
            configure(&self)
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension AllSwiftWrappers.Storage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension AllSwiftWrappers.Storage : Hashable {
}
#endif

extension AllSwiftWrappers.Storage : Sendable {
}

extension AllSwiftWrappers.Storage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.proto3.kotlin.swift_all_wrappers.AllSwiftWrappers"
    }

}

extension AllSwiftWrappers.Storage : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var double_value: Double? = nil
        var float_value: Float? = nil
        var int64_value: Int64? = nil
        var uint64_value: UInt64? = nil
        var int32_value: Int32? = nil
        var uint32_value: UInt32? = nil
        var bool_value: Bool? = nil
        var string_value: String? = nil
        var bytes_value: Foundation.Data? = nil
        var rep_double_value: [Double] = []
        var rep_float_value: [Float] = []
        var rep_int64_value: [Int64] = []
        var rep_uint64_value: [UInt64] = []
        var rep_int32_value: [Int32] = []
        var rep_uint32_value: [UInt32] = []
        var rep_bool_value: [Bool] = []
        var rep_string_value: [String] = []
        var rep_bytes_value: [Foundation.Data] = []
        var map_int32_double_value: [Int32 : Double] = [:]
        var map_int32_float_value: [Int32 : Float] = [:]
        var map_int32_int64_value: [Int32 : Int64] = [:]
        var map_int32_uint64_value: [Int32 : UInt64] = [:]
        var map_int32_int32_value: [Int32 : Int32] = [:]
        var map_int32_uint32_value: [Int32 : UInt32] = [:]
        var map_int32_bool_value: [Int32 : Bool] = [:]
        var map_int32_string_value: [Int32 : String] = [:]
        var map_int32_bytes_value: [Int32 : Foundation.Data] = [:]

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: double_value = try protoReader.decode(Double.self)
            case 2: float_value = try protoReader.decode(Float.self)
            case 3: int64_value = try protoReader.decode(Int64.self)
            case 4: uint64_value = try protoReader.decode(UInt64.self)
            case 5: int32_value = try protoReader.decode(Int32.self)
            case 6: uint32_value = try protoReader.decode(UInt32.self)
            case 7: bool_value = try protoReader.decode(Bool.self)
            case 8: string_value = try protoReader.decode(String.self)
            case 9: bytes_value = try protoReader.decode(Foundation.Data.self)
            case 101: try protoReader.decode(into: &rep_double_value)
            case 102: try protoReader.decode(into: &rep_float_value)
            case 103: try protoReader.decode(into: &rep_int64_value)
            case 104: try protoReader.decode(into: &rep_uint64_value)
            case 105: try protoReader.decode(into: &rep_int32_value)
            case 106: try protoReader.decode(into: &rep_uint32_value)
            case 107: try protoReader.decode(into: &rep_bool_value)
            case 108: try protoReader.decode(into: &rep_string_value)
            case 109: try protoReader.decode(into: &rep_bytes_value)
            case 301: try protoReader.decode(into: &map_int32_double_value, keyEncoding: .variable)
            case 302: try protoReader.decode(into: &map_int32_float_value, keyEncoding: .variable)
            case 303: try protoReader.decode(into: &map_int32_int64_value, keyEncoding: .variable)
            case 304: try protoReader.decode(into: &map_int32_uint64_value, keyEncoding: .variable)
            case 305: try protoReader.decode(into: &map_int32_int32_value, keyEncoding: .variable)
            case 306: try protoReader.decode(into: &map_int32_uint32_value, keyEncoding: .variable)
            case 307: try protoReader.decode(into: &map_int32_bool_value, keyEncoding: .variable)
            case 308: try protoReader.decode(into: &map_int32_string_value, keyEncoding: .variable)
            case 309: try protoReader.decode(into: &map_int32_bytes_value, keyEncoding: .variable)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.double_value = double_value
        self.float_value = float_value
        self.int64_value = int64_value
        self.uint64_value = uint64_value
        self.int32_value = int32_value
        self.uint32_value = uint32_value
        self.bool_value = bool_value
        self.string_value = string_value
        self.bytes_value = bytes_value
        self.rep_double_value = rep_double_value
        self.rep_float_value = rep_float_value
        self.rep_int64_value = rep_int64_value
        self.rep_uint64_value = rep_uint64_value
        self.rep_int32_value = rep_int32_value
        self.rep_uint32_value = rep_uint32_value
        self.rep_bool_value = rep_bool_value
        self.rep_string_value = rep_string_value
        self.rep_bytes_value = rep_bytes_value
        self.map_int32_double_value = map_int32_double_value
        self.map_int32_float_value = map_int32_float_value
        self.map_int32_int64_value = map_int32_int64_value
        self.map_int32_uint64_value = map_int32_uint64_value
        self.map_int32_int32_value = map_int32_int32_value
        self.map_int32_uint32_value = map_int32_uint32_value
        self.map_int32_bool_value = map_int32_bool_value
        self.map_int32_string_value = map_int32_string_value
        self.map_int32_bytes_value = map_int32_bytes_value
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.double_value)
        try protoWriter.encode(tag: 2, value: self.float_value)
        try protoWriter.encode(tag: 3, value: self.int64_value)
        try protoWriter.encode(tag: 4, value: self.uint64_value)
        try protoWriter.encode(tag: 5, value: self.int32_value)
        try protoWriter.encode(tag: 6, value: self.uint32_value)
        try protoWriter.encode(tag: 7, value: self.bool_value)
        try protoWriter.encode(tag: 8, value: self.string_value)
        try protoWriter.encode(tag: 9, value: self.bytes_value)
        try protoWriter.encode(tag: 101, value: self.rep_double_value)
        try protoWriter.encode(tag: 102, value: self.rep_float_value)
        try protoWriter.encode(tag: 103, value: self.rep_int64_value)
        try protoWriter.encode(tag: 104, value: self.rep_uint64_value)
        try protoWriter.encode(tag: 105, value: self.rep_int32_value)
        try protoWriter.encode(tag: 106, value: self.rep_uint32_value)
        try protoWriter.encode(tag: 107, value: self.rep_bool_value)
        try protoWriter.encode(tag: 108, value: self.rep_string_value)
        try protoWriter.encode(tag: 109, value: self.rep_bytes_value)
        try protoWriter.encode(tag: 301, value: self.map_int32_double_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 302, value: self.map_int32_float_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 303, value: self.map_int32_int64_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 304, value: self.map_int32_uint64_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 305, value: self.map_int32_int32_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 306, value: self.map_int32_uint32_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 307, value: self.map_int32_bool_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 308, value: self.map_int32_string_value, keyEncoding: .variable)
        try protoWriter.encode(tag: 309, value: self.map_int32_bytes_value, keyEncoding: .variable)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension AllSwiftWrappers.Storage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.double_value = try container.decodeIfPresent(Double.self, firstOfKeys: "doubleValue", "double_value")
        self.float_value = try container.decodeIfPresent(Float.self, firstOfKeys: "floatValue", "float_value")
        self.int64_value = try container.decodeIfPresent(stringEncoded: Int64.self, firstOfKeys: "int64Value", "int64_value")
        self.uint64_value = try container.decodeIfPresent(stringEncoded: UInt64.self, firstOfKeys: "uint64Value", "uint64_value")
        self.int32_value = try container.decodeIfPresent(Int32.self, firstOfKeys: "int32Value", "int32_value")
        self.uint32_value = try container.decodeIfPresent(UInt32.self, firstOfKeys: "uint32Value", "uint32_value")
        self.bool_value = try container.decodeIfPresent(Bool.self, firstOfKeys: "boolValue", "bool_value")
        self.string_value = try container.decodeIfPresent(String.self, firstOfKeys: "stringValue", "string_value")
        self.bytes_value = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, firstOfKeys: "bytesValue", "bytes_value")
        self.rep_double_value = try container.decodeProtoArray(Double.self, firstOfKeys: "repDoubleValue", "rep_double_value")
        self.rep_float_value = try container.decodeProtoArray(Float.self, firstOfKeys: "repFloatValue", "rep_float_value")
        self.rep_int64_value = try container.decodeProtoArray(Int64.self, firstOfKeys: "repInt64Value", "rep_int64_value")
        self.rep_uint64_value = try container.decodeProtoArray(UInt64.self, firstOfKeys: "repUint64Value", "rep_uint64_value")
        self.rep_int32_value = try container.decodeProtoArray(Int32.self, firstOfKeys: "repInt32Value", "rep_int32_value")
        self.rep_uint32_value = try container.decodeProtoArray(UInt32.self, firstOfKeys: "repUint32Value", "rep_uint32_value")
        self.rep_bool_value = try container.decodeProtoArray(Bool.self, firstOfKeys: "repBoolValue", "rep_bool_value")
        self.rep_string_value = try container.decodeProtoArray(String.self, firstOfKeys: "repStringValue", "rep_string_value")
        self.rep_bytes_value = try container.decodeProtoArray(Foundation.Data.self, firstOfKeys: "repBytesValue", "rep_bytes_value")
        self.map_int32_double_value = try container.decodeProtoMap([Int32 : Double].self, firstOfKeys: "mapInt32DoubleValue", "map_int32_double_value")
        self.map_int32_float_value = try container.decodeProtoMap([Int32 : Float].self, firstOfKeys: "mapInt32FloatValue", "map_int32_float_value")
        self.map_int32_int64_value = try container.decodeProtoMap([Int32 : Int64].self, firstOfKeys: "mapInt32Int64Value", "map_int32_int64_value")
        self.map_int32_uint64_value = try container.decodeProtoMap([Int32 : UInt64].self, firstOfKeys: "mapInt32Uint64Value", "map_int32_uint64_value")
        self.map_int32_int32_value = try container.decodeProtoMap([Int32 : Int32].self, firstOfKeys: "mapInt32Int32Value", "map_int32_int32_value")
        self.map_int32_uint32_value = try container.decodeProtoMap([Int32 : UInt32].self, firstOfKeys: "mapInt32Uint32Value", "map_int32_uint32_value")
        self.map_int32_bool_value = try container.decodeProtoMap([Int32 : Bool].self, firstOfKeys: "mapInt32BoolValue", "map_int32_bool_value")
        self.map_int32_string_value = try container.decodeProtoMap([Int32 : String].self, firstOfKeys: "mapInt32StringValue", "map_int32_string_value")
        self.map_int32_bytes_value = try container.decodeProtoMap([Int32 : Foundation.Data].self, firstOfKeys: "mapInt32BytesValue", "map_int32_bytes_value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(self.double_value, forKey: preferCamelCase ? "doubleValue" : "double_value")
        try container.encodeIfPresent(self.float_value, forKey: preferCamelCase ? "floatValue" : "float_value")
        try container.encodeIfPresent(stringEncoded: self.int64_value, forKey: preferCamelCase ? "int64Value" : "int64_value")
        try container.encodeIfPresent(stringEncoded: self.uint64_value, forKey: preferCamelCase ? "uint64Value" : "uint64_value")
        try container.encodeIfPresent(self.int32_value, forKey: preferCamelCase ? "int32Value" : "int32_value")
        try container.encodeIfPresent(self.uint32_value, forKey: preferCamelCase ? "uint32Value" : "uint32_value")
        try container.encodeIfPresent(self.bool_value, forKey: preferCamelCase ? "boolValue" : "bool_value")
        try container.encodeIfPresent(self.string_value, forKey: preferCamelCase ? "stringValue" : "string_value")
        try container.encodeIfPresent(stringEncoded: self.bytes_value, forKey: preferCamelCase ? "bytesValue" : "bytes_value")
        if includeDefaults || !self.rep_double_value.isEmpty {
            try container.encodeProtoArray(self.rep_double_value, forKey: preferCamelCase ? "repDoubleValue" : "rep_double_value")
        }
        if includeDefaults || !self.rep_float_value.isEmpty {
            try container.encodeProtoArray(self.rep_float_value, forKey: preferCamelCase ? "repFloatValue" : "rep_float_value")
        }
        if includeDefaults || !self.rep_int64_value.isEmpty {
            try container.encodeProtoArray(self.rep_int64_value, forKey: preferCamelCase ? "repInt64Value" : "rep_int64_value")
        }
        if includeDefaults || !self.rep_uint64_value.isEmpty {
            try container.encodeProtoArray(self.rep_uint64_value, forKey: preferCamelCase ? "repUint64Value" : "rep_uint64_value")
        }
        if includeDefaults || !self.rep_int32_value.isEmpty {
            try container.encodeProtoArray(self.rep_int32_value, forKey: preferCamelCase ? "repInt32Value" : "rep_int32_value")
        }
        if includeDefaults || !self.rep_uint32_value.isEmpty {
            try container.encodeProtoArray(self.rep_uint32_value, forKey: preferCamelCase ? "repUint32Value" : "rep_uint32_value")
        }
        if includeDefaults || !self.rep_bool_value.isEmpty {
            try container.encodeProtoArray(self.rep_bool_value, forKey: preferCamelCase ? "repBoolValue" : "rep_bool_value")
        }
        if includeDefaults || !self.rep_string_value.isEmpty {
            try container.encodeProtoArray(self.rep_string_value, forKey: preferCamelCase ? "repStringValue" : "rep_string_value")
        }
        if includeDefaults || !self.rep_bytes_value.isEmpty {
            try container.encodeProtoArray(self.rep_bytes_value, forKey: preferCamelCase ? "repBytesValue" : "rep_bytes_value")
        }
        if includeDefaults || !self.map_int32_double_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_double_value, forKey: preferCamelCase ? "mapInt32DoubleValue" : "map_int32_double_value")
        }
        if includeDefaults || !self.map_int32_float_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_float_value, forKey: preferCamelCase ? "mapInt32FloatValue" : "map_int32_float_value")
        }
        if includeDefaults || !self.map_int32_int64_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_int64_value, forKey: preferCamelCase ? "mapInt32Int64Value" : "map_int32_int64_value")
        }
        if includeDefaults || !self.map_int32_uint64_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_uint64_value, forKey: preferCamelCase ? "mapInt32Uint64Value" : "map_int32_uint64_value")
        }
        if includeDefaults || !self.map_int32_int32_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_int32_value, forKey: preferCamelCase ? "mapInt32Int32Value" : "map_int32_int32_value")
        }
        if includeDefaults || !self.map_int32_uint32_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_uint32_value, forKey: preferCamelCase ? "mapInt32Uint32Value" : "map_int32_uint32_value")
        }
        if includeDefaults || !self.map_int32_bool_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_bool_value, forKey: preferCamelCase ? "mapInt32BoolValue" : "map_int32_bool_value")
        }
        if includeDefaults || !self.map_int32_string_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_string_value, forKey: preferCamelCase ? "mapInt32StringValue" : "map_int32_string_value")
        }
        if includeDefaults || !self.map_int32_bytes_value.isEmpty {
            try container.encodeProtoMap(self.map_int32_bytes_value, forKey: preferCamelCase ? "mapInt32BytesValue" : "map_int32_bytes_value")
        }
    }

}
#endif
