// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.redacted_test.RedactedOneOf in redacted_one_of.proto
import Foundation
import Wire

public struct RedactedOneOf {

    public var a: A?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension RedactedOneOf : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension RedactedOneOf : Hashable {
}
#endif

extension RedactedOneOf : Sendable {
}

extension RedactedOneOf : ProtoDefaultedValue {

    public static var defaultedValue: RedactedOneOf {
        RedactedOneOf()
    }
}

extension RedactedOneOf : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.redacted_test.RedactedOneOf"
    }

}

extension RedactedOneOf : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var a: A? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: a = .b(try protoReader.decode(Int32.self))
            case 2: a = .c(try protoReader.decode(String.self))
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.a = a
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        if let a = self.a {
            try a.encode(to: protoWriter)
        }
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension RedactedOneOf : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        if let b = try container.decodeIfPresent(Int32.self, forKey: "b") {
            self.a = .b(b)
        } else if let c = try container.decodeIfPresent(String.self, forKey: "c") {
            self.a = .c(c)
        } else {
            self.a = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        switch self.a {
        case .b(let b): try container.encode(b, forKey: "b")
        case .c(let c): try container.encode(c, forKey: "c")
        case Optional.none: break
        }
    }

}
#endif

/**
 * Subtypes within RedactedOneOf
 */
extension RedactedOneOf {

    public enum A {

        case b(Int32)
        case c(String)

        fileprivate func encode(to protoWriter: ProtoWriter) throws {
            switch self {
            case .b(let b): try protoWriter.encode(tag: 1, value: b)
            case .c(let c): try protoWriter.encode(tag: 2, value: c)
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension RedactedOneOf.A : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension RedactedOneOf.A : Hashable {
}
#endif

extension RedactedOneOf.A : Sendable {
}

#if !WIRE_REMOVE_REDACTABLE
extension RedactedOneOf.A : Redactable {

    public enum RedactedKeys : String, RedactedKey {

        case c

    }

}
#endif
