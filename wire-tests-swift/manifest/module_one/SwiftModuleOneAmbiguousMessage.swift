// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.swift_modules.module_one.SwiftModuleOneAmbiguousMessage in swift_module_one.proto
import Wire
import module_address
import module_location

public struct SwiftModuleOneAmbiguousMessage {

    @ProtoDefaulted
    public var name: String?
    public var address: module_address.Address?
    public var location: Location?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SwiftModuleOneAmbiguousMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SwiftModuleOneAmbiguousMessage : Hashable {
}
#endif

extension SwiftModuleOneAmbiguousMessage : Sendable {
}

extension SwiftModuleOneAmbiguousMessage : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension SwiftModuleOneAmbiguousMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.swift_modules.module_one.SwiftModuleOneAmbiguousMessage"
    }

}

extension SwiftModuleOneAmbiguousMessage : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var name: String? = nil
        var address: module_address.Address? = nil
        var location: Location? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: name = try protoReader.decode(String.self)
            case 2: address = try protoReader.decode(module_address.Address.self)
            case 3: location = try protoReader.decode(Location.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._name.wrappedValue = name
        self.address = address
        self.location = location
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.name)
        try protoWriter.encode(tag: 2, value: self.address)
        try protoWriter.encode(tag: 3, value: self.location)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension SwiftModuleOneAmbiguousMessage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._name.wrappedValue = try container.decodeIfPresent(String.self, forKey: "name")
        self.address = try container.decodeIfPresent(module_address.Address.self, forKey: "address")
        self.location = try container.decodeIfPresent(Location.self, forKey: "location")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.name, forKey: "name")
        try container.encodeIfPresent(self.address, forKey: "address")
        try container.encodeIfPresent(self.location, forKey: "location")
    }

}
#endif
