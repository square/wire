// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.swift_modules.module_one.SwiftModuleOneMessage in swift_module_one.proto
import Wire

public struct SwiftModuleOneMessage {

    public var name: String
    public var unknownFields: ExtensibleUnknownFields = .init()

    public init(name: String, configure: (inout Self) -> Swift.Void = { _ in }) {
        self.name = name
        configure(&self)
    }

}

extension SwiftModuleOneMessage : ProtoExtensible {
}

/**
 * Extensions of SwiftModuleOneMessage
 */
extension SwiftModuleOneMessage {

    /**
     *
     * Source: swift_module_three.proto
     */
    public var extension_message: ExtensionMessage? {
        get {
            self.parseUnknownField(fieldNumber: 1000, type: ExtensionMessage.self)
        }
        set {
            self.setUnknownField(fieldNumber: 1000, newValue: newValue)
        }
    }
    /**
     * Default value for extension_message extension field.
     */
    public static let default_extension_message: ExtensionMessage = .defaultedValue
}

#if !WIRE_REMOVE_EQUATABLE
extension SwiftModuleOneMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SwiftModuleOneMessage : Hashable {
}
#endif

extension SwiftModuleOneMessage : Sendable {
}

extension SwiftModuleOneMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.swift_modules.module_one.SwiftModuleOneMessage"
    }

}

extension SwiftModuleOneMessage : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var name: String? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: name = try protoReader.decode(String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.name = try SwiftModuleOneMessage.checkIfMissing(name, "name")
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.name)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension SwiftModuleOneMessage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.name = try container.decode(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.name.isEmpty {
            try container.encode(self.name, forKey: "name")
        }
    }

}
#endif
