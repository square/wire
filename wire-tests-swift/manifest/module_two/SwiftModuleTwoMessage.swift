// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.swift_modules.SwiftModuleTwoMessage in swift_module_two.proto
import Foundation
import Wire
import module_one

public struct SwiftModuleTwoMessage {

    @ProtoDefaulted
    public var name: String?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SwiftModuleTwoMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SwiftModuleTwoMessage : Hashable {
}
#endif

extension SwiftModuleTwoMessage : Sendable {
}

extension SwiftModuleTwoMessage : ProtoDefaultedValue {

    public static var defaultedValue: SwiftModuleTwoMessage {
        SwiftModuleTwoMessage()
    }
}

extension SwiftModuleTwoMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.swift_modules.SwiftModuleTwoMessage"
    }

}

extension SwiftModuleTwoMessage : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var name: String? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: name = try protoReader.decode(String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._name.wrappedValue = name
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.name)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension SwiftModuleTwoMessage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._name.wrappedValue = try container.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.name, forKey: "name")
    }

}
#endif

/**
 * Subtypes within SwiftModuleTwoMessage
 */
extension SwiftModuleTwoMessage {

    public struct NestedMessage {

        public var array_types: [SwiftModuleOneEnum] = []
        public var module_type: SwiftModuleOneMessage?
        public var unknownFields: Foundation.Data = .init()

        public init(configure: (inout Self) -> Swift.Void = { _ in }) {
            configure(&self)
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SwiftModuleTwoMessage.NestedMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SwiftModuleTwoMessage.NestedMessage : Hashable {
}
#endif

extension SwiftModuleTwoMessage.NestedMessage : Sendable {
}

extension SwiftModuleTwoMessage.NestedMessage : ProtoDefaultedValue {

    public static var defaultedValue: SwiftModuleTwoMessage.NestedMessage {
        SwiftModuleTwoMessage.NestedMessage()
    }
}

extension SwiftModuleTwoMessage.NestedMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.swift_modules.SwiftModuleTwoMessage.NestedMessage"
    }

}

extension SwiftModuleTwoMessage.NestedMessage : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var array_types: [SwiftModuleOneEnum] = []
        var module_type: SwiftModuleOneMessage? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: try protoReader.decode(into: &array_types)
            case 2: module_type = try protoReader.decode(SwiftModuleOneMessage.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.array_types = array_types
        self.module_type = module_type
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.array_types)
        try protoWriter.encode(tag: 2, value: self.module_type)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension SwiftModuleTwoMessage.NestedMessage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.array_types = try container.decodeProtoArray(SwiftModuleOneEnum.self, firstOfKeys: "arrayTypes", "array_types")
        self.module_type = try container.decodeIfPresent(SwiftModuleOneMessage.self, firstOfKeys: "moduleType", "module_type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.array_types.isEmpty {
            try container.encodeProtoArray(self.array_types, forKey: preferCamelCase ? "arrayTypes" : "array_types")
        }
        try container.encodeIfPresent(self.module_type, forKey: preferCamelCase ? "moduleType" : "module_type")
    }

}
#endif
