// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.swift_modules.SwiftModuleFourMessage in swift_module_four.proto
import Foundation
import Wire
import module_one

public struct SwiftModuleFourMessage {

    public var numeric: SwiftModuleOneType?
    public var alpha: SwiftModuleOneSecondType?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if WIRE_INCLUDE_MEMBERWISE_INITIALIZER
extension SwiftModuleFourMessage {

    @_disfavoredOverload
    @available(*, deprecated)
    public init(numeric: module_one.SwiftModuleOneType? = nil, alpha: module_one.SwiftModuleOneSecondType? = nil) {
        self.numeric = numeric
        self.alpha = alpha
    }

}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension SwiftModuleFourMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SwiftModuleFourMessage : Hashable {
}
#endif

#if swift(>=5.5)
extension SwiftModuleFourMessage : Sendable {
}
#endif

extension SwiftModuleFourMessage : ProtoDefaultedValue {

    public static var defaultedValue: SwiftModuleFourMessage {
        SwiftModuleFourMessage()
    }
}

extension SwiftModuleFourMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> Swift.String {
        return "type.googleapis.com/squareup.protos.kotlin.swift_modules.SwiftModuleFourMessage"
    }

}

extension SwiftModuleFourMessage : Proto2Codable {

    public init(from protoReader: Wire.ProtoReader) throws {
        var numeric: module_one.SwiftModuleOneType? = nil
        var alpha: module_one.SwiftModuleOneSecondType? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: numeric = try protoReader.decode(module_one.SwiftModuleOneType.self)
            case 2: alpha = try protoReader.decode(module_one.SwiftModuleOneSecondType.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.numeric = numeric
        self.alpha = alpha
    }

    public func encode(to protoWriter: Wire.ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.numeric)
        try protoWriter.encode(tag: 2, value: self.alpha)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension SwiftModuleFourMessage : Codable {

    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)
        self.numeric = try container.decodeIfPresent(module_one.SwiftModuleOneType.self, forKey: "numeric")
        self.alpha = try container.decodeIfPresent(module_one.SwiftModuleOneSecondType.self, forKey: "alpha")
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: Wire.StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.numeric, forKey: "numeric")
        try container.encodeIfPresent(self.alpha, forKey: "alpha")
    }

}
#endif
