name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 8
          - 9
          - 10
          - 11
          - 12
          - 14
          - 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}

      - name: Check test files
        run: |
          ./gradlew clean generateTests
          if [ ! -z "$(git status --porcelain)" ]; then git diff; echo -e "\nTest files changed. Did you run ./gradlew generateTests?"; exit 1; fi

      - name: Test
        run: |
          ./gradlew -p wire-library -Dkjs=false -Dknative=false build --stacktrace -Pswift=false
          ./gradlew build
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  multiplatform:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Setup Xcode
        run: sudo xcode-select -switch "/Applications/Xcode_12.app"

      - name: Check test files
        run: |
          ./gradlew clean generateTests
          if [ ! -z "$(git status --porcelain)" ]; then git diff; echo -e "\nTest files changed. Did you run ./gradlew generateTests?"; exit 1; fi

      - name: Install Chrome
        run: |
          brew update
          brew install google-chrome

      - name: Test
        run: |
          ./gradlew -p wire-library build -Pswift=false
          ./gradlew build
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  windows:
    runs-on: windows-latest

    steps:
      - name: Set git to use LF and not automatically replace them with CRLF.
        run: |
          git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Check test files
        run: |
          ./gradlew clean generateTests
          if [ ! -z "$(git status --porcelain)" ]; then git diff; echo -e "\nTest files changed. Did you run ./gradlew generateTests?"; exit 1; fi
        shell: bash

      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Test
        run: |
          .\gradlew.bat -p wire-library build -Pswift=false
          .\gradlew.bat build
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  swift:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Setup Xcode
        run: sudo xcode-select -switch "/Applications/Xcode_12.app"

      - name: Test Swift Runtime
        # This builds the wire-swift-runtime, verifies that generated protos match what's
        # currently checked into the repo both for the runtime itself and for its tests, and runs
        # the tests.
        run: |
          ./gradlew -p wire-library :wire-runtime-swift:build
          if [ ! -z "$(git status --porcelain)" ]; then git diff; echo -e "\nGenerated files changed. Did you run ./gradlew generateSwiftProtos?"; exit 1; fi

      - name: Generate Swift from golden proto files
        # This compiles the golden proto files into Swift files and
        # ensures that those outputs match what's currently checked into the repo.
        # These generated files are compiled during the wire-tests-swift build but should still be
        # reviewed manually.
        # Finally, run the associated unit tests.
        run: |
          ./gradlew generateSwiftTests
          if [ ! -z "$(git status --porcelain)" ]; then git diff; echo -e "\nGenerated files changed. Did you run ./gradlew generateSwiftProtos and generateSwiftTests?"; exit 1; fi
          ./gradlew -p wire-library :wire-tests-swift:build

  publish:
    runs-on: macos-latest
    if: github.repository == 'square/wire' && github.ref == 'refs/heads/master'
    needs: [jvm, multiplatform]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Setup Xcode
        run: sudo xcode-select -switch "/Applications/Xcode_12.app"

      - name: Upload Artifacts
        run: |
          ./gradlew -p wire-library clean publish --stacktrace --no-parallel
          ./gradlew -p wire-library publishPluginToGradlePortalIfRelease --stacktrace -Pgradle.publish.key="${{ secrets.GRADLE_PUBLISH_KEY }}" -Pgradle.publish.secret="${{ secrets.GRADLE_PUBLISH_SECRET }}"
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

      # TODO(egorand): Publish website
      #
      # - name: Prep mkdocs
      #   run: .buildscript/prepare_mkdocs.sh
      #
      # - name: Deploy docs
      #   uses: mhausenblas/mkdocs-deploy-gh-pages@master
      #   env:
      #     PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
