// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.redacted_test.RedactedCycleB in redacted_test_builders_only.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.squareup.wire.protos.kotlin.redacted.buildersonly

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmSynthetic
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okio.ByteString

public class RedactedCycleB private constructor(
  builder: Builder,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RedactedCycleB, RedactedCycleB.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.protos.kotlin.redacted.buildersonly.RedactedCycleA#ADAPTER",
    schemaIndex = 0,
  )
  @JvmField
  public val a: RedactedCycleA? = builder.a

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.a = a
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RedactedCycleB) return false
    if (unknownFields != other.unknownFields) return false
    if (a != other.a) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (a?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (a != null) result += """a=$a"""
    return result.joinToString(prefix = "RedactedCycleB{", separator = ", ", postfix = "}")
  }

  public class Builder : Message.Builder<RedactedCycleB, Builder>() {
    @JvmField
    public var a: RedactedCycleA? = null

    public fun a(a: RedactedCycleA?): Builder {
      this.a = a
      return this
    }

    override fun build(): RedactedCycleB = RedactedCycleB(
      builder = this,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RedactedCycleB> = object : ProtoAdapter<RedactedCycleB>(
      FieldEncoding.LENGTH_DELIMITED, 
      RedactedCycleB::class, 
      "type.googleapis.com/squareup.protos.kotlin.redacted_test.RedactedCycleB", 
      PROTO_2, 
      null, 
      "redacted_test_builders_only.proto"
    ) {
      override fun encodedSize(`value`: RedactedCycleB): Int {
        var size = value.unknownFields.size
        size += RedactedCycleA.ADAPTER.encodedSizeWithTag(1, value.a)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: RedactedCycleB) {
        RedactedCycleA.ADAPTER.encodeWithTag(writer, 1, value.a)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: RedactedCycleB) {
        writer.writeBytes(value.unknownFields)
        RedactedCycleA.ADAPTER.encodeWithTag(writer, 1, value.a)
      }

      override fun decode(reader: ProtoReader): RedactedCycleB {
        val builder = Builder()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> builder.a(RedactedCycleA.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return RedactedCycleB(
          builder = builder,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: RedactedCycleB): RedactedCycleB = RedactedCycleB(
        builder = value.newBuilder()
          .a(value.a?.let(RedactedCycleA.ADAPTER::redact)),
        unknownFields = ByteString.EMPTY,
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): RedactedCycleB =
        Builder().apply(body).build()
  }
}
