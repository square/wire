// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.foreign.ForeignMessage in foreign.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.squareup.wire.protos.kotlin.foreign

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class ForeignMessage(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    schemaIndex = 0,
  )
  public val i: Int? = null,
  /**
   * Extension source: simple_message.proto
   */
  @field:WireField(
    tag = 100,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    schemaIndex = 1,
  )
  public val j: Int? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ForeignMessage, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ForeignMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (i != other.i) return false
    if (j != other.j) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (i?.hashCode() ?: 0)
      result = result * 37 + (j?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (i != null) result += """i=$i"""
    if (j != null) result += """j=$j"""
    return result.joinToString(prefix = "ForeignMessage{", separator = ", ", postfix = "}")
  }

  public fun copy(
    i: Int? = this.i,
    j: Int? = this.j,
    unknownFields: ByteString = this.unknownFields,
  ): ForeignMessage = ForeignMessage(i, j, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ForeignMessage> = object : ProtoAdapter<ForeignMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      ForeignMessage::class, 
      "type.googleapis.com/squareup.protos.kotlin.foreign.ForeignMessage", 
      PROTO_2, 
      null, 
      "foreign.proto"
    ) {
      override fun encodedSize(`value`: ForeignMessage): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.i)
        size += ProtoAdapter.INT32.encodedSizeWithTag(100, value.j)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ForeignMessage) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.i)
        ProtoAdapter.INT32.encodeWithTag(writer, 100, value.j)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ForeignMessage) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.INT32.encodeWithTag(writer, 100, value.j)
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.i)
      }

      override fun decode(reader: ProtoReader): ForeignMessage {
        var i: Int? = null
        var j: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> i = ProtoAdapter.INT32.decode(reader)
            100 -> j = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ForeignMessage(
          i = i,
          j = j,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ForeignMessage): ForeignMessage = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
