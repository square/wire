// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.NegativeValueEnum in negative_value_enum.proto
package com.squareup.wire.protos.kotlin

import com.squareup.wire.EnumAdapter
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import kotlin.Int

public enum class NegativeValueEnum(
  override val `value`: Int,
) : WireEnum {
  DO_NOT_USE(-1),
  ;

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<NegativeValueEnum> = object : EnumAdapter<NegativeValueEnum>(
      NegativeValueEnum::class, 
      PROTO_2, 
      null
    ) {
      override fun fromValue(`value`: Int): NegativeValueEnum? = NegativeValueEnum.fromValue(value)
    }

    @JvmStatic
    public fun fromValue(`value`: Int): NegativeValueEnum? = when (value) {
      -1 -> DO_NOT_USE
      else -> null
    }
  }
}
