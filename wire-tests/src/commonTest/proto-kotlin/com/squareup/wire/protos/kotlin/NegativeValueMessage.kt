// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.NegativeValueMessage in negative_value_enum.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.squareup.wire.protos.kotlin

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class NegativeValueMessage(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.protos.kotlin.NegativeValueEnum#ADAPTER",
    declaredName = "value",
    schemaIndex = 0,
  )
  public val value_: NegativeValueEnum? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<NegativeValueMessage, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is NegativeValueMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (value_ != other.value_) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (value_?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (value_ != null) result += """value_=$value_"""
    return result.joinToString(prefix = "NegativeValueMessage{", separator = ", ", postfix = "}")
  }

  public fun copy(value_: NegativeValueEnum? = this.value_, unknownFields: ByteString =
      this.unknownFields): NegativeValueMessage = NegativeValueMessage(value_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<NegativeValueMessage> = object :
        ProtoAdapter<NegativeValueMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      NegativeValueMessage::class, 
      "type.googleapis.com/squareup.protos.kotlin.NegativeValueMessage", 
      PROTO_2, 
      null, 
      "negative_value_enum.proto"
    ) {
      override fun encodedSize(`value`: NegativeValueMessage): Int {
        var size = value.unknownFields.size
        size += NegativeValueEnum.ADAPTER.encodedSizeWithTag(1, value.value_)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: NegativeValueMessage) {
        NegativeValueEnum.ADAPTER.encodeWithTag(writer, 1, value.value_)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: NegativeValueMessage) {
        writer.writeBytes(value.unknownFields)
        NegativeValueEnum.ADAPTER.encodeWithTag(writer, 1, value.value_)
      }

      override fun decode(reader: ProtoReader): NegativeValueMessage {
        var value_: NegativeValueEnum? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              value_ = NegativeValueEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return NegativeValueMessage(
          value_ = value_,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: NegativeValueMessage): NegativeValueMessage = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
