/*
 * Copyright 2025 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package squareup.proto3.kotlin.swift_all_wrappers;

import "google/protobuf/wrappers.proto";

message AllSwiftWrappers {
  optional google.protobuf.DoubleValue double_value = 1;
  optional google.protobuf.FloatValue float_value = 2;
  optional google.protobuf.Int64Value int64_value = 3;
  optional google.protobuf.UInt64Value uint64_value = 4;
  optional google.protobuf.Int32Value int32_value = 5;
  optional google.protobuf.UInt32Value uint32_value = 6;
  optional google.protobuf.BoolValue bool_value = 7;
  optional google.protobuf.StringValue string_value = 8;
  optional google.protobuf.BytesValue bytes_value = 9;

  repeated google.protobuf.DoubleValue rep_double_value = 101;
  repeated google.protobuf.FloatValue rep_float_value = 102;
  repeated google.protobuf.Int64Value rep_int64_value = 103;
  repeated google.protobuf.UInt64Value rep_uint64_value = 104;
  repeated google.protobuf.Int32Value rep_int32_value = 105;
  repeated google.protobuf.UInt32Value rep_uint32_value = 106;
  repeated google.protobuf.BoolValue rep_bool_value = 107;
  repeated google.protobuf.StringValue rep_string_value = 108;
  repeated google.protobuf.BytesValue rep_bytes_value = 109;

  map<int32, google.protobuf.DoubleValue> map_int32_double_value = 301;
  map<int32, google.protobuf.FloatValue> map_int32_float_value = 302;
  map<int32, google.protobuf.Int64Value> map_int32_int64_value = 303;
  map<int32, google.protobuf.UInt64Value> map_int32_uint64_value = 304;
  map<int32, google.protobuf.Int32Value> map_int32_int32_value = 305;
  map<int32, google.protobuf.UInt32Value> map_int32_uint32_value = 306;
  map<int32, google.protobuf.BoolValue> map_int32_bool_value = 307;
  map<int32, google.protobuf.StringValue> map_int32_string_value = 308;
  map<int32, google.protobuf.BytesValue> map_int32_bytes_value = 309;
}
