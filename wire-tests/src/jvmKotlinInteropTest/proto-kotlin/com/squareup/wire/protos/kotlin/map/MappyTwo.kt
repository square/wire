// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.protos.kotlin.map.MappyTwo in map.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.squareup.wire.protos.kotlin.map

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.JvmSynthetic
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.lazy
import okio.ByteString

public class MappyTwo(
  string_enums: Map<String, ValueEnum> = emptyMap(),
  int_things: Map<Long, Thing> = emptyMap(),
  string_ints: Map<String, Long> = emptyMap(),
  int_things_two: Map<Int, Thing> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<MappyTwo, MappyTwo.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.protos.kotlin.map.MappyTwo${'$'}ValueEnum#ADAPTER",
    schemaIndex = 0,
  )
  @JvmField
  public val string_enums: Map<String, ValueEnum> = immutableCopyOf("string_enums", string_enums)

  @field:WireField(
    tag = 2,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SINT64",
    adapter = "com.squareup.wire.protos.kotlin.map.Thing#ADAPTER",
    schemaIndex = 1,
  )
  @JvmField
  public val int_things: Map<Long, Thing> = immutableCopyOf("int_things", int_things)

  @field:WireField(
    tag = 3,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    schemaIndex = 2,
  )
  @JvmField
  public val string_ints: Map<String, Long> = immutableCopyOf("string_ints", string_ints)

  @field:WireField(
    tag = 4,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SINT32",
    adapter = "com.squareup.wire.protos.kotlin.map.Thing#ADAPTER",
    schemaIndex = 3,
  )
  @JvmField
  public val int_things_two: Map<Int, Thing> = immutableCopyOf("int_things_two", int_things_two)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.string_enums = string_enums
    builder.int_things = int_things
    builder.string_ints = string_ints
    builder.int_things_two = int_things_two
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MappyTwo) return false
    if (unknownFields != other.unknownFields) return false
    if (string_enums != other.string_enums) return false
    if (int_things != other.int_things) return false
    if (string_ints != other.string_ints) return false
    if (int_things_two != other.int_things_two) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + string_enums.hashCode()
      result = result * 37 + int_things.hashCode()
      result = result * 37 + string_ints.hashCode()
      result = result * 37 + int_things_two.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (string_enums.isNotEmpty()) result += """string_enums=$string_enums"""
    if (int_things.isNotEmpty()) result += """int_things=$int_things"""
    if (string_ints.isNotEmpty()) result += """string_ints=$string_ints"""
    if (int_things_two.isNotEmpty()) result += """int_things_two=$int_things_two"""
    return result.joinToString(prefix = "MappyTwo{", separator = ", ", postfix = "}")
  }

  public fun copy(
    string_enums: Map<String, ValueEnum> = this.string_enums,
    int_things: Map<Long, Thing> = this.int_things,
    string_ints: Map<String, Long> = this.string_ints,
    int_things_two: Map<Int, Thing> = this.int_things_two,
    unknownFields: ByteString = this.unknownFields,
  ): MappyTwo = MappyTwo(string_enums, int_things, string_ints, int_things_two, unknownFields)

  public class Builder : Message.Builder<MappyTwo, Builder>() {
    @JvmField
    public var string_enums: Map<String, ValueEnum> = emptyMap()

    @JvmField
    public var int_things: Map<Long, Thing> = emptyMap()

    @JvmField
    public var string_ints: Map<String, Long> = emptyMap()

    @JvmField
    public var int_things_two: Map<Int, Thing> = emptyMap()

    public fun string_enums(string_enums: Map<String, ValueEnum>): Builder {
      this.string_enums = string_enums
      return this
    }

    public fun int_things(int_things: Map<Long, Thing>): Builder {
      this.int_things = int_things
      return this
    }

    public fun string_ints(string_ints: Map<String, Long>): Builder {
      this.string_ints = string_ints
      return this
    }

    public fun int_things_two(int_things_two: Map<Int, Thing>): Builder {
      this.int_things_two = int_things_two
      return this
    }

    override fun build(): MappyTwo = MappyTwo(
      string_enums = string_enums,
      int_things = int_things,
      string_ints = string_ints,
      int_things_two = int_things_two,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<MappyTwo> = object : ProtoAdapter<MappyTwo>(
      FieldEncoding.LENGTH_DELIMITED, 
      MappyTwo::class, 
      "type.googleapis.com/com.squareup.wire.protos.kotlin.map.MappyTwo", 
      PROTO_2, 
      null, 
      "map.proto"
    ) {
      private val string_enumsAdapter: ProtoAdapter<Map<String, ValueEnum>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ValueEnum.ADAPTER) }

      private val int_thingsAdapter: ProtoAdapter<Map<Long, Thing>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SINT64, Thing.ADAPTER) }

      private val string_intsAdapter: ProtoAdapter<Map<String, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.SINT64) }

      private val int_things_twoAdapter: ProtoAdapter<Map<Int, Thing>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SINT32, Thing.ADAPTER) }

      override fun encodedSize(`value`: MappyTwo): Int {
        var size = value.unknownFields.size
        size += string_enumsAdapter.encodedSizeWithTag(1, value.string_enums)
        size += int_thingsAdapter.encodedSizeWithTag(2, value.int_things)
        size += string_intsAdapter.encodedSizeWithTag(3, value.string_ints)
        size += int_things_twoAdapter.encodedSizeWithTag(4, value.int_things_two)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: MappyTwo) {
        string_enumsAdapter.encodeWithTag(writer, 1, value.string_enums)
        int_thingsAdapter.encodeWithTag(writer, 2, value.int_things)
        string_intsAdapter.encodeWithTag(writer, 3, value.string_ints)
        int_things_twoAdapter.encodeWithTag(writer, 4, value.int_things_two)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: MappyTwo) {
        writer.writeBytes(value.unknownFields)
        int_things_twoAdapter.encodeWithTag(writer, 4, value.int_things_two)
        string_intsAdapter.encodeWithTag(writer, 3, value.string_ints)
        int_thingsAdapter.encodeWithTag(writer, 2, value.int_things)
        string_enumsAdapter.encodeWithTag(writer, 1, value.string_enums)
      }

      override fun decode(reader: ProtoReader): MappyTwo {
        val string_enums = mutableMapOf<String, ValueEnum>()
        val int_things = mutableMapOf<Long, Thing>()
        val string_ints = mutableMapOf<String, Long>()
        val int_things_two = mutableMapOf<Int, Thing>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> string_enums.putAll(string_enumsAdapter.decode(reader))
            2 -> int_things.putAll(int_thingsAdapter.decode(reader))
            3 -> string_ints.putAll(string_intsAdapter.decode(reader))
            4 -> int_things_two.putAll(int_things_twoAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return MappyTwo(
          string_enums = string_enums,
          int_things = int_things,
          string_ints = string_ints,
          int_things_two = int_things_two,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: MappyTwo): MappyTwo = value.copy(
        int_things = value.int_things.redactElements(Thing.ADAPTER),
        int_things_two = value.int_things_two.redactElements(Thing.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L

    @JvmSynthetic
    public inline fun build(body: Builder.() -> Unit): MappyTwo = Builder().apply(body).build()
  }

  public enum class ValueEnum(
    override val `value`: Int,
  ) : WireEnum {
    DEFAULT(0),
    FOO(1),
    BAR(2),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<ValueEnum> = object : EnumAdapter<ValueEnum>(
        ValueEnum::class, 
        PROTO_2, 
        ValueEnum.DEFAULT
      ) {
        override fun fromValue(`value`: Int): ValueEnum? = ValueEnum.fromValue(`value`)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): ValueEnum? = when (`value`) {
        0 -> DEFAULT
        1 -> FOO
        2 -> BAR
        else -> null
      }
    }
  }
}
