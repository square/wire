// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: roots.proto
package com.squareup.wire.protos.roots;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Used to test --includes flag of WireCompiler
 *
 * A -> B -> C
 *  \
 *   -> D
 *
 * E -> E.F
 *  \
 *   -> G
 *
 * H -> E.F
 *
 * I -> nothing
 */
public final class A extends Message<A, A.Builder> {
  public static final ProtoAdapter<A> ADAPTER = new ProtoAdapter_A();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.protos.roots.B#ADAPTER"
  )
  public final B c;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.protos.roots.D#ADAPTER"
  )
  public final D d;

  public A(B c, D d) {
    this(c, d, ByteString.EMPTY);
  }

  public A(B c, D d, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.c = c;
    this.d = d;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.c = c;
    builder.d = d;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof A)) return false;
    A o = (A) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(c, o.c)
        && Internal.equals(d, o.d);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (c != null ? c.hashCode() : 0);
      result = result * 37 + (d != null ? d.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (c != null) builder.append(", c=").append(c);
    if (d != null) builder.append(", d=").append(d);
    return builder.replace(0, 2, "A{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<A, Builder> {
    public B c;

    public D d;

    public Builder() {
    }

    public Builder c(B c) {
      this.c = c;
      return this;
    }

    public Builder d(D d) {
      this.d = d;
      return this;
    }

    @Override
    public A build() {
      return new A(c, d, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_A extends ProtoAdapter<A> {
    public ProtoAdapter_A() {
      super(FieldEncoding.LENGTH_DELIMITED, A.class);
    }

    @Override
    public int encodedSize(A value) {
      return B.ADAPTER.encodedSizeWithTag(1, value.c)
          + D.ADAPTER.encodedSizeWithTag(2, value.d)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, A value) throws IOException {
      B.ADAPTER.encodeWithTag(writer, 1, value.c);
      D.ADAPTER.encodeWithTag(writer, 2, value.d);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public A decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.c(B.ADAPTER.decode(reader)); break;
          case 2: builder.d(D.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public A redact(A value) {
      Builder builder = value.newBuilder();
      if (builder.c != null) builder.c = B.ADAPTER.redact(builder.c);
      if (builder.d != null) builder.d = D.ADAPTER.redact(builder.d);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
