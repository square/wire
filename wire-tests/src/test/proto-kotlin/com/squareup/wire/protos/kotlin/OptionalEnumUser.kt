// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: optional_enum.proto
package com.squareup.wire.protos.kotlin

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import com.squareup.wire.WireEnum
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.jvm.JvmField
import okio.ByteString

data class OptionalEnumUser(val optional_enum: OptionalEnum? = null, val unknownFields: ByteString = ByteString.EMPTY) : Message<OptionalEnumUser, OptionalEnumUser.Builder>(ADAPTER, unknownFields) {
    @Deprecated(
            message = "Shouldn't be used in Kotlin",
            level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Builder = Builder(this.copy())

    class Builder(private val message: OptionalEnumUser) : Message.Builder<OptionalEnumUser, Builder>() {
        override fun build(): OptionalEnumUser = message
    }

    companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<OptionalEnumUser> =
                object : ProtoAdapter<OptionalEnumUser>(FieldEncoding.LENGTH_DELIMITED, OptionalEnumUser::class.java) {
            override fun encodedSize(value: OptionalEnumUser): Int = OptionalEnum.ADAPTER.encodedSizeWithTag(1, value.optional_enum) +
                value.unknownFields.size

            override fun encode(writer: ProtoWriter, value: OptionalEnumUser) {
                OptionalEnum.ADAPTER.encodeWithTag(writer, 1, value.optional_enum)
                writer.writeBytes(value.unknownFields)
            }

            override fun decode(reader: ProtoReader): OptionalEnumUser {
                var optional_enum: OptionalEnum? = null
                val unknownFields = reader.forEachTag { tag ->
                    when (tag) {
                        1 -> optional_enum = OptionalEnum.ADAPTER.decode(reader)
                        else -> TagHandler.UNKNOWN_TAG
                    }
                }
                return OptionalEnumUser(
                    optional_enum = optional_enum,
                    unknownFields = unknownFields
                )
            }
        }
    }

    enum class OptionalEnum(private val value: Int) : WireEnum {
        FOO(1),

        BAR(2);

        override fun getValue(): Int = value

        companion object {
            @JvmField
            val ADAPTER: ProtoAdapter<OptionalEnum> =
                    object : EnumAdapter<OptionalEnum>(OptionalEnum::class.java) {
                override fun fromValue(value: Int): OptionalEnum? = values().find { it.value == value }
            }
        }
    }
}
