// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: same_name_enum.proto
package com.squareup.wire.protos.kotlin

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.WireEnum
import kotlin.AssertionError
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Nothing
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

data class MessageWithStatus(
  val unknownFields: ByteString = ByteString.EMPTY
) : Message<MessageWithStatus, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing {
    throw AssertionError()
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<MessageWithStatus> = object : ProtoAdapter<MessageWithStatus>(
      FieldEncoding.LENGTH_DELIMITED, 
      MessageWithStatus::class
    ) {
      override fun encodedSize(value: MessageWithStatus): Int = 
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: MessageWithStatus) {
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): MessageWithStatus {
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            else -> reader.readUnknownField(tag)
          }
        }
        return MessageWithStatus(
          unknownFields = unknownFields
        )
      }

      override fun redact(value: MessageWithStatus): MessageWithStatus = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }
  }

  enum class Status(
    override val value: Int
  ) : WireEnum {
    A(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Status> = object : EnumAdapter<Status>(
        Status::class
      ) {
        override fun fromValue(value: Int): Status = Status.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Status = when (value) {
        1 -> A
        else -> throw IllegalArgumentException("""Unexpected value: $value""")
      }
    }
  }
}
