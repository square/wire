// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: person.proto
package com.squareup.wire.protos.kotlin.person

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.Internal
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

data class Person(
    @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter.STRING") val name: String,
    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter.INT32") val id: Int,
    @WireField(tag = 3, adapter = "com.squareup.wire.ProtoAdapter.STRING") val email: String? = null,
    @WireField(tag = 4, adapter = "PhoneNumber.ADAPTER") val phone: List<PhoneNumber> = emptyList(),
    val unknownFields: ByteString = ByteString.EMPTY
) : Message<Person, Person.Builder>(ADAPTER, unknownFields) {
    override fun newBuilder(): Builder {
        val builder = Builder()
        builder.name = name
        builder.id = id
        builder.email = email
        builder.phone = phone
        builder.addUnknownFields(unknownFields())
        return builder
    }

    class Builder : Message.Builder<Person, Builder>() {
        internal var name: String? = null

        internal var id: Int? = null

        internal var email: String? = null

        internal var phone: List<PhoneNumber> = Internal.newMutableList()

        /**
         * The customer's full name. */
        fun name(name: String): Builder {
            this.name = name
            return this
        }

        /**
         * The customer's ID number. */
        fun id(id: Int): Builder {
            this.id = id
            return this
        }

        /**
         * Email address for the customer. */
        fun email(email: String?): Builder {
            this.email = email
            return this
        }

        /**
         * A list of the customer's phone numbers. */
        fun phone(phone: List<PhoneNumber>): Builder {
            Internal.checkElementsNotNull(phone)
            this.phone = phone
            return this
        }

        override fun build(): Person = Person(
            name = name ?: throw Internal.missingRequiredFields(name, "name"),
            id = id ?: throw Internal.missingRequiredFields(id, "id"),
            email = email,
            phone = phone,
            unknownFields = buildUnknownFields()
        )
    }

    companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<Person> =
                object : ProtoAdapter<Person>(FieldEncoding.LENGTH_DELIMITED, Person::class.java) {
            override fun encodedSize(value: Person): Int = ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) +
                ProtoAdapter.INT32.encodedSizeWithTag(2, value.id) +
                ProtoAdapter.STRING.encodedSizeWithTag(3, value.email) +
                PhoneNumber.ADAPTER.asRepeated().encodedSizeWithTag(4, value.phone) +
                value.unknownFields.size

            override fun encode(writer: ProtoWriter, value: Person) {
                ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
                ProtoAdapter.INT32.encodeWithTag(writer, 2, value.id)
                ProtoAdapter.STRING.encodeWithTag(writer, 3, value.email)
                PhoneNumber.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.phone)
                writer.writeBytes(value.unknownFields)
            }

            override fun decode(reader: ProtoReader): Person {
                var name: String? = null
                var id: Int? = null
                var email: String? = null
                var phone = mutableListOf<PhoneNumber>()
                val unknownFields = reader.forEachTag { tag ->
                    when (tag) {
                        1 -> name = ProtoAdapter.STRING.decode(reader)
                        2 -> id = ProtoAdapter.INT32.decode(reader)
                        3 -> email = ProtoAdapter.STRING.decode(reader)
                        4 -> phone.add(PhoneNumber.ADAPTER.decode(reader))
                        else -> TagHandler.UNKNOWN_TAG
                    }
                }
                return Person(
                    name = name ?: throw Internal.missingRequiredFields(name, "name"),
                    id = id ?: throw Internal.missingRequiredFields(id, "id"),
                    email = email,
                    phone = phone,
                    unknownFields = unknownFields
                )
            }
        }
    }

    enum class PhoneType(private val value: Int) : WireEnum {
        MOBILE(0),

        HOME(1),

        /**
         * Could be phone or fax. */
        WORK(2);

        override fun getValue(): Int = value

        companion object {
            @JvmField
            val ADAPTER: ProtoAdapter<PhoneType> =
                    object : EnumAdapter<PhoneType>(PhoneType::class.java) {
                override fun fromValue(value: Int): PhoneType? = values().find { it.value == value }
            }
        }
    }

    data class PhoneNumber(
        @WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter.STRING") val number: String,
        @WireField(tag = 2, adapter = "PhoneType.ADAPTER") val type: PhoneType = PhoneType.HOME,
        val unknownFields: ByteString = ByteString.EMPTY
    ) : Message<PhoneNumber, PhoneNumber.Builder>(ADAPTER, unknownFields) {
        override fun newBuilder(): Builder {
            val builder = Builder()
            builder.number = number
            builder.type = type
            builder.addUnknownFields(unknownFields())
            return builder
        }

        class Builder : Message.Builder<PhoneNumber, Builder>() {
            internal var number: String? = null

            internal var type: PhoneType = PhoneType.HOME

            /**
             * The customer's phone number. */
            fun number(number: String): Builder {
                this.number = number
                return this
            }

            /**
             * The type of phone stored here. */
            fun type(type: PhoneType): Builder {
                this.type = type
                return this
            }

            override fun build(): PhoneNumber = PhoneNumber(
                number = number ?: throw Internal.missingRequiredFields(number, "number"),
                type = type,
                unknownFields = buildUnknownFields()
            )
        }

        companion object {
            @JvmField
            val ADAPTER: ProtoAdapter<PhoneNumber> =
                    object : ProtoAdapter<PhoneNumber>(FieldEncoding.LENGTH_DELIMITED, PhoneNumber::class.java) {
                override fun encodedSize(value: PhoneNumber): Int = ProtoAdapter.STRING.encodedSizeWithTag(1, value.number) +
                    PhoneType.ADAPTER.encodedSizeWithTag(2, value.type) +
                    value.unknownFields.size

                override fun encode(writer: ProtoWriter, value: PhoneNumber) {
                    ProtoAdapter.STRING.encodeWithTag(writer, 1, value.number)
                    PhoneType.ADAPTER.encodeWithTag(writer, 2, value.type)
                    writer.writeBytes(value.unknownFields)
                }

                override fun decode(reader: ProtoReader): PhoneNumber {
                    var number: String? = null
                    var type: PhoneType = PhoneType.HOME
                    val unknownFields = reader.forEachTag { tag ->
                        when (tag) {
                            1 -> number = ProtoAdapter.STRING.decode(reader)
                            2 -> type = PhoneType.ADAPTER.decode(reader)
                            else -> TagHandler.UNKNOWN_TAG
                        }
                    }
                    return PhoneNumber(
                        number = number ?: throw Internal.missingRequiredFields(number, "number"),
                        type = type,
                        unknownFields = unknownFields
                    )
                }
            }
        }
    }
}
