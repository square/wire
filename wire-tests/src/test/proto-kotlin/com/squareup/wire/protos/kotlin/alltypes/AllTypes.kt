// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: all_types.proto
package com.squareup.wire.protos.kotlin.alltypes

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.missingRequiredFields
import com.squareup.wire.internal.redactElements
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString
import okio.ByteString.Companion.decodeBase64

data class AllTypes(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  val opt_int32: Int? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  val opt_uint32: Int? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  val opt_sint32: Int? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  val opt_fixed32: Int? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  val opt_sfixed32: Int? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  val opt_int64: Long? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  val opt_uint64: Long? = null,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  val opt_sint64: Long? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  val opt_fixed64: Long? = null,
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  val opt_sfixed64: Long? = null,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val opt_bool: Boolean? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  val opt_float: Float? = null,
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  val opt_double: Double? = null,
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val opt_string: String? = null,
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  val opt_bytes: ByteString? = null,
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  val opt_nested_enum: NestedEnum? = null,
  @field:WireField(
    tag = 17,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  val opt_nested_message: NestedMessage? = null,
  @field:WireField(
    tag = 101,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED
  )
  val req_int32: Int,
  @field:WireField(
    tag = 102,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REQUIRED
  )
  val req_uint32: Int,
  @field:WireField(
    tag = 103,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REQUIRED
  )
  val req_sint32: Int,
  @field:WireField(
    tag = 104,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REQUIRED
  )
  val req_fixed32: Int,
  @field:WireField(
    tag = 105,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REQUIRED
  )
  val req_sfixed32: Int,
  @field:WireField(
    tag = 106,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REQUIRED
  )
  val req_int64: Long,
  @field:WireField(
    tag = 107,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REQUIRED
  )
  val req_uint64: Long,
  @field:WireField(
    tag = 108,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REQUIRED
  )
  val req_sint64: Long,
  @field:WireField(
    tag = 109,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REQUIRED
  )
  val req_fixed64: Long,
  @field:WireField(
    tag = 110,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REQUIRED
  )
  val req_sfixed64: Long,
  @field:WireField(
    tag = 111,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REQUIRED
  )
  val req_bool: Boolean,
  @field:WireField(
    tag = 112,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REQUIRED
  )
  val req_float: Float,
  @field:WireField(
    tag = 113,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REQUIRED
  )
  val req_double: Double,
  @field:WireField(
    tag = 114,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED
  )
  val req_string: String,
  @field:WireField(
    tag = 115,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REQUIRED
  )
  val req_bytes: ByteString,
  @field:WireField(
    tag = 116,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REQUIRED
  )
  val req_nested_enum: NestedEnum,
  @field:WireField(
    tag = 117,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REQUIRED
  )
  val req_nested_message: NestedMessage,
  @field:WireField(
    tag = 201,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED
  )
  val rep_int32: List<Int> = emptyList(),
  @field:WireField(
    tag = 202,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REPEATED
  )
  val rep_uint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 203,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REPEATED
  )
  val rep_sint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 204,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REPEATED
  )
  val rep_fixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 205,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REPEATED
  )
  val rep_sfixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 206,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REPEATED
  )
  val rep_int64: List<Long> = emptyList(),
  @field:WireField(
    tag = 207,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REPEATED
  )
  val rep_uint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 208,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REPEATED
  )
  val rep_sint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 209,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REPEATED
  )
  val rep_fixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 210,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REPEATED
  )
  val rep_sfixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 211,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REPEATED
  )
  val rep_bool: List<Boolean> = emptyList(),
  @field:WireField(
    tag = 212,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REPEATED
  )
  val rep_float: List<Float> = emptyList(),
  @field:WireField(
    tag = 213,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REPEATED
  )
  val rep_double: List<Double> = emptyList(),
  @field:WireField(
    tag = 214,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  val rep_string: List<String> = emptyList(),
  @field:WireField(
    tag = 215,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REPEATED
  )
  val rep_bytes: List<ByteString> = emptyList(),
  @field:WireField(
    tag = 216,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val rep_nested_enum: List<NestedEnum> = emptyList(),
  @field:WireField(
    tag = 217,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val rep_nested_message: List<NestedMessage> = emptyList(),
  @field:WireField(
    tag = 301,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED
  )
  val pack_int32: List<Int> = emptyList(),
  @field:WireField(
    tag = 302,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.PACKED
  )
  val pack_uint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 303,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.PACKED
  )
  val pack_sint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 304,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.PACKED
  )
  val pack_fixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 305,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.PACKED
  )
  val pack_sfixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 306,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.PACKED
  )
  val pack_int64: List<Long> = emptyList(),
  @field:WireField(
    tag = 307,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.PACKED
  )
  val pack_uint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 308,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.PACKED
  )
  val pack_sint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 309,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.PACKED
  )
  val pack_fixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 310,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.PACKED
  )
  val pack_sfixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 311,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.PACKED
  )
  val pack_bool: List<Boolean> = emptyList(),
  @field:WireField(
    tag = 312,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.PACKED
  )
  val pack_float: List<Float> = emptyList(),
  @field:WireField(
    tag = 313,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.PACKED
  )
  val pack_double: List<Double> = emptyList(),
  @field:WireField(
    tag = 316,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.PACKED
  )
  val pack_nested_enum: List<NestedEnum> = emptyList(),
  @field:WireField(
    tag = 401,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  val default_int32: Int? = null,
  @field:WireField(
    tag = 402,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  val default_uint32: Int? = null,
  @field:WireField(
    tag = 403,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  val default_sint32: Int? = null,
  @field:WireField(
    tag = 404,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  val default_fixed32: Int? = null,
  @field:WireField(
    tag = 405,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  val default_sfixed32: Int? = null,
  @field:WireField(
    tag = 406,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  val default_int64: Long? = null,
  @field:WireField(
    tag = 407,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  val default_uint64: Long? = null,
  @field:WireField(
    tag = 408,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  val default_sint64: Long? = null,
  @field:WireField(
    tag = 409,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  val default_fixed64: Long? = null,
  @field:WireField(
    tag = 410,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  val default_sfixed64: Long? = null,
  @field:WireField(
    tag = 411,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val default_bool: Boolean? = null,
  @field:WireField(
    tag = 412,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  val default_float: Float? = null,
  @field:WireField(
    tag = 413,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  val default_double: Double? = null,
  @field:WireField(
    tag = 414,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val default_string: String? = null,
  @field:WireField(
    tag = 415,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  val default_bytes: ByteString? = null,
  @field:WireField(
    tag = 416,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  val default_nested_enum: NestedEnum? = null,
  @field:WireField(
    tag = 501,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  val map_int32_int32: Map<Int, Int>,
  @field:WireField(
    tag = 502,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val map_string_string: Map<String, String>,
  @field:WireField(
    tag = 503,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  val map_string_message: Map<String, NestedMessage>,
  @field:WireField(
    tag = 504,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  val map_string_enum: Map<String, NestedEnum>,
  @field:WireField(
    tag = 1001,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  val ext_opt_int32: Int? = null,
  @field:WireField(
    tag = 1002,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  val ext_opt_uint32: Int? = null,
  @field:WireField(
    tag = 1003,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  val ext_opt_sint32: Int? = null,
  @field:WireField(
    tag = 1004,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  val ext_opt_fixed32: Int? = null,
  @field:WireField(
    tag = 1005,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  val ext_opt_sfixed32: Int? = null,
  @field:WireField(
    tag = 1006,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  val ext_opt_int64: Long? = null,
  @field:WireField(
    tag = 1007,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  val ext_opt_uint64: Long? = null,
  @field:WireField(
    tag = 1008,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  val ext_opt_sint64: Long? = null,
  @field:WireField(
    tag = 1009,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  val ext_opt_fixed64: Long? = null,
  @field:WireField(
    tag = 1010,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  val ext_opt_sfixed64: Long? = null,
  @field:WireField(
    tag = 1011,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val ext_opt_bool: Boolean? = null,
  @field:WireField(
    tag = 1012,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  val ext_opt_float: Float? = null,
  @field:WireField(
    tag = 1013,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  val ext_opt_double: Double? = null,
  @field:WireField(
    tag = 1014,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val ext_opt_string: String? = null,
  @field:WireField(
    tag = 1015,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  val ext_opt_bytes: ByteString? = null,
  @field:WireField(
    tag = 1016,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  val ext_opt_nested_enum: NestedEnum? = null,
  @field:WireField(
    tag = 1017,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  val ext_opt_nested_message: NestedMessage? = null,
  @field:WireField(
    tag = 1101,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED
  )
  val ext_rep_int32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1102,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REPEATED
  )
  val ext_rep_uint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1103,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REPEATED
  )
  val ext_rep_sint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1104,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REPEATED
  )
  val ext_rep_fixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1105,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REPEATED
  )
  val ext_rep_sfixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1106,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REPEATED
  )
  val ext_rep_int64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1107,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REPEATED
  )
  val ext_rep_uint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1108,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REPEATED
  )
  val ext_rep_sint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1109,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REPEATED
  )
  val ext_rep_fixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1110,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REPEATED
  )
  val ext_rep_sfixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1111,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REPEATED
  )
  val ext_rep_bool: List<Boolean> = emptyList(),
  @field:WireField(
    tag = 1112,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REPEATED
  )
  val ext_rep_float: List<Float> = emptyList(),
  @field:WireField(
    tag = 1113,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REPEATED
  )
  val ext_rep_double: List<Double> = emptyList(),
  @field:WireField(
    tag = 1114,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  val ext_rep_string: List<String> = emptyList(),
  @field:WireField(
    tag = 1115,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REPEATED
  )
  val ext_rep_bytes: List<ByteString> = emptyList(),
  @field:WireField(
    tag = 1116,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val ext_rep_nested_enum: List<NestedEnum> = emptyList(),
  @field:WireField(
    tag = 1117,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val ext_rep_nested_message: List<NestedMessage> = emptyList(),
  @field:WireField(
    tag = 1201,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED
  )
  val ext_pack_int32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1202,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.PACKED
  )
  val ext_pack_uint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1203,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.PACKED
  )
  val ext_pack_sint32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1204,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.PACKED
  )
  val ext_pack_fixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1205,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.PACKED
  )
  val ext_pack_sfixed32: List<Int> = emptyList(),
  @field:WireField(
    tag = 1206,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.PACKED
  )
  val ext_pack_int64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1207,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.PACKED
  )
  val ext_pack_uint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1208,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.PACKED
  )
  val ext_pack_sint64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1209,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.PACKED
  )
  val ext_pack_fixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1210,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.PACKED
  )
  val ext_pack_sfixed64: List<Long> = emptyList(),
  @field:WireField(
    tag = 1211,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.PACKED
  )
  val ext_pack_bool: List<Boolean> = emptyList(),
  @field:WireField(
    tag = 1212,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.PACKED
  )
  val ext_pack_float: List<Float> = emptyList(),
  @field:WireField(
    tag = 1213,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.PACKED
  )
  val ext_pack_double: List<Double> = emptyList(),
  @field:WireField(
    tag = 1216,
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.PACKED
  )
  val ext_pack_nested_enum: List<NestedEnum> = emptyList(),
  @field:WireField(
    tag = 1301,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  val ext_map_int32_int32: Map<Int, Int>,
  @field:WireField(
    tag = 1402,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val ext_map_string_string: Map<String, String>,
  @field:WireField(
    tag = 1503,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  val ext_map_string_message: Map<String, NestedMessage>,
  @field:WireField(
    tag = 1504,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.protos.kotlin.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  val ext_map_string_enum: Map<String, NestedEnum>,
  val unknownFields: ByteString = ByteString.EMPTY
) : Message<AllTypes, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing {
    throw AssertionError()
  }

  companion object {
    const val DEFAULT_DEFAULT_INT32: Int = Int.MAX_VALUE

    const val DEFAULT_DEFAULT_UINT32: Int = -1

    const val DEFAULT_DEFAULT_SINT32: Int = Int.MIN_VALUE

    const val DEFAULT_DEFAULT_FIXED32: Int = -1

    const val DEFAULT_DEFAULT_SFIXED32: Int = Int.MIN_VALUE

    const val DEFAULT_DEFAULT_INT64: Long = Long.MAX_VALUE

    const val DEFAULT_DEFAULT_UINT64: Long = -1L

    const val DEFAULT_DEFAULT_SINT64: Long = Long.MIN_VALUE

    const val DEFAULT_DEFAULT_FIXED64: Long = -1L

    const val DEFAULT_DEFAULT_SFIXED64: Long = Long.MIN_VALUE

    const val DEFAULT_DEFAULT_BOOL: Boolean = true

    const val DEFAULT_DEFAULT_FLOAT: Float = 123.456e7f

    const val DEFAULT_DEFAULT_DOUBLE: Double = 123.456e78

    const val DEFAULT_DEFAULT_STRING: String =
        "çok\u0007\b\u000c\n\r\t\u000b\u0001\u0001\u0001\u000f\u000f~\u0001\u0001\u0011\u0001\u0001\u0011güzel"

    @JvmField
    val DEFAULT_DEFAULT_BYTES: ByteString = "529rBwgMCg0JCwEBAQ8PfgEBEQEBEWf8emVs".decodeBase64()!!

    @JvmField
    val DEFAULT_DEFAULT_NESTED_ENUM: NestedEnum = NestedEnum.A

    @JvmField
    val ADAPTER: ProtoAdapter<AllTypes> = object : ProtoAdapter<AllTypes>(
      FieldEncoding.LENGTH_DELIMITED, 
      AllTypes::class
    ) {
      private val map_int32_int32Adapter: ProtoAdapter<Map<Int, Int>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32)

      private val map_string_stringAdapter: ProtoAdapter<Map<String, String>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING)

      private val map_string_messageAdapter: ProtoAdapter<Map<String, NestedMessage>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedMessage.ADAPTER)

      private val map_string_enumAdapter: ProtoAdapter<Map<String, NestedEnum>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedEnum.ADAPTER)

      private val ext_map_int32_int32Adapter: ProtoAdapter<Map<Int, Int>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32)

      private val ext_map_string_stringAdapter: ProtoAdapter<Map<String, String>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING)

      private val ext_map_string_messageAdapter: ProtoAdapter<Map<String, NestedMessage>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedMessage.ADAPTER)

      private val ext_map_string_enumAdapter: ProtoAdapter<Map<String, NestedEnum>> =
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedEnum.ADAPTER)

      override fun encodedSize(value: AllTypes): Int = 
        ProtoAdapter.INT32.encodedSizeWithTag(1, value.opt_int32) +
        ProtoAdapter.UINT32.encodedSizeWithTag(2, value.opt_uint32) +
        ProtoAdapter.SINT32.encodedSizeWithTag(3, value.opt_sint32) +
        ProtoAdapter.FIXED32.encodedSizeWithTag(4, value.opt_fixed32) +
        ProtoAdapter.SFIXED32.encodedSizeWithTag(5, value.opt_sfixed32) +
        ProtoAdapter.INT64.encodedSizeWithTag(6, value.opt_int64) +
        ProtoAdapter.UINT64.encodedSizeWithTag(7, value.opt_uint64) +
        ProtoAdapter.SINT64.encodedSizeWithTag(8, value.opt_sint64) +
        ProtoAdapter.FIXED64.encodedSizeWithTag(9, value.opt_fixed64) +
        ProtoAdapter.SFIXED64.encodedSizeWithTag(10, value.opt_sfixed64) +
        ProtoAdapter.BOOL.encodedSizeWithTag(11, value.opt_bool) +
        ProtoAdapter.FLOAT.encodedSizeWithTag(12, value.opt_float) +
        ProtoAdapter.DOUBLE.encodedSizeWithTag(13, value.opt_double) +
        ProtoAdapter.STRING.encodedSizeWithTag(14, value.opt_string) +
        ProtoAdapter.BYTES.encodedSizeWithTag(15, value.opt_bytes) +
        NestedEnum.ADAPTER.encodedSizeWithTag(16, value.opt_nested_enum) +
        NestedMessage.ADAPTER.encodedSizeWithTag(17, value.opt_nested_message) +
        ProtoAdapter.INT32.encodedSizeWithTag(101, value.req_int32) +
        ProtoAdapter.UINT32.encodedSizeWithTag(102, value.req_uint32) +
        ProtoAdapter.SINT32.encodedSizeWithTag(103, value.req_sint32) +
        ProtoAdapter.FIXED32.encodedSizeWithTag(104, value.req_fixed32) +
        ProtoAdapter.SFIXED32.encodedSizeWithTag(105, value.req_sfixed32) +
        ProtoAdapter.INT64.encodedSizeWithTag(106, value.req_int64) +
        ProtoAdapter.UINT64.encodedSizeWithTag(107, value.req_uint64) +
        ProtoAdapter.SINT64.encodedSizeWithTag(108, value.req_sint64) +
        ProtoAdapter.FIXED64.encodedSizeWithTag(109, value.req_fixed64) +
        ProtoAdapter.SFIXED64.encodedSizeWithTag(110, value.req_sfixed64) +
        ProtoAdapter.BOOL.encodedSizeWithTag(111, value.req_bool) +
        ProtoAdapter.FLOAT.encodedSizeWithTag(112, value.req_float) +
        ProtoAdapter.DOUBLE.encodedSizeWithTag(113, value.req_double) +
        ProtoAdapter.STRING.encodedSizeWithTag(114, value.req_string) +
        ProtoAdapter.BYTES.encodedSizeWithTag(115, value.req_bytes) +
        NestedEnum.ADAPTER.encodedSizeWithTag(116, value.req_nested_enum) +
        NestedMessage.ADAPTER.encodedSizeWithTag(117, value.req_nested_message) +
        ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.rep_int32) +
        ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.rep_uint32) +
        ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.rep_sint32) +
        ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.rep_fixed32) +
        ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.rep_sfixed32) +
        ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.rep_int64) +
        ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.rep_uint64) +
        ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.rep_sint64) +
        ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.rep_fixed64) +
        ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.rep_sfixed64) +
        ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.rep_bool) +
        ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.rep_float) +
        ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.rep_double) +
        ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.rep_string) +
        ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.rep_bytes) +
        NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(216, value.rep_nested_enum) +
        NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(217, value.rep_nested_message) +
        ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(301, value.pack_int32) +
        ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(302, value.pack_uint32) +
        ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(303, value.pack_sint32) +
        ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(304, value.pack_fixed32) +
        ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(305, value.pack_sfixed32) +
        ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(306, value.pack_int64) +
        ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(307, value.pack_uint64) +
        ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(308, value.pack_sint64) +
        ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(309, value.pack_fixed64) +
        ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(310, value.pack_sfixed64) +
        ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(311, value.pack_bool) +
        ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(312, value.pack_float) +
        ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(313, value.pack_double) +
        NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(316, value.pack_nested_enum) +
        ProtoAdapter.INT32.encodedSizeWithTag(401, value.default_int32) +
        ProtoAdapter.UINT32.encodedSizeWithTag(402, value.default_uint32) +
        ProtoAdapter.SINT32.encodedSizeWithTag(403, value.default_sint32) +
        ProtoAdapter.FIXED32.encodedSizeWithTag(404, value.default_fixed32) +
        ProtoAdapter.SFIXED32.encodedSizeWithTag(405, value.default_sfixed32) +
        ProtoAdapter.INT64.encodedSizeWithTag(406, value.default_int64) +
        ProtoAdapter.UINT64.encodedSizeWithTag(407, value.default_uint64) +
        ProtoAdapter.SINT64.encodedSizeWithTag(408, value.default_sint64) +
        ProtoAdapter.FIXED64.encodedSizeWithTag(409, value.default_fixed64) +
        ProtoAdapter.SFIXED64.encodedSizeWithTag(410, value.default_sfixed64) +
        ProtoAdapter.BOOL.encodedSizeWithTag(411, value.default_bool) +
        ProtoAdapter.FLOAT.encodedSizeWithTag(412, value.default_float) +
        ProtoAdapter.DOUBLE.encodedSizeWithTag(413, value.default_double) +
        ProtoAdapter.STRING.encodedSizeWithTag(414, value.default_string) +
        ProtoAdapter.BYTES.encodedSizeWithTag(415, value.default_bytes) +
        NestedEnum.ADAPTER.encodedSizeWithTag(416, value.default_nested_enum) +
        map_int32_int32Adapter.encodedSizeWithTag(501, value.map_int32_int32) +
        map_string_stringAdapter.encodedSizeWithTag(502, value.map_string_string) +
        map_string_messageAdapter.encodedSizeWithTag(503, value.map_string_message) +
        map_string_enumAdapter.encodedSizeWithTag(504, value.map_string_enum) +
        ProtoAdapter.INT32.encodedSizeWithTag(1001, value.ext_opt_int32) +
        ProtoAdapter.UINT32.encodedSizeWithTag(1002, value.ext_opt_uint32) +
        ProtoAdapter.SINT32.encodedSizeWithTag(1003, value.ext_opt_sint32) +
        ProtoAdapter.FIXED32.encodedSizeWithTag(1004, value.ext_opt_fixed32) +
        ProtoAdapter.SFIXED32.encodedSizeWithTag(1005, value.ext_opt_sfixed32) +
        ProtoAdapter.INT64.encodedSizeWithTag(1006, value.ext_opt_int64) +
        ProtoAdapter.UINT64.encodedSizeWithTag(1007, value.ext_opt_uint64) +
        ProtoAdapter.SINT64.encodedSizeWithTag(1008, value.ext_opt_sint64) +
        ProtoAdapter.FIXED64.encodedSizeWithTag(1009, value.ext_opt_fixed64) +
        ProtoAdapter.SFIXED64.encodedSizeWithTag(1010, value.ext_opt_sfixed64) +
        ProtoAdapter.BOOL.encodedSizeWithTag(1011, value.ext_opt_bool) +
        ProtoAdapter.FLOAT.encodedSizeWithTag(1012, value.ext_opt_float) +
        ProtoAdapter.DOUBLE.encodedSizeWithTag(1013, value.ext_opt_double) +
        ProtoAdapter.STRING.encodedSizeWithTag(1014, value.ext_opt_string) +
        ProtoAdapter.BYTES.encodedSizeWithTag(1015, value.ext_opt_bytes) +
        NestedEnum.ADAPTER.encodedSizeWithTag(1016, value.ext_opt_nested_enum) +
        NestedMessage.ADAPTER.encodedSizeWithTag(1017, value.ext_opt_nested_message) +
        ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(1101, value.ext_rep_int32) +
        ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(1102, value.ext_rep_uint32) +
        ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(1103, value.ext_rep_sint32) +
        ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(1104, value.ext_rep_fixed32) +
        ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(1105, value.ext_rep_sfixed32) +
        ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(1106, value.ext_rep_int64) +
        ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(1107, value.ext_rep_uint64) +
        ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(1108, value.ext_rep_sint64) +
        ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(1109, value.ext_rep_fixed64) +
        ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(1110, value.ext_rep_sfixed64) +
        ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(1111, value.ext_rep_bool) +
        ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(1112, value.ext_rep_float) +
        ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(1113, value.ext_rep_double) +
        ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1114, value.ext_rep_string) +
        ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(1115, value.ext_rep_bytes) +
        NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(1116, value.ext_rep_nested_enum) +
        NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(1117, value.ext_rep_nested_message) +
        ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(1201, value.ext_pack_int32) +
        ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(1202, value.ext_pack_uint32) +
        ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(1203, value.ext_pack_sint32) +
        ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(1204, value.ext_pack_fixed32) +
        ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(1205, value.ext_pack_sfixed32) +
        ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(1206, value.ext_pack_int64) +
        ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(1207, value.ext_pack_uint64) +
        ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(1208, value.ext_pack_sint64) +
        ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(1209, value.ext_pack_fixed64) +
        ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(1210, value.ext_pack_sfixed64) +
        ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(1211, value.ext_pack_bool) +
        ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(1212, value.ext_pack_float) +
        ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(1213, value.ext_pack_double) +
        NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(1216, value.ext_pack_nested_enum) +
        ext_map_int32_int32Adapter.encodedSizeWithTag(1301, value.ext_map_int32_int32) +
        ext_map_string_stringAdapter.encodedSizeWithTag(1402, value.ext_map_string_string) +
        ext_map_string_messageAdapter.encodedSizeWithTag(1503, value.ext_map_string_message) +
        ext_map_string_enumAdapter.encodedSizeWithTag(1504, value.ext_map_string_enum) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: AllTypes) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.opt_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.opt_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.opt_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 4, value.opt_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 5, value.opt_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 6, value.opt_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.opt_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 8, value.opt_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 9, value.opt_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 10, value.opt_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.opt_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 12, value.opt_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 13, value.opt_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 14, value.opt_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 15, value.opt_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 16, value.opt_nested_enum)
        NestedMessage.ADAPTER.encodeWithTag(writer, 17, value.opt_nested_message)
        ProtoAdapter.INT32.encodeWithTag(writer, 101, value.req_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 102, value.req_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 103, value.req_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 104, value.req_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 105, value.req_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 106, value.req_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 107, value.req_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 108, value.req_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 109, value.req_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 110, value.req_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 111, value.req_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 112, value.req_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 113, value.req_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 114, value.req_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 115, value.req_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 116, value.req_nested_enum)
        NestedMessage.ADAPTER.encodeWithTag(writer, 117, value.req_nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.rep_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.rep_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.rep_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.rep_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.rep_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.rep_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.rep_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.rep_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.rep_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.rep_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.rep_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.rep_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.rep_double)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.rep_string)
        ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.rep_bytes)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.rep_nested_enum)
        NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 217, value.rep_nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 301, value.pack_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 302, value.pack_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 303, value.pack_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 304, value.pack_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 305, value.pack_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 306, value.pack_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 307, value.pack_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 308, value.pack_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 309, value.pack_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 310, value.pack_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 311, value.pack_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 312, value.pack_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 313, value.pack_double)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 316, value.pack_nested_enum)
        ProtoAdapter.INT32.encodeWithTag(writer, 401, value.default_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 402, value.default_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 403, value.default_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 404, value.default_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 405, value.default_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 406, value.default_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 407, value.default_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 408, value.default_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 409, value.default_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 410, value.default_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 411, value.default_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 412, value.default_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 413, value.default_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 414, value.default_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 415, value.default_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 416, value.default_nested_enum)
        map_int32_int32Adapter.encodeWithTag(writer, 501, value.map_int32_int32)
        map_string_stringAdapter.encodeWithTag(writer, 502, value.map_string_string)
        map_string_messageAdapter.encodeWithTag(writer, 503, value.map_string_message)
        map_string_enumAdapter.encodeWithTag(writer, 504, value.map_string_enum)
        ProtoAdapter.INT32.encodeWithTag(writer, 1001, value.ext_opt_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 1002, value.ext_opt_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 1003, value.ext_opt_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 1004, value.ext_opt_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 1005, value.ext_opt_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 1006, value.ext_opt_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 1007, value.ext_opt_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 1008, value.ext_opt_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 1009, value.ext_opt_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 1010, value.ext_opt_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 1011, value.ext_opt_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 1012, value.ext_opt_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 1013, value.ext_opt_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 1014, value.ext_opt_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 1015, value.ext_opt_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 1016, value.ext_opt_nested_enum)
        NestedMessage.ADAPTER.encodeWithTag(writer, 1017, value.ext_opt_nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 1101, value.ext_rep_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 1102, value.ext_rep_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 1103, value.ext_rep_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 1104, value.ext_rep_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 1105, value.ext_rep_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 1106, value.ext_rep_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 1107, value.ext_rep_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 1108, value.ext_rep_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 1109, value.ext_rep_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 1110, value.ext_rep_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 1111, value.ext_rep_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 1112, value.ext_rep_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 1113, value.ext_rep_double)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1114, value.ext_rep_string)
        ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 1115, value.ext_rep_bytes)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 1116, value.ext_rep_nested_enum)
        NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 1117, value.ext_rep_nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 1201, value.ext_pack_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 1202, value.ext_pack_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 1203, value.ext_pack_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 1204, value.ext_pack_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 1205, value.ext_pack_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 1206, value.ext_pack_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 1207, value.ext_pack_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 1208, value.ext_pack_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 1209, value.ext_pack_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 1210, value.ext_pack_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 1211, value.ext_pack_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 1212, value.ext_pack_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 1213, value.ext_pack_double)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 1216, value.ext_pack_nested_enum)
        ext_map_int32_int32Adapter.encodeWithTag(writer, 1301, value.ext_map_int32_int32)
        ext_map_string_stringAdapter.encodeWithTag(writer, 1402, value.ext_map_string_string)
        ext_map_string_messageAdapter.encodeWithTag(writer, 1503, value.ext_map_string_message)
        ext_map_string_enumAdapter.encodeWithTag(writer, 1504, value.ext_map_string_enum)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): AllTypes {
        var opt_int32: Int? = null
        var opt_uint32: Int? = null
        var opt_sint32: Int? = null
        var opt_fixed32: Int? = null
        var opt_sfixed32: Int? = null
        var opt_int64: Long? = null
        var opt_uint64: Long? = null
        var opt_sint64: Long? = null
        var opt_fixed64: Long? = null
        var opt_sfixed64: Long? = null
        var opt_bool: Boolean? = null
        var opt_float: Float? = null
        var opt_double: Double? = null
        var opt_string: String? = null
        var opt_bytes: ByteString? = null
        var opt_nested_enum: NestedEnum? = null
        var opt_nested_message: NestedMessage? = null
        var req_int32: Int? = null
        var req_uint32: Int? = null
        var req_sint32: Int? = null
        var req_fixed32: Int? = null
        var req_sfixed32: Int? = null
        var req_int64: Long? = null
        var req_uint64: Long? = null
        var req_sint64: Long? = null
        var req_fixed64: Long? = null
        var req_sfixed64: Long? = null
        var req_bool: Boolean? = null
        var req_float: Float? = null
        var req_double: Double? = null
        var req_string: String? = null
        var req_bytes: ByteString? = null
        var req_nested_enum: NestedEnum? = null
        var req_nested_message: NestedMessage? = null
        val rep_int32 = mutableListOf<Int>()
        val rep_uint32 = mutableListOf<Int>()
        val rep_sint32 = mutableListOf<Int>()
        val rep_fixed32 = mutableListOf<Int>()
        val rep_sfixed32 = mutableListOf<Int>()
        val rep_int64 = mutableListOf<Long>()
        val rep_uint64 = mutableListOf<Long>()
        val rep_sint64 = mutableListOf<Long>()
        val rep_fixed64 = mutableListOf<Long>()
        val rep_sfixed64 = mutableListOf<Long>()
        val rep_bool = mutableListOf<Boolean>()
        val rep_float = mutableListOf<Float>()
        val rep_double = mutableListOf<Double>()
        val rep_string = mutableListOf<String>()
        val rep_bytes = mutableListOf<ByteString>()
        val rep_nested_enum = mutableListOf<NestedEnum>()
        val rep_nested_message = mutableListOf<NestedMessage>()
        val pack_int32 = mutableListOf<Int>()
        val pack_uint32 = mutableListOf<Int>()
        val pack_sint32 = mutableListOf<Int>()
        val pack_fixed32 = mutableListOf<Int>()
        val pack_sfixed32 = mutableListOf<Int>()
        val pack_int64 = mutableListOf<Long>()
        val pack_uint64 = mutableListOf<Long>()
        val pack_sint64 = mutableListOf<Long>()
        val pack_fixed64 = mutableListOf<Long>()
        val pack_sfixed64 = mutableListOf<Long>()
        val pack_bool = mutableListOf<Boolean>()
        val pack_float = mutableListOf<Float>()
        val pack_double = mutableListOf<Double>()
        val pack_nested_enum = mutableListOf<NestedEnum>()
        var default_int32: Int? = null
        var default_uint32: Int? = null
        var default_sint32: Int? = null
        var default_fixed32: Int? = null
        var default_sfixed32: Int? = null
        var default_int64: Long? = null
        var default_uint64: Long? = null
        var default_sint64: Long? = null
        var default_fixed64: Long? = null
        var default_sfixed64: Long? = null
        var default_bool: Boolean? = null
        var default_float: Float? = null
        var default_double: Double? = null
        var default_string: String? = null
        var default_bytes: ByteString? = null
        var default_nested_enum: NestedEnum? = null
        val map_int32_int32 = mutableMapOf<Int, Int>()
        val map_string_string = mutableMapOf<String, String>()
        val map_string_message = mutableMapOf<String, NestedMessage>()
        val map_string_enum = mutableMapOf<String, NestedEnum>()
        var ext_opt_int32: Int? = null
        var ext_opt_uint32: Int? = null
        var ext_opt_sint32: Int? = null
        var ext_opt_fixed32: Int? = null
        var ext_opt_sfixed32: Int? = null
        var ext_opt_int64: Long? = null
        var ext_opt_uint64: Long? = null
        var ext_opt_sint64: Long? = null
        var ext_opt_fixed64: Long? = null
        var ext_opt_sfixed64: Long? = null
        var ext_opt_bool: Boolean? = null
        var ext_opt_float: Float? = null
        var ext_opt_double: Double? = null
        var ext_opt_string: String? = null
        var ext_opt_bytes: ByteString? = null
        var ext_opt_nested_enum: NestedEnum? = null
        var ext_opt_nested_message: NestedMessage? = null
        val ext_rep_int32 = mutableListOf<Int>()
        val ext_rep_uint32 = mutableListOf<Int>()
        val ext_rep_sint32 = mutableListOf<Int>()
        val ext_rep_fixed32 = mutableListOf<Int>()
        val ext_rep_sfixed32 = mutableListOf<Int>()
        val ext_rep_int64 = mutableListOf<Long>()
        val ext_rep_uint64 = mutableListOf<Long>()
        val ext_rep_sint64 = mutableListOf<Long>()
        val ext_rep_fixed64 = mutableListOf<Long>()
        val ext_rep_sfixed64 = mutableListOf<Long>()
        val ext_rep_bool = mutableListOf<Boolean>()
        val ext_rep_float = mutableListOf<Float>()
        val ext_rep_double = mutableListOf<Double>()
        val ext_rep_string = mutableListOf<String>()
        val ext_rep_bytes = mutableListOf<ByteString>()
        val ext_rep_nested_enum = mutableListOf<NestedEnum>()
        val ext_rep_nested_message = mutableListOf<NestedMessage>()
        val ext_pack_int32 = mutableListOf<Int>()
        val ext_pack_uint32 = mutableListOf<Int>()
        val ext_pack_sint32 = mutableListOf<Int>()
        val ext_pack_fixed32 = mutableListOf<Int>()
        val ext_pack_sfixed32 = mutableListOf<Int>()
        val ext_pack_int64 = mutableListOf<Long>()
        val ext_pack_uint64 = mutableListOf<Long>()
        val ext_pack_sint64 = mutableListOf<Long>()
        val ext_pack_fixed64 = mutableListOf<Long>()
        val ext_pack_sfixed64 = mutableListOf<Long>()
        val ext_pack_bool = mutableListOf<Boolean>()
        val ext_pack_float = mutableListOf<Float>()
        val ext_pack_double = mutableListOf<Double>()
        val ext_pack_nested_enum = mutableListOf<NestedEnum>()
        val ext_map_int32_int32 = mutableMapOf<Int, Int>()
        val ext_map_string_string = mutableMapOf<String, String>()
        val ext_map_string_message = mutableMapOf<String, NestedMessage>()
        val ext_map_string_enum = mutableMapOf<String, NestedEnum>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> opt_int32 = ProtoAdapter.INT32.decode(reader)
            2 -> opt_uint32 = ProtoAdapter.UINT32.decode(reader)
            3 -> opt_sint32 = ProtoAdapter.SINT32.decode(reader)
            4 -> opt_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            5 -> opt_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            6 -> opt_int64 = ProtoAdapter.INT64.decode(reader)
            7 -> opt_uint64 = ProtoAdapter.UINT64.decode(reader)
            8 -> opt_sint64 = ProtoAdapter.SINT64.decode(reader)
            9 -> opt_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            10 -> opt_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            11 -> opt_bool = ProtoAdapter.BOOL.decode(reader)
            12 -> opt_float = ProtoAdapter.FLOAT.decode(reader)
            13 -> opt_double = ProtoAdapter.DOUBLE.decode(reader)
            14 -> opt_string = ProtoAdapter.STRING.decode(reader)
            15 -> opt_bytes = ProtoAdapter.BYTES.decode(reader)
            16 -> opt_nested_enum = NestedEnum.ADAPTER.decode(reader)
            17 -> opt_nested_message = NestedMessage.ADAPTER.decode(reader)
            101 -> req_int32 = ProtoAdapter.INT32.decode(reader)
            102 -> req_uint32 = ProtoAdapter.UINT32.decode(reader)
            103 -> req_sint32 = ProtoAdapter.SINT32.decode(reader)
            104 -> req_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            105 -> req_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            106 -> req_int64 = ProtoAdapter.INT64.decode(reader)
            107 -> req_uint64 = ProtoAdapter.UINT64.decode(reader)
            108 -> req_sint64 = ProtoAdapter.SINT64.decode(reader)
            109 -> req_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            110 -> req_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            111 -> req_bool = ProtoAdapter.BOOL.decode(reader)
            112 -> req_float = ProtoAdapter.FLOAT.decode(reader)
            113 -> req_double = ProtoAdapter.DOUBLE.decode(reader)
            114 -> req_string = ProtoAdapter.STRING.decode(reader)
            115 -> req_bytes = ProtoAdapter.BYTES.decode(reader)
            116 -> req_nested_enum = NestedEnum.ADAPTER.decode(reader)
            117 -> req_nested_message = NestedMessage.ADAPTER.decode(reader)
            201 -> rep_int32.add(ProtoAdapter.INT32.decode(reader))
            202 -> rep_uint32.add(ProtoAdapter.UINT32.decode(reader))
            203 -> rep_sint32.add(ProtoAdapter.SINT32.decode(reader))
            204 -> rep_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            205 -> rep_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            206 -> rep_int64.add(ProtoAdapter.INT64.decode(reader))
            207 -> rep_uint64.add(ProtoAdapter.UINT64.decode(reader))
            208 -> rep_sint64.add(ProtoAdapter.SINT64.decode(reader))
            209 -> rep_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            210 -> rep_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            211 -> rep_bool.add(ProtoAdapter.BOOL.decode(reader))
            212 -> rep_float.add(ProtoAdapter.FLOAT.decode(reader))
            213 -> rep_double.add(ProtoAdapter.DOUBLE.decode(reader))
            214 -> rep_string.add(ProtoAdapter.STRING.decode(reader))
            215 -> rep_bytes.add(ProtoAdapter.BYTES.decode(reader))
            216 -> rep_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            217 -> rep_nested_message.add(NestedMessage.ADAPTER.decode(reader))
            301 -> pack_int32.add(ProtoAdapter.INT32.decode(reader))
            302 -> pack_uint32.add(ProtoAdapter.UINT32.decode(reader))
            303 -> pack_sint32.add(ProtoAdapter.SINT32.decode(reader))
            304 -> pack_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            305 -> pack_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            306 -> pack_int64.add(ProtoAdapter.INT64.decode(reader))
            307 -> pack_uint64.add(ProtoAdapter.UINT64.decode(reader))
            308 -> pack_sint64.add(ProtoAdapter.SINT64.decode(reader))
            309 -> pack_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            310 -> pack_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            311 -> pack_bool.add(ProtoAdapter.BOOL.decode(reader))
            312 -> pack_float.add(ProtoAdapter.FLOAT.decode(reader))
            313 -> pack_double.add(ProtoAdapter.DOUBLE.decode(reader))
            316 -> pack_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            401 -> default_int32 = ProtoAdapter.INT32.decode(reader)
            402 -> default_uint32 = ProtoAdapter.UINT32.decode(reader)
            403 -> default_sint32 = ProtoAdapter.SINT32.decode(reader)
            404 -> default_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            405 -> default_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            406 -> default_int64 = ProtoAdapter.INT64.decode(reader)
            407 -> default_uint64 = ProtoAdapter.UINT64.decode(reader)
            408 -> default_sint64 = ProtoAdapter.SINT64.decode(reader)
            409 -> default_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            410 -> default_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            411 -> default_bool = ProtoAdapter.BOOL.decode(reader)
            412 -> default_float = ProtoAdapter.FLOAT.decode(reader)
            413 -> default_double = ProtoAdapter.DOUBLE.decode(reader)
            414 -> default_string = ProtoAdapter.STRING.decode(reader)
            415 -> default_bytes = ProtoAdapter.BYTES.decode(reader)
            416 -> default_nested_enum = NestedEnum.ADAPTER.decode(reader)
            501 -> map_int32_int32.putAll(map_int32_int32Adapter.decode(reader))
            502 -> map_string_string.putAll(map_string_stringAdapter.decode(reader))
            503 -> map_string_message.putAll(map_string_messageAdapter.decode(reader))
            504 -> map_string_enum.putAll(map_string_enumAdapter.decode(reader))
            1001 -> ext_opt_int32 = ProtoAdapter.INT32.decode(reader)
            1002 -> ext_opt_uint32 = ProtoAdapter.UINT32.decode(reader)
            1003 -> ext_opt_sint32 = ProtoAdapter.SINT32.decode(reader)
            1004 -> ext_opt_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            1005 -> ext_opt_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            1006 -> ext_opt_int64 = ProtoAdapter.INT64.decode(reader)
            1007 -> ext_opt_uint64 = ProtoAdapter.UINT64.decode(reader)
            1008 -> ext_opt_sint64 = ProtoAdapter.SINT64.decode(reader)
            1009 -> ext_opt_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            1010 -> ext_opt_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            1011 -> ext_opt_bool = ProtoAdapter.BOOL.decode(reader)
            1012 -> ext_opt_float = ProtoAdapter.FLOAT.decode(reader)
            1013 -> ext_opt_double = ProtoAdapter.DOUBLE.decode(reader)
            1014 -> ext_opt_string = ProtoAdapter.STRING.decode(reader)
            1015 -> ext_opt_bytes = ProtoAdapter.BYTES.decode(reader)
            1016 -> ext_opt_nested_enum = NestedEnum.ADAPTER.decode(reader)
            1017 -> ext_opt_nested_message = NestedMessage.ADAPTER.decode(reader)
            1101 -> ext_rep_int32.add(ProtoAdapter.INT32.decode(reader))
            1102 -> ext_rep_uint32.add(ProtoAdapter.UINT32.decode(reader))
            1103 -> ext_rep_sint32.add(ProtoAdapter.SINT32.decode(reader))
            1104 -> ext_rep_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            1105 -> ext_rep_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            1106 -> ext_rep_int64.add(ProtoAdapter.INT64.decode(reader))
            1107 -> ext_rep_uint64.add(ProtoAdapter.UINT64.decode(reader))
            1108 -> ext_rep_sint64.add(ProtoAdapter.SINT64.decode(reader))
            1109 -> ext_rep_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            1110 -> ext_rep_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            1111 -> ext_rep_bool.add(ProtoAdapter.BOOL.decode(reader))
            1112 -> ext_rep_float.add(ProtoAdapter.FLOAT.decode(reader))
            1113 -> ext_rep_double.add(ProtoAdapter.DOUBLE.decode(reader))
            1114 -> ext_rep_string.add(ProtoAdapter.STRING.decode(reader))
            1115 -> ext_rep_bytes.add(ProtoAdapter.BYTES.decode(reader))
            1116 -> ext_rep_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            1117 -> ext_rep_nested_message.add(NestedMessage.ADAPTER.decode(reader))
            1201 -> ext_pack_int32.add(ProtoAdapter.INT32.decode(reader))
            1202 -> ext_pack_uint32.add(ProtoAdapter.UINT32.decode(reader))
            1203 -> ext_pack_sint32.add(ProtoAdapter.SINT32.decode(reader))
            1204 -> ext_pack_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            1205 -> ext_pack_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            1206 -> ext_pack_int64.add(ProtoAdapter.INT64.decode(reader))
            1207 -> ext_pack_uint64.add(ProtoAdapter.UINT64.decode(reader))
            1208 -> ext_pack_sint64.add(ProtoAdapter.SINT64.decode(reader))
            1209 -> ext_pack_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            1210 -> ext_pack_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            1211 -> ext_pack_bool.add(ProtoAdapter.BOOL.decode(reader))
            1212 -> ext_pack_float.add(ProtoAdapter.FLOAT.decode(reader))
            1213 -> ext_pack_double.add(ProtoAdapter.DOUBLE.decode(reader))
            1216 -> ext_pack_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            1301 -> ext_map_int32_int32.putAll(ext_map_int32_int32Adapter.decode(reader))
            1402 -> ext_map_string_string.putAll(ext_map_string_stringAdapter.decode(reader))
            1503 -> ext_map_string_message.putAll(ext_map_string_messageAdapter.decode(reader))
            1504 -> ext_map_string_enum.putAll(ext_map_string_enumAdapter.decode(reader))
            else -> TagHandler.UNKNOWN_TAG
          }
        }
        return AllTypes(
          opt_int32 = opt_int32,
          opt_uint32 = opt_uint32,
          opt_sint32 = opt_sint32,
          opt_fixed32 = opt_fixed32,
          opt_sfixed32 = opt_sfixed32,
          opt_int64 = opt_int64,
          opt_uint64 = opt_uint64,
          opt_sint64 = opt_sint64,
          opt_fixed64 = opt_fixed64,
          opt_sfixed64 = opt_sfixed64,
          opt_bool = opt_bool,
          opt_float = opt_float,
          opt_double = opt_double,
          opt_string = opt_string,
          opt_bytes = opt_bytes,
          opt_nested_enum = opt_nested_enum,
          opt_nested_message = opt_nested_message,
          req_int32 = req_int32 ?: throw missingRequiredFields(req_int32, "req_int32"),
          req_uint32 = req_uint32 ?: throw missingRequiredFields(req_uint32, "req_uint32"),
          req_sint32 = req_sint32 ?: throw missingRequiredFields(req_sint32, "req_sint32"),
          req_fixed32 = req_fixed32 ?: throw missingRequiredFields(req_fixed32, "req_fixed32"),
          req_sfixed32 = req_sfixed32 ?: throw missingRequiredFields(req_sfixed32, "req_sfixed32"),
          req_int64 = req_int64 ?: throw missingRequiredFields(req_int64, "req_int64"),
          req_uint64 = req_uint64 ?: throw missingRequiredFields(req_uint64, "req_uint64"),
          req_sint64 = req_sint64 ?: throw missingRequiredFields(req_sint64, "req_sint64"),
          req_fixed64 = req_fixed64 ?: throw missingRequiredFields(req_fixed64, "req_fixed64"),
          req_sfixed64 = req_sfixed64 ?: throw missingRequiredFields(req_sfixed64, "req_sfixed64"),
          req_bool = req_bool ?: throw missingRequiredFields(req_bool, "req_bool"),
          req_float = req_float ?: throw missingRequiredFields(req_float, "req_float"),
          req_double = req_double ?: throw missingRequiredFields(req_double, "req_double"),
          req_string = req_string ?: throw missingRequiredFields(req_string, "req_string"),
          req_bytes = req_bytes ?: throw missingRequiredFields(req_bytes, "req_bytes"),
          req_nested_enum = req_nested_enum ?: throw missingRequiredFields(req_nested_enum,
              "req_nested_enum"),
          req_nested_message = req_nested_message ?: throw missingRequiredFields(req_nested_message,
              "req_nested_message"),
          rep_int32 = rep_int32,
          rep_uint32 = rep_uint32,
          rep_sint32 = rep_sint32,
          rep_fixed32 = rep_fixed32,
          rep_sfixed32 = rep_sfixed32,
          rep_int64 = rep_int64,
          rep_uint64 = rep_uint64,
          rep_sint64 = rep_sint64,
          rep_fixed64 = rep_fixed64,
          rep_sfixed64 = rep_sfixed64,
          rep_bool = rep_bool,
          rep_float = rep_float,
          rep_double = rep_double,
          rep_string = rep_string,
          rep_bytes = rep_bytes,
          rep_nested_enum = rep_nested_enum,
          rep_nested_message = rep_nested_message,
          pack_int32 = pack_int32,
          pack_uint32 = pack_uint32,
          pack_sint32 = pack_sint32,
          pack_fixed32 = pack_fixed32,
          pack_sfixed32 = pack_sfixed32,
          pack_int64 = pack_int64,
          pack_uint64 = pack_uint64,
          pack_sint64 = pack_sint64,
          pack_fixed64 = pack_fixed64,
          pack_sfixed64 = pack_sfixed64,
          pack_bool = pack_bool,
          pack_float = pack_float,
          pack_double = pack_double,
          pack_nested_enum = pack_nested_enum,
          default_int32 = default_int32,
          default_uint32 = default_uint32,
          default_sint32 = default_sint32,
          default_fixed32 = default_fixed32,
          default_sfixed32 = default_sfixed32,
          default_int64 = default_int64,
          default_uint64 = default_uint64,
          default_sint64 = default_sint64,
          default_fixed64 = default_fixed64,
          default_sfixed64 = default_sfixed64,
          default_bool = default_bool,
          default_float = default_float,
          default_double = default_double,
          default_string = default_string,
          default_bytes = default_bytes,
          default_nested_enum = default_nested_enum,
          map_int32_int32 = map_int32_int32,
          map_string_string = map_string_string,
          map_string_message = map_string_message,
          map_string_enum = map_string_enum,
          ext_opt_int32 = ext_opt_int32,
          ext_opt_uint32 = ext_opt_uint32,
          ext_opt_sint32 = ext_opt_sint32,
          ext_opt_fixed32 = ext_opt_fixed32,
          ext_opt_sfixed32 = ext_opt_sfixed32,
          ext_opt_int64 = ext_opt_int64,
          ext_opt_uint64 = ext_opt_uint64,
          ext_opt_sint64 = ext_opt_sint64,
          ext_opt_fixed64 = ext_opt_fixed64,
          ext_opt_sfixed64 = ext_opt_sfixed64,
          ext_opt_bool = ext_opt_bool,
          ext_opt_float = ext_opt_float,
          ext_opt_double = ext_opt_double,
          ext_opt_string = ext_opt_string,
          ext_opt_bytes = ext_opt_bytes,
          ext_opt_nested_enum = ext_opt_nested_enum,
          ext_opt_nested_message = ext_opt_nested_message,
          ext_rep_int32 = ext_rep_int32,
          ext_rep_uint32 = ext_rep_uint32,
          ext_rep_sint32 = ext_rep_sint32,
          ext_rep_fixed32 = ext_rep_fixed32,
          ext_rep_sfixed32 = ext_rep_sfixed32,
          ext_rep_int64 = ext_rep_int64,
          ext_rep_uint64 = ext_rep_uint64,
          ext_rep_sint64 = ext_rep_sint64,
          ext_rep_fixed64 = ext_rep_fixed64,
          ext_rep_sfixed64 = ext_rep_sfixed64,
          ext_rep_bool = ext_rep_bool,
          ext_rep_float = ext_rep_float,
          ext_rep_double = ext_rep_double,
          ext_rep_string = ext_rep_string,
          ext_rep_bytes = ext_rep_bytes,
          ext_rep_nested_enum = ext_rep_nested_enum,
          ext_rep_nested_message = ext_rep_nested_message,
          ext_pack_int32 = ext_pack_int32,
          ext_pack_uint32 = ext_pack_uint32,
          ext_pack_sint32 = ext_pack_sint32,
          ext_pack_fixed32 = ext_pack_fixed32,
          ext_pack_sfixed32 = ext_pack_sfixed32,
          ext_pack_int64 = ext_pack_int64,
          ext_pack_uint64 = ext_pack_uint64,
          ext_pack_sint64 = ext_pack_sint64,
          ext_pack_fixed64 = ext_pack_fixed64,
          ext_pack_sfixed64 = ext_pack_sfixed64,
          ext_pack_bool = ext_pack_bool,
          ext_pack_float = ext_pack_float,
          ext_pack_double = ext_pack_double,
          ext_pack_nested_enum = ext_pack_nested_enum,
          ext_map_int32_int32 = ext_map_int32_int32,
          ext_map_string_string = ext_map_string_string,
          ext_map_string_message = ext_map_string_message,
          ext_map_string_enum = ext_map_string_enum,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: AllTypes): AllTypes = value.copy(
        opt_nested_message = value.opt_nested_message?.let(NestedMessage.ADAPTER::redact),
        req_nested_message = NestedMessage.ADAPTER.redact(value.req_nested_message),
        rep_nested_message = value.rep_nested_message.redactElements(NestedMessage.ADAPTER),
        map_string_message = value.map_string_message.redactElements(NestedMessage.ADAPTER),
        ext_opt_nested_message = value.ext_opt_nested_message?.let(NestedMessage.ADAPTER::redact),
        ext_rep_nested_message = value.ext_rep_nested_message.redactElements(NestedMessage.ADAPTER),
        ext_map_string_message = value.ext_map_string_message.redactElements(NestedMessage.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }
  }

  enum class NestedEnum(
    override val value: Int
  ) : WireEnum {
    A(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NestedEnum> = object : EnumAdapter<NestedEnum>(
        NestedEnum::class
      ) {
        override fun fromValue(value: Int): NestedEnum = NestedEnum.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): NestedEnum = when (value) {
        1 -> A
        else -> throw IllegalArgumentException("""Unexpected value: $value""")
      }
    }
  }

  data class NestedMessage(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    val a: Int? = null,
    val unknownFields: ByteString = ByteString.EMPTY
  ) : Message<NestedMessage, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing {
      throw AssertionError()
    }

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NestedMessage> = object : ProtoAdapter<NestedMessage>(
        FieldEncoding.LENGTH_DELIMITED, 
        NestedMessage::class
      ) {
        override fun encodedSize(value: NestedMessage): Int = 
          ProtoAdapter.INT32.encodedSizeWithTag(1, value.a) +
          value.unknownFields.size

        override fun encode(writer: ProtoWriter, value: NestedMessage) {
          ProtoAdapter.INT32.encodeWithTag(writer, 1, value.a)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): NestedMessage {
          var a: Int? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> a = ProtoAdapter.INT32.decode(reader)
              else -> TagHandler.UNKNOWN_TAG
            }
          }
          return NestedMessage(
            a = a,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: NestedMessage): NestedMessage = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }
    }
  }
}
