// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: redacted_one_of.proto
package com.squareup.wire.protos.kotlin.redacted

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import java.lang.UnsupportedOperationException
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import okio.ByteString

data class RedactedOneOf(val a: A? = null, val unknownFields: ByteString = ByteString.EMPTY) :
    Message<RedactedOneOf, RedactedOneOf.Builder>(ADAPTER, unknownFields) {
  @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Builder = Builder(this.copy())

  override fun toString(): String = buildString {
    append("RedactedOneOf(")
    append("""a=██""")
    append(")")
  }

  class Builder(private val message: RedactedOneOf) : Message.Builder<RedactedOneOf, Builder>() {
    override fun build(): RedactedOneOf = message
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<RedactedOneOf> = object : ProtoAdapter<RedactedOneOf>(
      FieldEncoding.LENGTH_DELIMITED, 
      RedactedOneOf::class.java
    ) {
      override fun encodedSize(value: RedactedOneOf): Int = 
        when (value.a) {
          is A.B -> ProtoAdapter.INT32.encodedSizeWithTag(1, value.a.b)
          is A.C -> ProtoAdapter.STRING.encodedSizeWithTag(2, value.a.c)
          else -> 0
        } +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: RedactedOneOf) {
        when (value.a) {
          is A.B -> ProtoAdapter.INT32.encodeWithTag(writer, 1, value.a.b)
          is A.C -> ProtoAdapter.STRING.encodeWithTag(writer, 2, value.a.c)
        }
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): RedactedOneOf {
        var a: A? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> a = A.B(ProtoAdapter.INT32.decode(reader))
            2 -> a = A.C(ProtoAdapter.STRING.decode(reader))
            else -> TagHandler.UNKNOWN_TAG
          }
        }
        return RedactedOneOf(
          a = a,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: RedactedOneOf): RedactedOneOf {
        throw
            UnsupportedOperationException("Redacting messages with oneof fields is not supported yet!")
      }
    }
  }

  sealed class A {
    data class B(val b: Int) : A()

    data class C(val c: String) : A()
  }
}
