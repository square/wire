// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.whiteboard.Point in com/squareup/wire/whiteboard/whiteboard.proto
package com.squareup.wire.whiteboard

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.internal.missingRequiredFields
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.jvm.JvmField
import okio.ByteString

class Point(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED
  )
  val x: Int,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED
  )
  val y: Int,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED
  )
  val color: Int,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Point, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Point) return false
    if (unknownFields != other.unknownFields) return false
    if (x != other.x) return false
    if (y != other.y) return false
    if (color != other.color) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + x.hashCode()
      result = result * 37 + y.hashCode()
      result = result * 37 + color.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """x=$x"""
    result += """y=$y"""
    result += """color=$color"""
    return result.joinToString(prefix = "Point{", separator = ", ", postfix = "}")
  }

  fun copy(
    x: Int = this.x,
    y: Int = this.y,
    color: Int = this.color,
    unknownFields: ByteString = this.unknownFields
  ): Point = Point(x, y, color, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Point> = object : ProtoAdapter<Point>(
      FieldEncoding.LENGTH_DELIMITED, 
      Point::class, 
      "type.googleapis.com/com.squareup.wire.whiteboard.Point", 
      PROTO_2, 
      null
    ) {
      override fun encodedSize(value: Point): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.x)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.y)
        size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.color)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Point) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.x)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.y)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.color)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Point {
        var x: Int? = null
        var y: Int? = null
        var color: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> x = ProtoAdapter.INT32.decode(reader)
            2 -> y = ProtoAdapter.INT32.decode(reader)
            3 -> color = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Point(
          x = x ?: throw missingRequiredFields(x, "x"),
          y = y ?: throw missingRequiredFields(y, "y"),
          color = color ?: throw missingRequiredFields(color, "color"),
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Point): Point = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
