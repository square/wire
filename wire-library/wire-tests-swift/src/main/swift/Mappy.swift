// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.protos.kotlin.map.Mappy in map.proto
import Foundation
import Wire

public struct Mappy {

    public var things: [String : Thing]
    public var unknownFields: Data = .init()

    public init(things: [String : Thing] = [:]) {
        self.things = things
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Mappy : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Mappy : Hashable {
}
#endif

#if swift(>=5.5)
extension Mappy : Sendable {
}
#endif

extension Mappy : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/com.squareup.wire.protos.kotlin.map.Mappy"
    }
}

extension Mappy : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var things: [String : Thing] = [:]

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &things)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.things = things
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.things)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension Mappy : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.things = try container.decodeIfPresent(ProtoMap<String, Thing>.self, forKey: "things")?.wrappedValue ?? [:]
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.things.isEmpty {
            try container.encode(ProtoMap(wrappedValue: self.things), forKey: "things")
        }
    }
}
#endif
