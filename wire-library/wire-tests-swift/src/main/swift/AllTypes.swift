// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.alltypes.AllTypes in all_types.proto
import Foundation
import Wire

public struct AllTypes {

    @Heap
    private var storage: _AllTypes
    public var opt_int32: Int32? {
        get {
            storage.opt_int32
        }
        set {
            copyStorage()
            storage.opt_int32 = newValue
        }
    }
    public var opt_uint32: UInt32? {
        get {
            storage.opt_uint32
        }
        set {
            copyStorage()
            storage.opt_uint32 = newValue
        }
    }
    public var opt_sint32: Int32? {
        get {
            storage.opt_sint32
        }
        set {
            copyStorage()
            storage.opt_sint32 = newValue
        }
    }
    public var opt_fixed32: UInt32? {
        get {
            storage.opt_fixed32
        }
        set {
            copyStorage()
            storage.opt_fixed32 = newValue
        }
    }
    public var opt_sfixed32: Int32? {
        get {
            storage.opt_sfixed32
        }
        set {
            copyStorage()
            storage.opt_sfixed32 = newValue
        }
    }
    public var opt_int64: Int64? {
        get {
            storage.opt_int64
        }
        set {
            copyStorage()
            storage.opt_int64 = newValue
        }
    }
    public var opt_uint64: UInt64? {
        get {
            storage.opt_uint64
        }
        set {
            copyStorage()
            storage.opt_uint64 = newValue
        }
    }
    public var opt_sint64: Int64? {
        get {
            storage.opt_sint64
        }
        set {
            copyStorage()
            storage.opt_sint64 = newValue
        }
    }
    public var opt_fixed64: UInt64? {
        get {
            storage.opt_fixed64
        }
        set {
            copyStorage()
            storage.opt_fixed64 = newValue
        }
    }
    public var opt_sfixed64: Int64? {
        get {
            storage.opt_sfixed64
        }
        set {
            copyStorage()
            storage.opt_sfixed64 = newValue
        }
    }
    public var opt_bool: Bool? {
        get {
            storage.opt_bool
        }
        set {
            copyStorage()
            storage.opt_bool = newValue
        }
    }
    public var opt_float: Float? {
        get {
            storage.opt_float
        }
        set {
            copyStorage()
            storage.opt_float = newValue
        }
    }
    public var opt_double: Double? {
        get {
            storage.opt_double
        }
        set {
            copyStorage()
            storage.opt_double = newValue
        }
    }
    public var opt_string: String? {
        get {
            storage.opt_string
        }
        set {
            copyStorage()
            storage.opt_string = newValue
        }
    }
    public var opt_bytes: Data? {
        get {
            storage.opt_bytes
        }
        set {
            copyStorage()
            storage.opt_bytes = newValue
        }
    }
    public var opt_nested_enum: NestedEnum? {
        get {
            storage.opt_nested_enum
        }
        set {
            copyStorage()
            storage.opt_nested_enum = newValue
        }
    }
    public var opt_nested_message: NestedMessage? {
        get {
            storage.opt_nested_message
        }
        set {
            copyStorage()
            storage.opt_nested_message = newValue
        }
    }
    public var req_int32: Int32 {
        get {
            storage.req_int32
        }
        set {
            copyStorage()
            storage.req_int32 = newValue
        }
    }
    public var req_uint32: UInt32 {
        get {
            storage.req_uint32
        }
        set {
            copyStorage()
            storage.req_uint32 = newValue
        }
    }
    public var req_sint32: Int32 {
        get {
            storage.req_sint32
        }
        set {
            copyStorage()
            storage.req_sint32 = newValue
        }
    }
    public var req_fixed32: UInt32 {
        get {
            storage.req_fixed32
        }
        set {
            copyStorage()
            storage.req_fixed32 = newValue
        }
    }
    public var req_sfixed32: Int32 {
        get {
            storage.req_sfixed32
        }
        set {
            copyStorage()
            storage.req_sfixed32 = newValue
        }
    }
    public var req_int64: Int64 {
        get {
            storage.req_int64
        }
        set {
            copyStorage()
            storage.req_int64 = newValue
        }
    }
    public var req_uint64: UInt64 {
        get {
            storage.req_uint64
        }
        set {
            copyStorage()
            storage.req_uint64 = newValue
        }
    }
    public var req_sint64: Int64 {
        get {
            storage.req_sint64
        }
        set {
            copyStorage()
            storage.req_sint64 = newValue
        }
    }
    public var req_fixed64: UInt64 {
        get {
            storage.req_fixed64
        }
        set {
            copyStorage()
            storage.req_fixed64 = newValue
        }
    }
    public var req_sfixed64: Int64 {
        get {
            storage.req_sfixed64
        }
        set {
            copyStorage()
            storage.req_sfixed64 = newValue
        }
    }
    public var req_bool: Bool {
        get {
            storage.req_bool
        }
        set {
            copyStorage()
            storage.req_bool = newValue
        }
    }
    public var req_float: Float {
        get {
            storage.req_float
        }
        set {
            copyStorage()
            storage.req_float = newValue
        }
    }
    public var req_double: Double {
        get {
            storage.req_double
        }
        set {
            copyStorage()
            storage.req_double = newValue
        }
    }
    public var req_string: String {
        get {
            storage.req_string
        }
        set {
            copyStorage()
            storage.req_string = newValue
        }
    }
    public var req_bytes: Data {
        get {
            storage.req_bytes
        }
        set {
            copyStorage()
            storage.req_bytes = newValue
        }
    }
    public var req_nested_enum: NestedEnum {
        get {
            storage.req_nested_enum
        }
        set {
            copyStorage()
            storage.req_nested_enum = newValue
        }
    }
    public var req_nested_message: NestedMessage {
        get {
            storage.req_nested_message
        }
        set {
            copyStorage()
            storage.req_nested_message = newValue
        }
    }
    public var rep_int32: [Int32] {
        get {
            storage.rep_int32
        }
        set {
            copyStorage()
            storage.rep_int32 = newValue
        }
    }
    public var rep_uint32: [UInt32] {
        get {
            storage.rep_uint32
        }
        set {
            copyStorage()
            storage.rep_uint32 = newValue
        }
    }
    public var rep_sint32: [Int32] {
        get {
            storage.rep_sint32
        }
        set {
            copyStorage()
            storage.rep_sint32 = newValue
        }
    }
    public var rep_fixed32: [UInt32] {
        get {
            storage.rep_fixed32
        }
        set {
            copyStorage()
            storage.rep_fixed32 = newValue
        }
    }
    public var rep_sfixed32: [Int32] {
        get {
            storage.rep_sfixed32
        }
        set {
            copyStorage()
            storage.rep_sfixed32 = newValue
        }
    }
    public var rep_int64: [Int64] {
        get {
            storage.rep_int64
        }
        set {
            copyStorage()
            storage.rep_int64 = newValue
        }
    }
    public var rep_uint64: [UInt64] {
        get {
            storage.rep_uint64
        }
        set {
            copyStorage()
            storage.rep_uint64 = newValue
        }
    }
    public var rep_sint64: [Int64] {
        get {
            storage.rep_sint64
        }
        set {
            copyStorage()
            storage.rep_sint64 = newValue
        }
    }
    public var rep_fixed64: [UInt64] {
        get {
            storage.rep_fixed64
        }
        set {
            copyStorage()
            storage.rep_fixed64 = newValue
        }
    }
    public var rep_sfixed64: [Int64] {
        get {
            storage.rep_sfixed64
        }
        set {
            copyStorage()
            storage.rep_sfixed64 = newValue
        }
    }
    public var rep_bool: [Bool] {
        get {
            storage.rep_bool
        }
        set {
            copyStorage()
            storage.rep_bool = newValue
        }
    }
    public var rep_float: [Float] {
        get {
            storage.rep_float
        }
        set {
            copyStorage()
            storage.rep_float = newValue
        }
    }
    public var rep_double: [Double] {
        get {
            storage.rep_double
        }
        set {
            copyStorage()
            storage.rep_double = newValue
        }
    }
    public var rep_string: [String] {
        get {
            storage.rep_string
        }
        set {
            copyStorage()
            storage.rep_string = newValue
        }
    }
    public var rep_bytes: [Data] {
        get {
            storage.rep_bytes
        }
        set {
            copyStorage()
            storage.rep_bytes = newValue
        }
    }
    public var rep_nested_enum: [NestedEnum] {
        get {
            storage.rep_nested_enum
        }
        set {
            copyStorage()
            storage.rep_nested_enum = newValue
        }
    }
    public var rep_nested_message: [NestedMessage] {
        get {
            storage.rep_nested_message
        }
        set {
            copyStorage()
            storage.rep_nested_message = newValue
        }
    }
    public var pack_int32: [Int32] {
        get {
            storage.pack_int32
        }
        set {
            copyStorage()
            storage.pack_int32 = newValue
        }
    }
    public var pack_uint32: [UInt32] {
        get {
            storage.pack_uint32
        }
        set {
            copyStorage()
            storage.pack_uint32 = newValue
        }
    }
    public var pack_sint32: [Int32] {
        get {
            storage.pack_sint32
        }
        set {
            copyStorage()
            storage.pack_sint32 = newValue
        }
    }
    public var pack_fixed32: [UInt32] {
        get {
            storage.pack_fixed32
        }
        set {
            copyStorage()
            storage.pack_fixed32 = newValue
        }
    }
    public var pack_sfixed32: [Int32] {
        get {
            storage.pack_sfixed32
        }
        set {
            copyStorage()
            storage.pack_sfixed32 = newValue
        }
    }
    public var pack_int64: [Int64] {
        get {
            storage.pack_int64
        }
        set {
            copyStorage()
            storage.pack_int64 = newValue
        }
    }
    public var pack_uint64: [UInt64] {
        get {
            storage.pack_uint64
        }
        set {
            copyStorage()
            storage.pack_uint64 = newValue
        }
    }
    public var pack_sint64: [Int64] {
        get {
            storage.pack_sint64
        }
        set {
            copyStorage()
            storage.pack_sint64 = newValue
        }
    }
    public var pack_fixed64: [UInt64] {
        get {
            storage.pack_fixed64
        }
        set {
            copyStorage()
            storage.pack_fixed64 = newValue
        }
    }
    public var pack_sfixed64: [Int64] {
        get {
            storage.pack_sfixed64
        }
        set {
            copyStorage()
            storage.pack_sfixed64 = newValue
        }
    }
    public var pack_bool: [Bool] {
        get {
            storage.pack_bool
        }
        set {
            copyStorage()
            storage.pack_bool = newValue
        }
    }
    public var pack_float: [Float] {
        get {
            storage.pack_float
        }
        set {
            copyStorage()
            storage.pack_float = newValue
        }
    }
    public var pack_double: [Double] {
        get {
            storage.pack_double
        }
        set {
            copyStorage()
            storage.pack_double = newValue
        }
    }
    public var pack_nested_enum: [NestedEnum] {
        get {
            storage.pack_nested_enum
        }
        set {
            copyStorage()
            storage.pack_nested_enum = newValue
        }
    }
    public var default_int32: Int32? {
        get {
            storage.default_int32
        }
        set {
            copyStorage()
            storage.default_int32 = newValue
        }
    }
    public var default_uint32: UInt32? {
        get {
            storage.default_uint32
        }
        set {
            copyStorage()
            storage.default_uint32 = newValue
        }
    }
    public var default_sint32: Int32? {
        get {
            storage.default_sint32
        }
        set {
            copyStorage()
            storage.default_sint32 = newValue
        }
    }
    public var default_fixed32: UInt32? {
        get {
            storage.default_fixed32
        }
        set {
            copyStorage()
            storage.default_fixed32 = newValue
        }
    }
    public var default_sfixed32: Int32? {
        get {
            storage.default_sfixed32
        }
        set {
            copyStorage()
            storage.default_sfixed32 = newValue
        }
    }
    public var default_int64: Int64? {
        get {
            storage.default_int64
        }
        set {
            copyStorage()
            storage.default_int64 = newValue
        }
    }
    public var default_uint64: UInt64? {
        get {
            storage.default_uint64
        }
        set {
            copyStorage()
            storage.default_uint64 = newValue
        }
    }
    public var default_sint64: Int64? {
        get {
            storage.default_sint64
        }
        set {
            copyStorage()
            storage.default_sint64 = newValue
        }
    }
    public var default_fixed64: UInt64? {
        get {
            storage.default_fixed64
        }
        set {
            copyStorage()
            storage.default_fixed64 = newValue
        }
    }
    public var default_sfixed64: Int64? {
        get {
            storage.default_sfixed64
        }
        set {
            copyStorage()
            storage.default_sfixed64 = newValue
        }
    }
    public var default_bool: Bool? {
        get {
            storage.default_bool
        }
        set {
            copyStorage()
            storage.default_bool = newValue
        }
    }
    public var default_float: Float? {
        get {
            storage.default_float
        }
        set {
            copyStorage()
            storage.default_float = newValue
        }
    }
    public var default_double: Double? {
        get {
            storage.default_double
        }
        set {
            copyStorage()
            storage.default_double = newValue
        }
    }
    public var default_string: String? {
        get {
            storage.default_string
        }
        set {
            copyStorage()
            storage.default_string = newValue
        }
    }
    public var default_bytes: Data? {
        get {
            storage.default_bytes
        }
        set {
            copyStorage()
            storage.default_bytes = newValue
        }
    }
    public var default_nested_enum: NestedEnum? {
        get {
            storage.default_nested_enum
        }
        set {
            copyStorage()
            storage.default_nested_enum = newValue
        }
    }
    public var map_int32_int32: [Int32 : Int32] {
        get {
            storage.map_int32_int32
        }
        set {
            copyStorage()
            storage.map_int32_int32 = newValue
        }
    }
    public var map_string_string: [String : String] {
        get {
            storage.map_string_string
        }
        set {
            copyStorage()
            storage.map_string_string = newValue
        }
    }
    public var map_string_message: [String : NestedMessage] {
        get {
            storage.map_string_message
        }
        set {
            copyStorage()
            storage.map_string_message = newValue
        }
    }
    public var map_string_enum: [String : NestedEnum] {
        get {
            storage.map_string_enum
        }
        set {
            copyStorage()
            storage.map_string_enum = newValue
        }
    }
    public var ext_opt_int32: Int32? {
        get {
            storage.ext_opt_int32
        }
        set {
            copyStorage()
            storage.ext_opt_int32 = newValue
        }
    }
    public var ext_opt_uint32: UInt32? {
        get {
            storage.ext_opt_uint32
        }
        set {
            copyStorage()
            storage.ext_opt_uint32 = newValue
        }
    }
    public var ext_opt_sint32: Int32? {
        get {
            storage.ext_opt_sint32
        }
        set {
            copyStorage()
            storage.ext_opt_sint32 = newValue
        }
    }
    public var ext_opt_fixed32: UInt32? {
        get {
            storage.ext_opt_fixed32
        }
        set {
            copyStorage()
            storage.ext_opt_fixed32 = newValue
        }
    }
    public var ext_opt_sfixed32: Int32? {
        get {
            storage.ext_opt_sfixed32
        }
        set {
            copyStorage()
            storage.ext_opt_sfixed32 = newValue
        }
    }
    public var ext_opt_int64: Int64? {
        get {
            storage.ext_opt_int64
        }
        set {
            copyStorage()
            storage.ext_opt_int64 = newValue
        }
    }
    public var ext_opt_uint64: UInt64? {
        get {
            storage.ext_opt_uint64
        }
        set {
            copyStorage()
            storage.ext_opt_uint64 = newValue
        }
    }
    public var ext_opt_sint64: Int64? {
        get {
            storage.ext_opt_sint64
        }
        set {
            copyStorage()
            storage.ext_opt_sint64 = newValue
        }
    }
    public var ext_opt_fixed64: UInt64? {
        get {
            storage.ext_opt_fixed64
        }
        set {
            copyStorage()
            storage.ext_opt_fixed64 = newValue
        }
    }
    public var ext_opt_sfixed64: Int64? {
        get {
            storage.ext_opt_sfixed64
        }
        set {
            copyStorage()
            storage.ext_opt_sfixed64 = newValue
        }
    }
    public var ext_opt_bool: Bool? {
        get {
            storage.ext_opt_bool
        }
        set {
            copyStorage()
            storage.ext_opt_bool = newValue
        }
    }
    public var ext_opt_float: Float? {
        get {
            storage.ext_opt_float
        }
        set {
            copyStorage()
            storage.ext_opt_float = newValue
        }
    }
    public var ext_opt_double: Double? {
        get {
            storage.ext_opt_double
        }
        set {
            copyStorage()
            storage.ext_opt_double = newValue
        }
    }
    public var ext_opt_string: String? {
        get {
            storage.ext_opt_string
        }
        set {
            copyStorage()
            storage.ext_opt_string = newValue
        }
    }
    public var ext_opt_bytes: Data? {
        get {
            storage.ext_opt_bytes
        }
        set {
            copyStorage()
            storage.ext_opt_bytes = newValue
        }
    }
    public var ext_opt_nested_enum: NestedEnum? {
        get {
            storage.ext_opt_nested_enum
        }
        set {
            copyStorage()
            storage.ext_opt_nested_enum = newValue
        }
    }
    public var ext_opt_nested_message: NestedMessage? {
        get {
            storage.ext_opt_nested_message
        }
        set {
            copyStorage()
            storage.ext_opt_nested_message = newValue
        }
    }
    public var ext_rep_int32: [Int32] {
        get {
            storage.ext_rep_int32
        }
        set {
            copyStorage()
            storage.ext_rep_int32 = newValue
        }
    }
    public var ext_rep_uint32: [UInt32] {
        get {
            storage.ext_rep_uint32
        }
        set {
            copyStorage()
            storage.ext_rep_uint32 = newValue
        }
    }
    public var ext_rep_sint32: [Int32] {
        get {
            storage.ext_rep_sint32
        }
        set {
            copyStorage()
            storage.ext_rep_sint32 = newValue
        }
    }
    public var ext_rep_fixed32: [UInt32] {
        get {
            storage.ext_rep_fixed32
        }
        set {
            copyStorage()
            storage.ext_rep_fixed32 = newValue
        }
    }
    public var ext_rep_sfixed32: [Int32] {
        get {
            storage.ext_rep_sfixed32
        }
        set {
            copyStorage()
            storage.ext_rep_sfixed32 = newValue
        }
    }
    public var ext_rep_int64: [Int64] {
        get {
            storage.ext_rep_int64
        }
        set {
            copyStorage()
            storage.ext_rep_int64 = newValue
        }
    }
    public var ext_rep_uint64: [UInt64] {
        get {
            storage.ext_rep_uint64
        }
        set {
            copyStorage()
            storage.ext_rep_uint64 = newValue
        }
    }
    public var ext_rep_sint64: [Int64] {
        get {
            storage.ext_rep_sint64
        }
        set {
            copyStorage()
            storage.ext_rep_sint64 = newValue
        }
    }
    public var ext_rep_fixed64: [UInt64] {
        get {
            storage.ext_rep_fixed64
        }
        set {
            copyStorage()
            storage.ext_rep_fixed64 = newValue
        }
    }
    public var ext_rep_sfixed64: [Int64] {
        get {
            storage.ext_rep_sfixed64
        }
        set {
            copyStorage()
            storage.ext_rep_sfixed64 = newValue
        }
    }
    public var ext_rep_bool: [Bool] {
        get {
            storage.ext_rep_bool
        }
        set {
            copyStorage()
            storage.ext_rep_bool = newValue
        }
    }
    public var ext_rep_float: [Float] {
        get {
            storage.ext_rep_float
        }
        set {
            copyStorage()
            storage.ext_rep_float = newValue
        }
    }
    public var ext_rep_double: [Double] {
        get {
            storage.ext_rep_double
        }
        set {
            copyStorage()
            storage.ext_rep_double = newValue
        }
    }
    public var ext_rep_string: [String] {
        get {
            storage.ext_rep_string
        }
        set {
            copyStorage()
            storage.ext_rep_string = newValue
        }
    }
    public var ext_rep_bytes: [Data] {
        get {
            storage.ext_rep_bytes
        }
        set {
            copyStorage()
            storage.ext_rep_bytes = newValue
        }
    }
    public var ext_rep_nested_enum: [NestedEnum] {
        get {
            storage.ext_rep_nested_enum
        }
        set {
            copyStorage()
            storage.ext_rep_nested_enum = newValue
        }
    }
    public var ext_rep_nested_message: [NestedMessage] {
        get {
            storage.ext_rep_nested_message
        }
        set {
            copyStorage()
            storage.ext_rep_nested_message = newValue
        }
    }
    public var ext_pack_int32: [Int32] {
        get {
            storage.ext_pack_int32
        }
        set {
            copyStorage()
            storage.ext_pack_int32 = newValue
        }
    }
    public var ext_pack_uint32: [UInt32] {
        get {
            storage.ext_pack_uint32
        }
        set {
            copyStorage()
            storage.ext_pack_uint32 = newValue
        }
    }
    public var ext_pack_sint32: [Int32] {
        get {
            storage.ext_pack_sint32
        }
        set {
            copyStorage()
            storage.ext_pack_sint32 = newValue
        }
    }
    public var ext_pack_fixed32: [UInt32] {
        get {
            storage.ext_pack_fixed32
        }
        set {
            copyStorage()
            storage.ext_pack_fixed32 = newValue
        }
    }
    public var ext_pack_sfixed32: [Int32] {
        get {
            storage.ext_pack_sfixed32
        }
        set {
            copyStorage()
            storage.ext_pack_sfixed32 = newValue
        }
    }
    public var ext_pack_int64: [Int64] {
        get {
            storage.ext_pack_int64
        }
        set {
            copyStorage()
            storage.ext_pack_int64 = newValue
        }
    }
    public var ext_pack_uint64: [UInt64] {
        get {
            storage.ext_pack_uint64
        }
        set {
            copyStorage()
            storage.ext_pack_uint64 = newValue
        }
    }
    public var ext_pack_sint64: [Int64] {
        get {
            storage.ext_pack_sint64
        }
        set {
            copyStorage()
            storage.ext_pack_sint64 = newValue
        }
    }
    public var ext_pack_fixed64: [UInt64] {
        get {
            storage.ext_pack_fixed64
        }
        set {
            copyStorage()
            storage.ext_pack_fixed64 = newValue
        }
    }
    public var ext_pack_sfixed64: [Int64] {
        get {
            storage.ext_pack_sfixed64
        }
        set {
            copyStorage()
            storage.ext_pack_sfixed64 = newValue
        }
    }
    public var ext_pack_bool: [Bool] {
        get {
            storage.ext_pack_bool
        }
        set {
            copyStorage()
            storage.ext_pack_bool = newValue
        }
    }
    public var ext_pack_float: [Float] {
        get {
            storage.ext_pack_float
        }
        set {
            copyStorage()
            storage.ext_pack_float = newValue
        }
    }
    public var ext_pack_double: [Double] {
        get {
            storage.ext_pack_double
        }
        set {
            copyStorage()
            storage.ext_pack_double = newValue
        }
    }
    public var ext_pack_nested_enum: [NestedEnum] {
        get {
            storage.ext_pack_nested_enum
        }
        set {
            copyStorage()
            storage.ext_pack_nested_enum = newValue
        }
    }
    public var unknownFields: Data {
        get {
            storage.unknownFields
        }
        set {
            copyStorage()
            storage.unknownFields = newValue
        }
    }

    public init(
        opt_int32: Int32? = nil,
        opt_uint32: UInt32? = nil,
        opt_sint32: Int32? = nil,
        opt_fixed32: UInt32? = nil,
        opt_sfixed32: Int32? = nil,
        opt_int64: Int64? = nil,
        opt_uint64: UInt64? = nil,
        opt_sint64: Int64? = nil,
        opt_fixed64: UInt64? = nil,
        opt_sfixed64: Int64? = nil,
        opt_bool: Bool? = nil,
        opt_float: Float? = nil,
        opt_double: Double? = nil,
        opt_string: String? = nil,
        opt_bytes: Data? = nil,
        opt_nested_enum: NestedEnum? = nil,
        opt_nested_message: NestedMessage? = nil,
        req_int32: Int32,
        req_uint32: UInt32,
        req_sint32: Int32,
        req_fixed32: UInt32,
        req_sfixed32: Int32,
        req_int64: Int64,
        req_uint64: UInt64,
        req_sint64: Int64,
        req_fixed64: UInt64,
        req_sfixed64: Int64,
        req_bool: Bool,
        req_float: Float,
        req_double: Double,
        req_string: String,
        req_bytes: Data,
        req_nested_enum: NestedEnum,
        req_nested_message: NestedMessage,
        rep_int32: [Int32] = [],
        rep_uint32: [UInt32] = [],
        rep_sint32: [Int32] = [],
        rep_fixed32: [UInt32] = [],
        rep_sfixed32: [Int32] = [],
        rep_int64: [Int64] = [],
        rep_uint64: [UInt64] = [],
        rep_sint64: [Int64] = [],
        rep_fixed64: [UInt64] = [],
        rep_sfixed64: [Int64] = [],
        rep_bool: [Bool] = [],
        rep_float: [Float] = [],
        rep_double: [Double] = [],
        rep_string: [String] = [],
        rep_bytes: [Data] = [],
        rep_nested_enum: [NestedEnum] = [],
        rep_nested_message: [NestedMessage] = [],
        pack_int32: [Int32] = [],
        pack_uint32: [UInt32] = [],
        pack_sint32: [Int32] = [],
        pack_fixed32: [UInt32] = [],
        pack_sfixed32: [Int32] = [],
        pack_int64: [Int64] = [],
        pack_uint64: [UInt64] = [],
        pack_sint64: [Int64] = [],
        pack_fixed64: [UInt64] = [],
        pack_sfixed64: [Int64] = [],
        pack_bool: [Bool] = [],
        pack_float: [Float] = [],
        pack_double: [Double] = [],
        pack_nested_enum: [NestedEnum] = [],
        default_int32: Int32? = nil,
        default_uint32: UInt32? = nil,
        default_sint32: Int32? = nil,
        default_fixed32: UInt32? = nil,
        default_sfixed32: Int32? = nil,
        default_int64: Int64? = nil,
        default_uint64: UInt64? = nil,
        default_sint64: Int64? = nil,
        default_fixed64: UInt64? = nil,
        default_sfixed64: Int64? = nil,
        default_bool: Bool? = nil,
        default_float: Float? = nil,
        default_double: Double? = nil,
        default_string: String? = nil,
        default_bytes: Data? = nil,
        default_nested_enum: NestedEnum? = nil,
        map_int32_int32: [Int32 : Int32] = [:],
        map_string_string: [String : String] = [:],
        map_string_message: [String : NestedMessage] = [:],
        map_string_enum: [String : NestedEnum] = [:],
        ext_opt_int32: Int32? = nil,
        ext_opt_uint32: UInt32? = nil,
        ext_opt_sint32: Int32? = nil,
        ext_opt_fixed32: UInt32? = nil,
        ext_opt_sfixed32: Int32? = nil,
        ext_opt_int64: Int64? = nil,
        ext_opt_uint64: UInt64? = nil,
        ext_opt_sint64: Int64? = nil,
        ext_opt_fixed64: UInt64? = nil,
        ext_opt_sfixed64: Int64? = nil,
        ext_opt_bool: Bool? = nil,
        ext_opt_float: Float? = nil,
        ext_opt_double: Double? = nil,
        ext_opt_string: String? = nil,
        ext_opt_bytes: Data? = nil,
        ext_opt_nested_enum: NestedEnum? = nil,
        ext_opt_nested_message: NestedMessage? = nil,
        ext_rep_int32: [Int32] = [],
        ext_rep_uint32: [UInt32] = [],
        ext_rep_sint32: [Int32] = [],
        ext_rep_fixed32: [UInt32] = [],
        ext_rep_sfixed32: [Int32] = [],
        ext_rep_int64: [Int64] = [],
        ext_rep_uint64: [UInt64] = [],
        ext_rep_sint64: [Int64] = [],
        ext_rep_fixed64: [UInt64] = [],
        ext_rep_sfixed64: [Int64] = [],
        ext_rep_bool: [Bool] = [],
        ext_rep_float: [Float] = [],
        ext_rep_double: [Double] = [],
        ext_rep_string: [String] = [],
        ext_rep_bytes: [Data] = [],
        ext_rep_nested_enum: [NestedEnum] = [],
        ext_rep_nested_message: [NestedMessage] = [],
        ext_pack_int32: [Int32] = [],
        ext_pack_uint32: [UInt32] = [],
        ext_pack_sint32: [Int32] = [],
        ext_pack_fixed32: [UInt32] = [],
        ext_pack_sfixed32: [Int32] = [],
        ext_pack_int64: [Int64] = [],
        ext_pack_uint64: [UInt64] = [],
        ext_pack_sint64: [Int64] = [],
        ext_pack_fixed64: [UInt64] = [],
        ext_pack_sfixed64: [Int64] = [],
        ext_pack_bool: [Bool] = [],
        ext_pack_float: [Float] = [],
        ext_pack_double: [Double] = [],
        ext_pack_nested_enum: [NestedEnum] = []
    ) {
        self.storage = _AllTypes(opt_int32: opt_int32, opt_uint32: opt_uint32,
                opt_sint32: opt_sint32, opt_fixed32: opt_fixed32, opt_sfixed32: opt_sfixed32,
                opt_int64: opt_int64, opt_uint64: opt_uint64, opt_sint64: opt_sint64,
                opt_fixed64: opt_fixed64, opt_sfixed64: opt_sfixed64, opt_bool: opt_bool,
                opt_float: opt_float, opt_double: opt_double, opt_string: opt_string,
                opt_bytes: opt_bytes, opt_nested_enum: opt_nested_enum,
                opt_nested_message: opt_nested_message, req_int32: req_int32,
                req_uint32: req_uint32, req_sint32: req_sint32, req_fixed32: req_fixed32,
                req_sfixed32: req_sfixed32, req_int64: req_int64, req_uint64: req_uint64,
                req_sint64: req_sint64, req_fixed64: req_fixed64, req_sfixed64: req_sfixed64,
                req_bool: req_bool, req_float: req_float, req_double: req_double,
                req_string: req_string, req_bytes: req_bytes, req_nested_enum: req_nested_enum,
                req_nested_message: req_nested_message, rep_int32: rep_int32,
                rep_uint32: rep_uint32, rep_sint32: rep_sint32, rep_fixed32: rep_fixed32,
                rep_sfixed32: rep_sfixed32, rep_int64: rep_int64, rep_uint64: rep_uint64,
                rep_sint64: rep_sint64, rep_fixed64: rep_fixed64, rep_sfixed64: rep_sfixed64,
                rep_bool: rep_bool, rep_float: rep_float, rep_double: rep_double,
                rep_string: rep_string, rep_bytes: rep_bytes, rep_nested_enum: rep_nested_enum,
                rep_nested_message: rep_nested_message, pack_int32: pack_int32,
                pack_uint32: pack_uint32, pack_sint32: pack_sint32, pack_fixed32: pack_fixed32,
                pack_sfixed32: pack_sfixed32, pack_int64: pack_int64, pack_uint64: pack_uint64,
                pack_sint64: pack_sint64, pack_fixed64: pack_fixed64, pack_sfixed64: pack_sfixed64,
                pack_bool: pack_bool, pack_float: pack_float, pack_double: pack_double,
                pack_nested_enum: pack_nested_enum, default_int32: default_int32,
                default_uint32: default_uint32, default_sint32: default_sint32,
                default_fixed32: default_fixed32, default_sfixed32: default_sfixed32,
                default_int64: default_int64, default_uint64: default_uint64,
                default_sint64: default_sint64, default_fixed64: default_fixed64,
                default_sfixed64: default_sfixed64, default_bool: default_bool,
                default_float: default_float, default_double: default_double,
                default_string: default_string, default_bytes: default_bytes,
                default_nested_enum: default_nested_enum, map_int32_int32: map_int32_int32,
                map_string_string: map_string_string, map_string_message: map_string_message,
                map_string_enum: map_string_enum, ext_opt_int32: ext_opt_int32,
                ext_opt_uint32: ext_opt_uint32, ext_opt_sint32: ext_opt_sint32,
                ext_opt_fixed32: ext_opt_fixed32, ext_opt_sfixed32: ext_opt_sfixed32,
                ext_opt_int64: ext_opt_int64, ext_opt_uint64: ext_opt_uint64,
                ext_opt_sint64: ext_opt_sint64, ext_opt_fixed64: ext_opt_fixed64,
                ext_opt_sfixed64: ext_opt_sfixed64, ext_opt_bool: ext_opt_bool,
                ext_opt_float: ext_opt_float, ext_opt_double: ext_opt_double,
                ext_opt_string: ext_opt_string, ext_opt_bytes: ext_opt_bytes,
                ext_opt_nested_enum: ext_opt_nested_enum,
                ext_opt_nested_message: ext_opt_nested_message, ext_rep_int32: ext_rep_int32,
                ext_rep_uint32: ext_rep_uint32, ext_rep_sint32: ext_rep_sint32,
                ext_rep_fixed32: ext_rep_fixed32, ext_rep_sfixed32: ext_rep_sfixed32,
                ext_rep_int64: ext_rep_int64, ext_rep_uint64: ext_rep_uint64,
                ext_rep_sint64: ext_rep_sint64, ext_rep_fixed64: ext_rep_fixed64,
                ext_rep_sfixed64: ext_rep_sfixed64, ext_rep_bool: ext_rep_bool,
                ext_rep_float: ext_rep_float, ext_rep_double: ext_rep_double,
                ext_rep_string: ext_rep_string, ext_rep_bytes: ext_rep_bytes,
                ext_rep_nested_enum: ext_rep_nested_enum,
                ext_rep_nested_message: ext_rep_nested_message, ext_pack_int32: ext_pack_int32,
                ext_pack_uint32: ext_pack_uint32, ext_pack_sint32: ext_pack_sint32,
                ext_pack_fixed32: ext_pack_fixed32, ext_pack_sfixed32: ext_pack_sfixed32,
                ext_pack_int64: ext_pack_int64, ext_pack_uint64: ext_pack_uint64,
                ext_pack_sint64: ext_pack_sint64, ext_pack_fixed64: ext_pack_fixed64,
                ext_pack_sfixed64: ext_pack_sfixed64, ext_pack_bool: ext_pack_bool,
                ext_pack_float: ext_pack_float, ext_pack_double: ext_pack_double,
                ext_pack_nested_enum: ext_pack_nested_enum)
    }

    private mutating func copyStorage() {
        if !isKnownUniquelyReferenced(&_storage) {
            self.storage = storage
        }
    }

    public enum NestedEnum : UInt32, CaseIterable, ProtoEnum {

        case UNKNOWN = 0
        case A = 1

        public var description: String {
            switch self {
            case .UNKNOWN: return "UNKNOWN"
            case .A: return "A"
            }
        }

    }

    public struct NestedMessage {

        public var a: Int32?
        public var unknownFields: Data = .init()

        public init(a: Int32? = nil) {
            self.a = a
        }

    }

}

fileprivate struct _AllTypes {

    public var opt_int32: Int32?
    public var opt_uint32: UInt32?
    public var opt_sint32: Int32?
    public var opt_fixed32: UInt32?
    public var opt_sfixed32: Int32?
    public var opt_int64: Int64?
    public var opt_uint64: UInt64?
    public var opt_sint64: Int64?
    public var opt_fixed64: UInt64?
    public var opt_sfixed64: Int64?
    public var opt_bool: Bool?
    public var opt_float: Float?
    public var opt_double: Double?
    public var opt_string: String?
    public var opt_bytes: Data?
    public var opt_nested_enum: AllTypes.NestedEnum?
    public var opt_nested_message: AllTypes.NestedMessage?
    public var req_int32: Int32
    public var req_uint32: UInt32
    public var req_sint32: Int32
    public var req_fixed32: UInt32
    public var req_sfixed32: Int32
    public var req_int64: Int64
    public var req_uint64: UInt64
    public var req_sint64: Int64
    public var req_fixed64: UInt64
    public var req_sfixed64: Int64
    public var req_bool: Bool
    public var req_float: Float
    public var req_double: Double
    public var req_string: String
    public var req_bytes: Data
    public var req_nested_enum: AllTypes.NestedEnum
    public var req_nested_message: AllTypes.NestedMessage
    public var rep_int32: [Int32]
    public var rep_uint32: [UInt32]
    public var rep_sint32: [Int32]
    public var rep_fixed32: [UInt32]
    public var rep_sfixed32: [Int32]
    public var rep_int64: [Int64]
    public var rep_uint64: [UInt64]
    public var rep_sint64: [Int64]
    public var rep_fixed64: [UInt64]
    public var rep_sfixed64: [Int64]
    public var rep_bool: [Bool]
    public var rep_float: [Float]
    public var rep_double: [Double]
    public var rep_string: [String]
    public var rep_bytes: [Data]
    public var rep_nested_enum: [AllTypes.NestedEnum]
    public var rep_nested_message: [AllTypes.NestedMessage]
    public var pack_int32: [Int32]
    public var pack_uint32: [UInt32]
    public var pack_sint32: [Int32]
    public var pack_fixed32: [UInt32]
    public var pack_sfixed32: [Int32]
    public var pack_int64: [Int64]
    public var pack_uint64: [UInt64]
    public var pack_sint64: [Int64]
    public var pack_fixed64: [UInt64]
    public var pack_sfixed64: [Int64]
    public var pack_bool: [Bool]
    public var pack_float: [Float]
    public var pack_double: [Double]
    public var pack_nested_enum: [AllTypes.NestedEnum]
    public var default_int32: Int32?
    public var default_uint32: UInt32?
    public var default_sint32: Int32?
    public var default_fixed32: UInt32?
    public var default_sfixed32: Int32?
    public var default_int64: Int64?
    public var default_uint64: UInt64?
    public var default_sint64: Int64?
    public var default_fixed64: UInt64?
    public var default_sfixed64: Int64?
    public var default_bool: Bool?
    public var default_float: Float?
    public var default_double: Double?
    public var default_string: String?
    public var default_bytes: Data?
    public var default_nested_enum: AllTypes.NestedEnum?
    public var map_int32_int32: [Int32 : Int32]
    public var map_string_string: [String : String]
    public var map_string_message: [String : AllTypes.NestedMessage]
    public var map_string_enum: [String : AllTypes.NestedEnum]
    public var ext_opt_int32: Int32?
    public var ext_opt_uint32: UInt32?
    public var ext_opt_sint32: Int32?
    public var ext_opt_fixed32: UInt32?
    public var ext_opt_sfixed32: Int32?
    public var ext_opt_int64: Int64?
    public var ext_opt_uint64: UInt64?
    public var ext_opt_sint64: Int64?
    public var ext_opt_fixed64: UInt64?
    public var ext_opt_sfixed64: Int64?
    public var ext_opt_bool: Bool?
    public var ext_opt_float: Float?
    public var ext_opt_double: Double?
    public var ext_opt_string: String?
    public var ext_opt_bytes: Data?
    public var ext_opt_nested_enum: AllTypes.NestedEnum?
    public var ext_opt_nested_message: AllTypes.NestedMessage?
    public var ext_rep_int32: [Int32]
    public var ext_rep_uint32: [UInt32]
    public var ext_rep_sint32: [Int32]
    public var ext_rep_fixed32: [UInt32]
    public var ext_rep_sfixed32: [Int32]
    public var ext_rep_int64: [Int64]
    public var ext_rep_uint64: [UInt64]
    public var ext_rep_sint64: [Int64]
    public var ext_rep_fixed64: [UInt64]
    public var ext_rep_sfixed64: [Int64]
    public var ext_rep_bool: [Bool]
    public var ext_rep_float: [Float]
    public var ext_rep_double: [Double]
    public var ext_rep_string: [String]
    public var ext_rep_bytes: [Data]
    public var ext_rep_nested_enum: [AllTypes.NestedEnum]
    public var ext_rep_nested_message: [AllTypes.NestedMessage]
    public var ext_pack_int32: [Int32]
    public var ext_pack_uint32: [UInt32]
    public var ext_pack_sint32: [Int32]
    public var ext_pack_fixed32: [UInt32]
    public var ext_pack_sfixed32: [Int32]
    public var ext_pack_int64: [Int64]
    public var ext_pack_uint64: [UInt64]
    public var ext_pack_sint64: [Int64]
    public var ext_pack_fixed64: [UInt64]
    public var ext_pack_sfixed64: [Int64]
    public var ext_pack_bool: [Bool]
    public var ext_pack_float: [Float]
    public var ext_pack_double: [Double]
    public var ext_pack_nested_enum: [AllTypes.NestedEnum]
    public var unknownFields: Data = .init()

    public init(
        opt_int32: Int32?,
        opt_uint32: UInt32?,
        opt_sint32: Int32?,
        opt_fixed32: UInt32?,
        opt_sfixed32: Int32?,
        opt_int64: Int64?,
        opt_uint64: UInt64?,
        opt_sint64: Int64?,
        opt_fixed64: UInt64?,
        opt_sfixed64: Int64?,
        opt_bool: Bool?,
        opt_float: Float?,
        opt_double: Double?,
        opt_string: String?,
        opt_bytes: Data?,
        opt_nested_enum: AllTypes.NestedEnum?,
        opt_nested_message: AllTypes.NestedMessage?,
        req_int32: Int32,
        req_uint32: UInt32,
        req_sint32: Int32,
        req_fixed32: UInt32,
        req_sfixed32: Int32,
        req_int64: Int64,
        req_uint64: UInt64,
        req_sint64: Int64,
        req_fixed64: UInt64,
        req_sfixed64: Int64,
        req_bool: Bool,
        req_float: Float,
        req_double: Double,
        req_string: String,
        req_bytes: Data,
        req_nested_enum: AllTypes.NestedEnum,
        req_nested_message: AllTypes.NestedMessage,
        rep_int32: [Int32],
        rep_uint32: [UInt32],
        rep_sint32: [Int32],
        rep_fixed32: [UInt32],
        rep_sfixed32: [Int32],
        rep_int64: [Int64],
        rep_uint64: [UInt64],
        rep_sint64: [Int64],
        rep_fixed64: [UInt64],
        rep_sfixed64: [Int64],
        rep_bool: [Bool],
        rep_float: [Float],
        rep_double: [Double],
        rep_string: [String],
        rep_bytes: [Data],
        rep_nested_enum: [AllTypes.NestedEnum],
        rep_nested_message: [AllTypes.NestedMessage],
        pack_int32: [Int32],
        pack_uint32: [UInt32],
        pack_sint32: [Int32],
        pack_fixed32: [UInt32],
        pack_sfixed32: [Int32],
        pack_int64: [Int64],
        pack_uint64: [UInt64],
        pack_sint64: [Int64],
        pack_fixed64: [UInt64],
        pack_sfixed64: [Int64],
        pack_bool: [Bool],
        pack_float: [Float],
        pack_double: [Double],
        pack_nested_enum: [AllTypes.NestedEnum],
        default_int32: Int32?,
        default_uint32: UInt32?,
        default_sint32: Int32?,
        default_fixed32: UInt32?,
        default_sfixed32: Int32?,
        default_int64: Int64?,
        default_uint64: UInt64?,
        default_sint64: Int64?,
        default_fixed64: UInt64?,
        default_sfixed64: Int64?,
        default_bool: Bool?,
        default_float: Float?,
        default_double: Double?,
        default_string: String?,
        default_bytes: Data?,
        default_nested_enum: AllTypes.NestedEnum?,
        map_int32_int32: [Int32 : Int32],
        map_string_string: [String : String],
        map_string_message: [String : AllTypes.NestedMessage],
        map_string_enum: [String : AllTypes.NestedEnum],
        ext_opt_int32: Int32?,
        ext_opt_uint32: UInt32?,
        ext_opt_sint32: Int32?,
        ext_opt_fixed32: UInt32?,
        ext_opt_sfixed32: Int32?,
        ext_opt_int64: Int64?,
        ext_opt_uint64: UInt64?,
        ext_opt_sint64: Int64?,
        ext_opt_fixed64: UInt64?,
        ext_opt_sfixed64: Int64?,
        ext_opt_bool: Bool?,
        ext_opt_float: Float?,
        ext_opt_double: Double?,
        ext_opt_string: String?,
        ext_opt_bytes: Data?,
        ext_opt_nested_enum: AllTypes.NestedEnum?,
        ext_opt_nested_message: AllTypes.NestedMessage?,
        ext_rep_int32: [Int32],
        ext_rep_uint32: [UInt32],
        ext_rep_sint32: [Int32],
        ext_rep_fixed32: [UInt32],
        ext_rep_sfixed32: [Int32],
        ext_rep_int64: [Int64],
        ext_rep_uint64: [UInt64],
        ext_rep_sint64: [Int64],
        ext_rep_fixed64: [UInt64],
        ext_rep_sfixed64: [Int64],
        ext_rep_bool: [Bool],
        ext_rep_float: [Float],
        ext_rep_double: [Double],
        ext_rep_string: [String],
        ext_rep_bytes: [Data],
        ext_rep_nested_enum: [AllTypes.NestedEnum],
        ext_rep_nested_message: [AllTypes.NestedMessage],
        ext_pack_int32: [Int32],
        ext_pack_uint32: [UInt32],
        ext_pack_sint32: [Int32],
        ext_pack_fixed32: [UInt32],
        ext_pack_sfixed32: [Int32],
        ext_pack_int64: [Int64],
        ext_pack_uint64: [UInt64],
        ext_pack_sint64: [Int64],
        ext_pack_fixed64: [UInt64],
        ext_pack_sfixed64: [Int64],
        ext_pack_bool: [Bool],
        ext_pack_float: [Float],
        ext_pack_double: [Double],
        ext_pack_nested_enum: [AllTypes.NestedEnum]
    ) {
        self.opt_int32 = opt_int32
        self.opt_uint32 = opt_uint32
        self.opt_sint32 = opt_sint32
        self.opt_fixed32 = opt_fixed32
        self.opt_sfixed32 = opt_sfixed32
        self.opt_int64 = opt_int64
        self.opt_uint64 = opt_uint64
        self.opt_sint64 = opt_sint64
        self.opt_fixed64 = opt_fixed64
        self.opt_sfixed64 = opt_sfixed64
        self.opt_bool = opt_bool
        self.opt_float = opt_float
        self.opt_double = opt_double
        self.opt_string = opt_string
        self.opt_bytes = opt_bytes
        self.opt_nested_enum = opt_nested_enum
        self.opt_nested_message = opt_nested_message
        self.req_int32 = req_int32
        self.req_uint32 = req_uint32
        self.req_sint32 = req_sint32
        self.req_fixed32 = req_fixed32
        self.req_sfixed32 = req_sfixed32
        self.req_int64 = req_int64
        self.req_uint64 = req_uint64
        self.req_sint64 = req_sint64
        self.req_fixed64 = req_fixed64
        self.req_sfixed64 = req_sfixed64
        self.req_bool = req_bool
        self.req_float = req_float
        self.req_double = req_double
        self.req_string = req_string
        self.req_bytes = req_bytes
        self.req_nested_enum = req_nested_enum
        self.req_nested_message = req_nested_message
        self.rep_int32 = rep_int32
        self.rep_uint32 = rep_uint32
        self.rep_sint32 = rep_sint32
        self.rep_fixed32 = rep_fixed32
        self.rep_sfixed32 = rep_sfixed32
        self.rep_int64 = rep_int64
        self.rep_uint64 = rep_uint64
        self.rep_sint64 = rep_sint64
        self.rep_fixed64 = rep_fixed64
        self.rep_sfixed64 = rep_sfixed64
        self.rep_bool = rep_bool
        self.rep_float = rep_float
        self.rep_double = rep_double
        self.rep_string = rep_string
        self.rep_bytes = rep_bytes
        self.rep_nested_enum = rep_nested_enum
        self.rep_nested_message = rep_nested_message
        self.pack_int32 = pack_int32
        self.pack_uint32 = pack_uint32
        self.pack_sint32 = pack_sint32
        self.pack_fixed32 = pack_fixed32
        self.pack_sfixed32 = pack_sfixed32
        self.pack_int64 = pack_int64
        self.pack_uint64 = pack_uint64
        self.pack_sint64 = pack_sint64
        self.pack_fixed64 = pack_fixed64
        self.pack_sfixed64 = pack_sfixed64
        self.pack_bool = pack_bool
        self.pack_float = pack_float
        self.pack_double = pack_double
        self.pack_nested_enum = pack_nested_enum
        self.default_int32 = default_int32
        self.default_uint32 = default_uint32
        self.default_sint32 = default_sint32
        self.default_fixed32 = default_fixed32
        self.default_sfixed32 = default_sfixed32
        self.default_int64 = default_int64
        self.default_uint64 = default_uint64
        self.default_sint64 = default_sint64
        self.default_fixed64 = default_fixed64
        self.default_sfixed64 = default_sfixed64
        self.default_bool = default_bool
        self.default_float = default_float
        self.default_double = default_double
        self.default_string = default_string
        self.default_bytes = default_bytes
        self.default_nested_enum = default_nested_enum
        self.map_int32_int32 = map_int32_int32
        self.map_string_string = map_string_string
        self.map_string_message = map_string_message
        self.map_string_enum = map_string_enum
        self.ext_opt_int32 = ext_opt_int32
        self.ext_opt_uint32 = ext_opt_uint32
        self.ext_opt_sint32 = ext_opt_sint32
        self.ext_opt_fixed32 = ext_opt_fixed32
        self.ext_opt_sfixed32 = ext_opt_sfixed32
        self.ext_opt_int64 = ext_opt_int64
        self.ext_opt_uint64 = ext_opt_uint64
        self.ext_opt_sint64 = ext_opt_sint64
        self.ext_opt_fixed64 = ext_opt_fixed64
        self.ext_opt_sfixed64 = ext_opt_sfixed64
        self.ext_opt_bool = ext_opt_bool
        self.ext_opt_float = ext_opt_float
        self.ext_opt_double = ext_opt_double
        self.ext_opt_string = ext_opt_string
        self.ext_opt_bytes = ext_opt_bytes
        self.ext_opt_nested_enum = ext_opt_nested_enum
        self.ext_opt_nested_message = ext_opt_nested_message
        self.ext_rep_int32 = ext_rep_int32
        self.ext_rep_uint32 = ext_rep_uint32
        self.ext_rep_sint32 = ext_rep_sint32
        self.ext_rep_fixed32 = ext_rep_fixed32
        self.ext_rep_sfixed32 = ext_rep_sfixed32
        self.ext_rep_int64 = ext_rep_int64
        self.ext_rep_uint64 = ext_rep_uint64
        self.ext_rep_sint64 = ext_rep_sint64
        self.ext_rep_fixed64 = ext_rep_fixed64
        self.ext_rep_sfixed64 = ext_rep_sfixed64
        self.ext_rep_bool = ext_rep_bool
        self.ext_rep_float = ext_rep_float
        self.ext_rep_double = ext_rep_double
        self.ext_rep_string = ext_rep_string
        self.ext_rep_bytes = ext_rep_bytes
        self.ext_rep_nested_enum = ext_rep_nested_enum
        self.ext_rep_nested_message = ext_rep_nested_message
        self.ext_pack_int32 = ext_pack_int32
        self.ext_pack_uint32 = ext_pack_uint32
        self.ext_pack_sint32 = ext_pack_sint32
        self.ext_pack_fixed32 = ext_pack_fixed32
        self.ext_pack_sfixed32 = ext_pack_sfixed32
        self.ext_pack_int64 = ext_pack_int64
        self.ext_pack_uint64 = ext_pack_uint64
        self.ext_pack_sint64 = ext_pack_sint64
        self.ext_pack_fixed64 = ext_pack_fixed64
        self.ext_pack_sfixed64 = ext_pack_sfixed64
        self.ext_pack_bool = ext_pack_bool
        self.ext_pack_float = ext_pack_float
        self.ext_pack_double = ext_pack_double
        self.ext_pack_nested_enum = ext_pack_nested_enum
    }

}

#if swift(>=5.5)
extension AllTypes.NestedEnum : Sendable {
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension AllTypes.NestedMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension AllTypes.NestedMessage : Hashable {
}
#endif

#if swift(>=5.5)
extension AllTypes.NestedMessage : Sendable {
}
#endif

extension AllTypes.NestedMessage : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.alltypes.AllTypes.NestedMessage"
    }
}

extension AllTypes.NestedMessage : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var a: Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: a = try reader.decode(Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.a = a
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.a)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension AllTypes.NestedMessage : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.a = try container.decodeIfPresent(Int32.self, forKey: "a")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.a != nil {
            try container.encode(self.a, forKey: "a")
        }
    }
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension AllTypes : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension AllTypes : Hashable {
}
#endif

#if swift(>=5.5)
extension AllTypes : @unchecked Sendable {
}
#endif

extension AllTypes : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        self.storage = try _AllTypes(from: reader)
    }

    public func encode(to writer: ProtoWriter) throws {
        try storage.encode(to: writer)
    }
}

extension _AllTypes : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.alltypes.AllTypes"
    }
}

extension _AllTypes : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var opt_int32: Int32? = nil
        var opt_uint32: UInt32? = nil
        var opt_sint32: Int32? = nil
        var opt_fixed32: UInt32? = nil
        var opt_sfixed32: Int32? = nil
        var opt_int64: Int64? = nil
        var opt_uint64: UInt64? = nil
        var opt_sint64: Int64? = nil
        var opt_fixed64: UInt64? = nil
        var opt_sfixed64: Int64? = nil
        var opt_bool: Bool? = nil
        var opt_float: Float? = nil
        var opt_double: Double? = nil
        var opt_string: String? = nil
        var opt_bytes: Data? = nil
        var opt_nested_enum: AllTypes.NestedEnum? = nil
        var opt_nested_message: AllTypes.NestedMessage? = nil
        var req_int32: Int32? = nil
        var req_uint32: UInt32? = nil
        var req_sint32: Int32? = nil
        var req_fixed32: UInt32? = nil
        var req_sfixed32: Int32? = nil
        var req_int64: Int64? = nil
        var req_uint64: UInt64? = nil
        var req_sint64: Int64? = nil
        var req_fixed64: UInt64? = nil
        var req_sfixed64: Int64? = nil
        var req_bool: Bool? = nil
        var req_float: Float? = nil
        var req_double: Double? = nil
        var req_string: String? = nil
        var req_bytes: Data? = nil
        var req_nested_enum: AllTypes.NestedEnum? = nil
        var req_nested_message: AllTypes.NestedMessage? = nil
        var rep_int32: [Int32] = []
        var rep_uint32: [UInt32] = []
        var rep_sint32: [Int32] = []
        var rep_fixed32: [UInt32] = []
        var rep_sfixed32: [Int32] = []
        var rep_int64: [Int64] = []
        var rep_uint64: [UInt64] = []
        var rep_sint64: [Int64] = []
        var rep_fixed64: [UInt64] = []
        var rep_sfixed64: [Int64] = []
        var rep_bool: [Bool] = []
        var rep_float: [Float] = []
        var rep_double: [Double] = []
        var rep_string: [String] = []
        var rep_bytes: [Data] = []
        var rep_nested_enum: [AllTypes.NestedEnum] = []
        var rep_nested_message: [AllTypes.NestedMessage] = []
        var pack_int32: [Int32] = []
        var pack_uint32: [UInt32] = []
        var pack_sint32: [Int32] = []
        var pack_fixed32: [UInt32] = []
        var pack_sfixed32: [Int32] = []
        var pack_int64: [Int64] = []
        var pack_uint64: [UInt64] = []
        var pack_sint64: [Int64] = []
        var pack_fixed64: [UInt64] = []
        var pack_sfixed64: [Int64] = []
        var pack_bool: [Bool] = []
        var pack_float: [Float] = []
        var pack_double: [Double] = []
        var pack_nested_enum: [AllTypes.NestedEnum] = []
        var default_int32: Int32? = nil
        var default_uint32: UInt32? = nil
        var default_sint32: Int32? = nil
        var default_fixed32: UInt32? = nil
        var default_sfixed32: Int32? = nil
        var default_int64: Int64? = nil
        var default_uint64: UInt64? = nil
        var default_sint64: Int64? = nil
        var default_fixed64: UInt64? = nil
        var default_sfixed64: Int64? = nil
        var default_bool: Bool? = nil
        var default_float: Float? = nil
        var default_double: Double? = nil
        var default_string: String? = nil
        var default_bytes: Data? = nil
        var default_nested_enum: AllTypes.NestedEnum? = nil
        var map_int32_int32: [Int32 : Int32] = [:]
        var map_string_string: [String : String] = [:]
        var map_string_message: [String : AllTypes.NestedMessage] = [:]
        var map_string_enum: [String : AllTypes.NestedEnum] = [:]
        var ext_opt_int32: Int32? = nil
        var ext_opt_uint32: UInt32? = nil
        var ext_opt_sint32: Int32? = nil
        var ext_opt_fixed32: UInt32? = nil
        var ext_opt_sfixed32: Int32? = nil
        var ext_opt_int64: Int64? = nil
        var ext_opt_uint64: UInt64? = nil
        var ext_opt_sint64: Int64? = nil
        var ext_opt_fixed64: UInt64? = nil
        var ext_opt_sfixed64: Int64? = nil
        var ext_opt_bool: Bool? = nil
        var ext_opt_float: Float? = nil
        var ext_opt_double: Double? = nil
        var ext_opt_string: String? = nil
        var ext_opt_bytes: Data? = nil
        var ext_opt_nested_enum: AllTypes.NestedEnum? = nil
        var ext_opt_nested_message: AllTypes.NestedMessage? = nil
        var ext_rep_int32: [Int32] = []
        var ext_rep_uint32: [UInt32] = []
        var ext_rep_sint32: [Int32] = []
        var ext_rep_fixed32: [UInt32] = []
        var ext_rep_sfixed32: [Int32] = []
        var ext_rep_int64: [Int64] = []
        var ext_rep_uint64: [UInt64] = []
        var ext_rep_sint64: [Int64] = []
        var ext_rep_fixed64: [UInt64] = []
        var ext_rep_sfixed64: [Int64] = []
        var ext_rep_bool: [Bool] = []
        var ext_rep_float: [Float] = []
        var ext_rep_double: [Double] = []
        var ext_rep_string: [String] = []
        var ext_rep_bytes: [Data] = []
        var ext_rep_nested_enum: [AllTypes.NestedEnum] = []
        var ext_rep_nested_message: [AllTypes.NestedMessage] = []
        var ext_pack_int32: [Int32] = []
        var ext_pack_uint32: [UInt32] = []
        var ext_pack_sint32: [Int32] = []
        var ext_pack_fixed32: [UInt32] = []
        var ext_pack_sfixed32: [Int32] = []
        var ext_pack_int64: [Int64] = []
        var ext_pack_uint64: [UInt64] = []
        var ext_pack_sint64: [Int64] = []
        var ext_pack_fixed64: [UInt64] = []
        var ext_pack_sfixed64: [Int64] = []
        var ext_pack_bool: [Bool] = []
        var ext_pack_float: [Float] = []
        var ext_pack_double: [Double] = []
        var ext_pack_nested_enum: [AllTypes.NestedEnum] = []

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: opt_int32 = try reader.decode(Int32.self)
            case 2: opt_uint32 = try reader.decode(UInt32.self)
            case 3: opt_sint32 = try reader.decode(Int32.self, encoding: .signed)
            case 4: opt_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
            case 5: opt_sfixed32 = try reader.decode(Int32.self)
            case 6: opt_int64 = try reader.decode(Int64.self)
            case 7: opt_uint64 = try reader.decode(UInt64.self)
            case 8: opt_sint64 = try reader.decode(Int64.self, encoding: .signed)
            case 9: opt_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
            case 10: opt_sfixed64 = try reader.decode(Int64.self)
            case 11: opt_bool = try reader.decode(Bool.self)
            case 12: opt_float = try reader.decode(Float.self)
            case 13: opt_double = try reader.decode(Double.self)
            case 14: opt_string = try reader.decode(String.self)
            case 15: opt_bytes = try reader.decode(Data.self)
            case 16: opt_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
            case 17: opt_nested_message = try reader.decode(AllTypes.NestedMessage.self)
            case 101: req_int32 = try reader.decode(Int32.self)
            case 102: req_uint32 = try reader.decode(UInt32.self)
            case 103: req_sint32 = try reader.decode(Int32.self, encoding: .signed)
            case 104: req_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
            case 105: req_sfixed32 = try reader.decode(Int32.self)
            case 106: req_int64 = try reader.decode(Int64.self)
            case 107: req_uint64 = try reader.decode(UInt64.self)
            case 108: req_sint64 = try reader.decode(Int64.self, encoding: .signed)
            case 109: req_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
            case 110: req_sfixed64 = try reader.decode(Int64.self)
            case 111: req_bool = try reader.decode(Bool.self)
            case 112: req_float = try reader.decode(Float.self)
            case 113: req_double = try reader.decode(Double.self)
            case 114: req_string = try reader.decode(String.self)
            case 115: req_bytes = try reader.decode(Data.self)
            case 116: req_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
            case 117: req_nested_message = try reader.decode(AllTypes.NestedMessage.self)
            case 201: try reader.decode(into: &rep_int32)
            case 202: try reader.decode(into: &rep_uint32)
            case 203: try reader.decode(into: &rep_sint32, encoding: .signed)
            case 204: try reader.decode(into: &rep_fixed32, encoding: .fixed)
            case 205: try reader.decode(into: &rep_sfixed32)
            case 206: try reader.decode(into: &rep_int64)
            case 207: try reader.decode(into: &rep_uint64)
            case 208: try reader.decode(into: &rep_sint64, encoding: .signed)
            case 209: try reader.decode(into: &rep_fixed64, encoding: .fixed)
            case 210: try reader.decode(into: &rep_sfixed64)
            case 211: try reader.decode(into: &rep_bool)
            case 212: try reader.decode(into: &rep_float)
            case 213: try reader.decode(into: &rep_double)
            case 214: try reader.decode(into: &rep_string)
            case 215: try reader.decode(into: &rep_bytes)
            case 216: try reader.decode(into: &rep_nested_enum)
            case 217: try reader.decode(into: &rep_nested_message)
            case 301: try reader.decode(into: &pack_int32)
            case 302: try reader.decode(into: &pack_uint32)
            case 303: try reader.decode(into: &pack_sint32, encoding: .signed)
            case 304: try reader.decode(into: &pack_fixed32, encoding: .fixed)
            case 305: try reader.decode(into: &pack_sfixed32)
            case 306: try reader.decode(into: &pack_int64)
            case 307: try reader.decode(into: &pack_uint64)
            case 308: try reader.decode(into: &pack_sint64, encoding: .signed)
            case 309: try reader.decode(into: &pack_fixed64, encoding: .fixed)
            case 310: try reader.decode(into: &pack_sfixed64)
            case 311: try reader.decode(into: &pack_bool)
            case 312: try reader.decode(into: &pack_float)
            case 313: try reader.decode(into: &pack_double)
            case 316: try reader.decode(into: &pack_nested_enum)
            case 401: default_int32 = try reader.decode(Int32.self)
            case 402: default_uint32 = try reader.decode(UInt32.self)
            case 403: default_sint32 = try reader.decode(Int32.self, encoding: .signed)
            case 404: default_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
            case 405: default_sfixed32 = try reader.decode(Int32.self)
            case 406: default_int64 = try reader.decode(Int64.self)
            case 407: default_uint64 = try reader.decode(UInt64.self)
            case 408: default_sint64 = try reader.decode(Int64.self, encoding: .signed)
            case 409: default_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
            case 410: default_sfixed64 = try reader.decode(Int64.self)
            case 411: default_bool = try reader.decode(Bool.self)
            case 412: default_float = try reader.decode(Float.self)
            case 413: default_double = try reader.decode(Double.self)
            case 414: default_string = try reader.decode(String.self)
            case 415: default_bytes = try reader.decode(Data.self)
            case 416: default_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
            case 501: try reader.decode(into: &map_int32_int32)
            case 502: try reader.decode(into: &map_string_string)
            case 503: try reader.decode(into: &map_string_message)
            case 504: try reader.decode(into: &map_string_enum)
            case 1001: ext_opt_int32 = try reader.decode(Int32.self)
            case 1002: ext_opt_uint32 = try reader.decode(UInt32.self)
            case 1003: ext_opt_sint32 = try reader.decode(Int32.self, encoding: .signed)
            case 1004: ext_opt_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
            case 1005: ext_opt_sfixed32 = try reader.decode(Int32.self)
            case 1006: ext_opt_int64 = try reader.decode(Int64.self)
            case 1007: ext_opt_uint64 = try reader.decode(UInt64.self)
            case 1008: ext_opt_sint64 = try reader.decode(Int64.self, encoding: .signed)
            case 1009: ext_opt_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
            case 1010: ext_opt_sfixed64 = try reader.decode(Int64.self)
            case 1011: ext_opt_bool = try reader.decode(Bool.self)
            case 1012: ext_opt_float = try reader.decode(Float.self)
            case 1013: ext_opt_double = try reader.decode(Double.self)
            case 1014: ext_opt_string = try reader.decode(String.self)
            case 1015: ext_opt_bytes = try reader.decode(Data.self)
            case 1016: ext_opt_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
            case 1017: ext_opt_nested_message = try reader.decode(AllTypes.NestedMessage.self)
            case 1101: try reader.decode(into: &ext_rep_int32)
            case 1102: try reader.decode(into: &ext_rep_uint32)
            case 1103: try reader.decode(into: &ext_rep_sint32, encoding: .signed)
            case 1104: try reader.decode(into: &ext_rep_fixed32, encoding: .fixed)
            case 1105: try reader.decode(into: &ext_rep_sfixed32)
            case 1106: try reader.decode(into: &ext_rep_int64)
            case 1107: try reader.decode(into: &ext_rep_uint64)
            case 1108: try reader.decode(into: &ext_rep_sint64, encoding: .signed)
            case 1109: try reader.decode(into: &ext_rep_fixed64, encoding: .fixed)
            case 1110: try reader.decode(into: &ext_rep_sfixed64)
            case 1111: try reader.decode(into: &ext_rep_bool)
            case 1112: try reader.decode(into: &ext_rep_float)
            case 1113: try reader.decode(into: &ext_rep_double)
            case 1114: try reader.decode(into: &ext_rep_string)
            case 1115: try reader.decode(into: &ext_rep_bytes)
            case 1116: try reader.decode(into: &ext_rep_nested_enum)
            case 1117: try reader.decode(into: &ext_rep_nested_message)
            case 1201: try reader.decode(into: &ext_pack_int32)
            case 1202: try reader.decode(into: &ext_pack_uint32)
            case 1203: try reader.decode(into: &ext_pack_sint32, encoding: .signed)
            case 1204: try reader.decode(into: &ext_pack_fixed32, encoding: .fixed)
            case 1205: try reader.decode(into: &ext_pack_sfixed32)
            case 1206: try reader.decode(into: &ext_pack_int64)
            case 1207: try reader.decode(into: &ext_pack_uint64)
            case 1208: try reader.decode(into: &ext_pack_sint64, encoding: .signed)
            case 1209: try reader.decode(into: &ext_pack_fixed64, encoding: .fixed)
            case 1210: try reader.decode(into: &ext_pack_sfixed64)
            case 1211: try reader.decode(into: &ext_pack_bool)
            case 1212: try reader.decode(into: &ext_pack_float)
            case 1213: try reader.decode(into: &ext_pack_double)
            case 1216: try reader.decode(into: &ext_pack_nested_enum)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.opt_int32 = opt_int32
        self.opt_uint32 = opt_uint32
        self.opt_sint32 = opt_sint32
        self.opt_fixed32 = opt_fixed32
        self.opt_sfixed32 = opt_sfixed32
        self.opt_int64 = opt_int64
        self.opt_uint64 = opt_uint64
        self.opt_sint64 = opt_sint64
        self.opt_fixed64 = opt_fixed64
        self.opt_sfixed64 = opt_sfixed64
        self.opt_bool = opt_bool
        self.opt_float = opt_float
        self.opt_double = opt_double
        self.opt_string = opt_string
        self.opt_bytes = opt_bytes
        self.opt_nested_enum = opt_nested_enum
        self.opt_nested_message = opt_nested_message
        self.req_int32 = try AllTypes.checkIfMissing(req_int32, "req_int32")
        self.req_uint32 = try AllTypes.checkIfMissing(req_uint32, "req_uint32")
        self.req_sint32 = try AllTypes.checkIfMissing(req_sint32, "req_sint32")
        self.req_fixed32 = try AllTypes.checkIfMissing(req_fixed32, "req_fixed32")
        self.req_sfixed32 = try AllTypes.checkIfMissing(req_sfixed32, "req_sfixed32")
        self.req_int64 = try AllTypes.checkIfMissing(req_int64, "req_int64")
        self.req_uint64 = try AllTypes.checkIfMissing(req_uint64, "req_uint64")
        self.req_sint64 = try AllTypes.checkIfMissing(req_sint64, "req_sint64")
        self.req_fixed64 = try AllTypes.checkIfMissing(req_fixed64, "req_fixed64")
        self.req_sfixed64 = try AllTypes.checkIfMissing(req_sfixed64, "req_sfixed64")
        self.req_bool = try AllTypes.checkIfMissing(req_bool, "req_bool")
        self.req_float = try AllTypes.checkIfMissing(req_float, "req_float")
        self.req_double = try AllTypes.checkIfMissing(req_double, "req_double")
        self.req_string = try AllTypes.checkIfMissing(req_string, "req_string")
        self.req_bytes = try AllTypes.checkIfMissing(req_bytes, "req_bytes")
        self.req_nested_enum = try AllTypes.checkIfMissing(req_nested_enum, "req_nested_enum")
        self.req_nested_message = try AllTypes.checkIfMissing(req_nested_message, "req_nested_message")
        self.rep_int32 = rep_int32
        self.rep_uint32 = rep_uint32
        self.rep_sint32 = rep_sint32
        self.rep_fixed32 = rep_fixed32
        self.rep_sfixed32 = rep_sfixed32
        self.rep_int64 = rep_int64
        self.rep_uint64 = rep_uint64
        self.rep_sint64 = rep_sint64
        self.rep_fixed64 = rep_fixed64
        self.rep_sfixed64 = rep_sfixed64
        self.rep_bool = rep_bool
        self.rep_float = rep_float
        self.rep_double = rep_double
        self.rep_string = rep_string
        self.rep_bytes = rep_bytes
        self.rep_nested_enum = rep_nested_enum
        self.rep_nested_message = rep_nested_message
        self.pack_int32 = pack_int32
        self.pack_uint32 = pack_uint32
        self.pack_sint32 = pack_sint32
        self.pack_fixed32 = pack_fixed32
        self.pack_sfixed32 = pack_sfixed32
        self.pack_int64 = pack_int64
        self.pack_uint64 = pack_uint64
        self.pack_sint64 = pack_sint64
        self.pack_fixed64 = pack_fixed64
        self.pack_sfixed64 = pack_sfixed64
        self.pack_bool = pack_bool
        self.pack_float = pack_float
        self.pack_double = pack_double
        self.pack_nested_enum = pack_nested_enum
        self.default_int32 = default_int32
        self.default_uint32 = default_uint32
        self.default_sint32 = default_sint32
        self.default_fixed32 = default_fixed32
        self.default_sfixed32 = default_sfixed32
        self.default_int64 = default_int64
        self.default_uint64 = default_uint64
        self.default_sint64 = default_sint64
        self.default_fixed64 = default_fixed64
        self.default_sfixed64 = default_sfixed64
        self.default_bool = default_bool
        self.default_float = default_float
        self.default_double = default_double
        self.default_string = default_string
        self.default_bytes = default_bytes
        self.default_nested_enum = default_nested_enum
        self.map_int32_int32 = map_int32_int32
        self.map_string_string = map_string_string
        self.map_string_message = map_string_message
        self.map_string_enum = map_string_enum
        self.ext_opt_int32 = ext_opt_int32
        self.ext_opt_uint32 = ext_opt_uint32
        self.ext_opt_sint32 = ext_opt_sint32
        self.ext_opt_fixed32 = ext_opt_fixed32
        self.ext_opt_sfixed32 = ext_opt_sfixed32
        self.ext_opt_int64 = ext_opt_int64
        self.ext_opt_uint64 = ext_opt_uint64
        self.ext_opt_sint64 = ext_opt_sint64
        self.ext_opt_fixed64 = ext_opt_fixed64
        self.ext_opt_sfixed64 = ext_opt_sfixed64
        self.ext_opt_bool = ext_opt_bool
        self.ext_opt_float = ext_opt_float
        self.ext_opt_double = ext_opt_double
        self.ext_opt_string = ext_opt_string
        self.ext_opt_bytes = ext_opt_bytes
        self.ext_opt_nested_enum = ext_opt_nested_enum
        self.ext_opt_nested_message = ext_opt_nested_message
        self.ext_rep_int32 = ext_rep_int32
        self.ext_rep_uint32 = ext_rep_uint32
        self.ext_rep_sint32 = ext_rep_sint32
        self.ext_rep_fixed32 = ext_rep_fixed32
        self.ext_rep_sfixed32 = ext_rep_sfixed32
        self.ext_rep_int64 = ext_rep_int64
        self.ext_rep_uint64 = ext_rep_uint64
        self.ext_rep_sint64 = ext_rep_sint64
        self.ext_rep_fixed64 = ext_rep_fixed64
        self.ext_rep_sfixed64 = ext_rep_sfixed64
        self.ext_rep_bool = ext_rep_bool
        self.ext_rep_float = ext_rep_float
        self.ext_rep_double = ext_rep_double
        self.ext_rep_string = ext_rep_string
        self.ext_rep_bytes = ext_rep_bytes
        self.ext_rep_nested_enum = ext_rep_nested_enum
        self.ext_rep_nested_message = ext_rep_nested_message
        self.ext_pack_int32 = ext_pack_int32
        self.ext_pack_uint32 = ext_pack_uint32
        self.ext_pack_sint32 = ext_pack_sint32
        self.ext_pack_fixed32 = ext_pack_fixed32
        self.ext_pack_sfixed32 = ext_pack_sfixed32
        self.ext_pack_int64 = ext_pack_int64
        self.ext_pack_uint64 = ext_pack_uint64
        self.ext_pack_sint64 = ext_pack_sint64
        self.ext_pack_fixed64 = ext_pack_fixed64
        self.ext_pack_sfixed64 = ext_pack_sfixed64
        self.ext_pack_bool = ext_pack_bool
        self.ext_pack_float = ext_pack_float
        self.ext_pack_double = ext_pack_double
        self.ext_pack_nested_enum = ext_pack_nested_enum
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.opt_int32)
        try writer.encode(tag: 2, value: self.opt_uint32)
        try writer.encode(tag: 3, value: self.opt_sint32, encoding: .signed)
        try writer.encode(tag: 4, value: self.opt_fixed32, encoding: .fixed)
        try writer.encode(tag: 5, value: self.opt_sfixed32)
        try writer.encode(tag: 6, value: self.opt_int64)
        try writer.encode(tag: 7, value: self.opt_uint64)
        try writer.encode(tag: 8, value: self.opt_sint64, encoding: .signed)
        try writer.encode(tag: 9, value: self.opt_fixed64, encoding: .fixed)
        try writer.encode(tag: 10, value: self.opt_sfixed64)
        try writer.encode(tag: 11, value: self.opt_bool)
        try writer.encode(tag: 12, value: self.opt_float)
        try writer.encode(tag: 13, value: self.opt_double)
        try writer.encode(tag: 14, value: self.opt_string)
        try writer.encode(tag: 15, value: self.opt_bytes)
        try writer.encode(tag: 16, value: self.opt_nested_enum)
        try writer.encode(tag: 17, value: self.opt_nested_message)
        try writer.encode(tag: 101, value: self.req_int32)
        try writer.encode(tag: 102, value: self.req_uint32)
        try writer.encode(tag: 103, value: self.req_sint32, encoding: .signed)
        try writer.encode(tag: 104, value: self.req_fixed32, encoding: .fixed)
        try writer.encode(tag: 105, value: self.req_sfixed32)
        try writer.encode(tag: 106, value: self.req_int64)
        try writer.encode(tag: 107, value: self.req_uint64)
        try writer.encode(tag: 108, value: self.req_sint64, encoding: .signed)
        try writer.encode(tag: 109, value: self.req_fixed64, encoding: .fixed)
        try writer.encode(tag: 110, value: self.req_sfixed64)
        try writer.encode(tag: 111, value: self.req_bool)
        try writer.encode(tag: 112, value: self.req_float)
        try writer.encode(tag: 113, value: self.req_double)
        try writer.encode(tag: 114, value: self.req_string)
        try writer.encode(tag: 115, value: self.req_bytes)
        try writer.encode(tag: 116, value: self.req_nested_enum)
        try writer.encode(tag: 117, value: self.req_nested_message)
        try writer.encode(tag: 201, value: self.rep_int32)
        try writer.encode(tag: 202, value: self.rep_uint32)
        try writer.encode(tag: 203, value: self.rep_sint32, encoding: .signed)
        try writer.encode(tag: 204, value: self.rep_fixed32, encoding: .fixed)
        try writer.encode(tag: 205, value: self.rep_sfixed32)
        try writer.encode(tag: 206, value: self.rep_int64)
        try writer.encode(tag: 207, value: self.rep_uint64)
        try writer.encode(tag: 208, value: self.rep_sint64, encoding: .signed)
        try writer.encode(tag: 209, value: self.rep_fixed64, encoding: .fixed)
        try writer.encode(tag: 210, value: self.rep_sfixed64)
        try writer.encode(tag: 211, value: self.rep_bool)
        try writer.encode(tag: 212, value: self.rep_float)
        try writer.encode(tag: 213, value: self.rep_double)
        try writer.encode(tag: 214, value: self.rep_string)
        try writer.encode(tag: 215, value: self.rep_bytes)
        try writer.encode(tag: 216, value: self.rep_nested_enum)
        try writer.encode(tag: 217, value: self.rep_nested_message)
        try writer.encode(tag: 301, value: self.pack_int32, packed: true)
        try writer.encode(tag: 302, value: self.pack_uint32, packed: true)
        try writer.encode(tag: 303, value: self.pack_sint32, encoding: .signed, packed: true)
        try writer.encode(tag: 304, value: self.pack_fixed32, encoding: .fixed, packed: true)
        try writer.encode(tag: 305, value: self.pack_sfixed32, packed: true)
        try writer.encode(tag: 306, value: self.pack_int64, packed: true)
        try writer.encode(tag: 307, value: self.pack_uint64, packed: true)
        try writer.encode(tag: 308, value: self.pack_sint64, encoding: .signed, packed: true)
        try writer.encode(tag: 309, value: self.pack_fixed64, encoding: .fixed, packed: true)
        try writer.encode(tag: 310, value: self.pack_sfixed64, packed: true)
        try writer.encode(tag: 311, value: self.pack_bool, packed: true)
        try writer.encode(tag: 312, value: self.pack_float, packed: true)
        try writer.encode(tag: 313, value: self.pack_double, packed: true)
        try writer.encode(tag: 316, value: self.pack_nested_enum, packed: true)
        try writer.encode(tag: 401, value: self.default_int32)
        try writer.encode(tag: 402, value: self.default_uint32)
        try writer.encode(tag: 403, value: self.default_sint32, encoding: .signed)
        try writer.encode(tag: 404, value: self.default_fixed32, encoding: .fixed)
        try writer.encode(tag: 405, value: self.default_sfixed32)
        try writer.encode(tag: 406, value: self.default_int64)
        try writer.encode(tag: 407, value: self.default_uint64)
        try writer.encode(tag: 408, value: self.default_sint64, encoding: .signed)
        try writer.encode(tag: 409, value: self.default_fixed64, encoding: .fixed)
        try writer.encode(tag: 410, value: self.default_sfixed64)
        try writer.encode(tag: 411, value: self.default_bool)
        try writer.encode(tag: 412, value: self.default_float)
        try writer.encode(tag: 413, value: self.default_double)
        try writer.encode(tag: 414, value: self.default_string)
        try writer.encode(tag: 415, value: self.default_bytes)
        try writer.encode(tag: 416, value: self.default_nested_enum)
        try writer.encode(tag: 501, value: self.map_int32_int32)
        try writer.encode(tag: 502, value: self.map_string_string)
        try writer.encode(tag: 503, value: self.map_string_message)
        try writer.encode(tag: 504, value: self.map_string_enum)
        try writer.encode(tag: 1001, value: self.ext_opt_int32)
        try writer.encode(tag: 1002, value: self.ext_opt_uint32)
        try writer.encode(tag: 1003, value: self.ext_opt_sint32, encoding: .signed)
        try writer.encode(tag: 1004, value: self.ext_opt_fixed32, encoding: .fixed)
        try writer.encode(tag: 1005, value: self.ext_opt_sfixed32)
        try writer.encode(tag: 1006, value: self.ext_opt_int64)
        try writer.encode(tag: 1007, value: self.ext_opt_uint64)
        try writer.encode(tag: 1008, value: self.ext_opt_sint64, encoding: .signed)
        try writer.encode(tag: 1009, value: self.ext_opt_fixed64, encoding: .fixed)
        try writer.encode(tag: 1010, value: self.ext_opt_sfixed64)
        try writer.encode(tag: 1011, value: self.ext_opt_bool)
        try writer.encode(tag: 1012, value: self.ext_opt_float)
        try writer.encode(tag: 1013, value: self.ext_opt_double)
        try writer.encode(tag: 1014, value: self.ext_opt_string)
        try writer.encode(tag: 1015, value: self.ext_opt_bytes)
        try writer.encode(tag: 1016, value: self.ext_opt_nested_enum)
        try writer.encode(tag: 1017, value: self.ext_opt_nested_message)
        try writer.encode(tag: 1101, value: self.ext_rep_int32)
        try writer.encode(tag: 1102, value: self.ext_rep_uint32)
        try writer.encode(tag: 1103, value: self.ext_rep_sint32, encoding: .signed)
        try writer.encode(tag: 1104, value: self.ext_rep_fixed32, encoding: .fixed)
        try writer.encode(tag: 1105, value: self.ext_rep_sfixed32)
        try writer.encode(tag: 1106, value: self.ext_rep_int64)
        try writer.encode(tag: 1107, value: self.ext_rep_uint64)
        try writer.encode(tag: 1108, value: self.ext_rep_sint64, encoding: .signed)
        try writer.encode(tag: 1109, value: self.ext_rep_fixed64, encoding: .fixed)
        try writer.encode(tag: 1110, value: self.ext_rep_sfixed64)
        try writer.encode(tag: 1111, value: self.ext_rep_bool)
        try writer.encode(tag: 1112, value: self.ext_rep_float)
        try writer.encode(tag: 1113, value: self.ext_rep_double)
        try writer.encode(tag: 1114, value: self.ext_rep_string)
        try writer.encode(tag: 1115, value: self.ext_rep_bytes)
        try writer.encode(tag: 1116, value: self.ext_rep_nested_enum)
        try writer.encode(tag: 1117, value: self.ext_rep_nested_message)
        try writer.encode(tag: 1201, value: self.ext_pack_int32, packed: true)
        try writer.encode(tag: 1202, value: self.ext_pack_uint32, packed: true)
        try writer.encode(tag: 1203, value: self.ext_pack_sint32, encoding: .signed, packed: true)
        try writer.encode(tag: 1204, value: self.ext_pack_fixed32, encoding: .fixed, packed: true)
        try writer.encode(tag: 1205, value: self.ext_pack_sfixed32, packed: true)
        try writer.encode(tag: 1206, value: self.ext_pack_int64, packed: true)
        try writer.encode(tag: 1207, value: self.ext_pack_uint64, packed: true)
        try writer.encode(tag: 1208, value: self.ext_pack_sint64, encoding: .signed, packed: true)
        try writer.encode(tag: 1209, value: self.ext_pack_fixed64, encoding: .fixed, packed: true)
        try writer.encode(tag: 1210, value: self.ext_pack_sfixed64, packed: true)
        try writer.encode(tag: 1211, value: self.ext_pack_bool, packed: true)
        try writer.encode(tag: 1212, value: self.ext_pack_float, packed: true)
        try writer.encode(tag: 1213, value: self.ext_pack_double, packed: true)
        try writer.encode(tag: 1216, value: self.ext_pack_nested_enum, packed: true)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension AllTypes : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.storage = try container.decode(_AllTypes.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(storage)
    }
}
#endif

#if !WIRE_REMOVE_CODABLE
extension _AllTypes : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.opt_int32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "optInt32", "opt_int32")
        self.opt_uint32 = try container.decodeFirstIfPresent(UInt32.self, forKeys: "optUint32", "opt_uint32")
        self.opt_sint32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "optSint32", "opt_sint32")
        self.opt_fixed32 = try container.decodeFirstIfPresent(UInt32.self, forKeys: "optFixed32", "opt_fixed32")
        self.opt_sfixed32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "optSfixed32", "opt_sfixed32")
        self.opt_int64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "optInt64", "opt_int64")?.wrappedValue
        self.opt_uint64 = try container.decodeFirstIfPresent(StringEncoded<UInt64>.self, forKeys: "optUint64", "opt_uint64")?.wrappedValue
        self.opt_sint64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "optSint64", "opt_sint64")?.wrappedValue
        self.opt_fixed64 = try container.decodeFirstIfPresent(StringEncoded<UInt64>.self, forKeys: "optFixed64", "opt_fixed64")?.wrappedValue
        self.opt_sfixed64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "optSfixed64", "opt_sfixed64")?.wrappedValue
        self.opt_bool = try container.decodeFirstIfPresent(Bool.self, forKeys: "optBool", "opt_bool")
        self.opt_float = try container.decodeFirstIfPresent(Float.self, forKeys: "optFloat", "opt_float")
        self.opt_double = try container.decodeFirstIfPresent(Double.self, forKeys: "optDouble", "opt_double")
        self.opt_string = try container.decodeFirstIfPresent(String.self, forKeys: "optString", "opt_string")
        self.opt_bytes = try container.decodeFirstIfPresent(StringEncoded<Data>.self, forKeys: "optBytes", "opt_bytes")?.wrappedValue
        self.opt_nested_enum = try container.decodeFirstIfPresent(AllTypes.NestedEnum.self, forKeys: "optNestedEnum", "opt_nested_enum")
        self.opt_nested_message = try container.decodeFirstIfPresent(AllTypes.NestedMessage.self, forKeys: "optNestedMessage", "opt_nested_message")
        self.req_int32 = try container.decodeFirst(Int32.self, forKeys: "reqInt32", "req_int32")
        self.req_uint32 = try container.decodeFirst(UInt32.self, forKeys: "reqUint32", "req_uint32")
        self.req_sint32 = try container.decodeFirst(Int32.self, forKeys: "reqSint32", "req_sint32")
        self.req_fixed32 = try container.decodeFirst(UInt32.self, forKeys: "reqFixed32", "req_fixed32")
        self.req_sfixed32 = try container.decodeFirst(Int32.self, forKeys: "reqSfixed32", "req_sfixed32")
        self.req_int64 = try container.decodeFirst(StringEncoded<Int64>.self, forKeys: "reqInt64", "req_int64").wrappedValue
        self.req_uint64 = try container.decodeFirst(StringEncoded<UInt64>.self, forKeys: "reqUint64", "req_uint64").wrappedValue
        self.req_sint64 = try container.decodeFirst(StringEncoded<Int64>.self, forKeys: "reqSint64", "req_sint64").wrappedValue
        self.req_fixed64 = try container.decodeFirst(StringEncoded<UInt64>.self, forKeys: "reqFixed64", "req_fixed64").wrappedValue
        self.req_sfixed64 = try container.decodeFirst(StringEncoded<Int64>.self, forKeys: "reqSfixed64", "req_sfixed64").wrappedValue
        self.req_bool = try container.decodeFirst(Bool.self, forKeys: "reqBool", "req_bool")
        self.req_float = try container.decodeFirst(Float.self, forKeys: "reqFloat", "req_float")
        self.req_double = try container.decodeFirst(Double.self, forKeys: "reqDouble", "req_double")
        self.req_string = try container.decodeFirst(String.self, forKeys: "reqString", "req_string")
        self.req_bytes = try container.decodeFirst(StringEncoded<Data>.self, forKeys: "reqBytes", "req_bytes").wrappedValue
        self.req_nested_enum = try container.decodeFirst(AllTypes.NestedEnum.self, forKeys: "reqNestedEnum", "req_nested_enum")
        self.req_nested_message = try container.decodeFirst(AllTypes.NestedMessage.self, forKeys: "reqNestedMessage", "req_nested_message")
        self.rep_int32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "repInt32", "rep_int32") ?? []
        self.rep_uint32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "repUint32", "rep_uint32") ?? []
        self.rep_sint32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "repSint32", "rep_sint32") ?? []
        self.rep_fixed32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "repFixed32", "rep_fixed32") ?? []
        self.rep_sfixed32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "repSfixed32", "rep_sfixed32") ?? []
        self.rep_int64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "repInt64", "rep_int64")?.wrappedValue ?? []
        self.rep_uint64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "repUint64", "rep_uint64")?.wrappedValue ?? []
        self.rep_sint64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "repSint64", "rep_sint64")?.wrappedValue ?? []
        self.rep_fixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "repFixed64", "rep_fixed64")?.wrappedValue ?? []
        self.rep_sfixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "repSfixed64", "rep_sfixed64")?.wrappedValue ?? []
        self.rep_bool = try container.decodeFirstIfPresent([Bool].self, forKeys: "repBool", "rep_bool") ?? []
        self.rep_float = try container.decodeFirstIfPresent([Float].self, forKeys: "repFloat", "rep_float") ?? []
        self.rep_double = try container.decodeFirstIfPresent([Double].self, forKeys: "repDouble", "rep_double") ?? []
        self.rep_string = try container.decodeFirstIfPresent([String].self, forKeys: "repString", "rep_string") ?? []
        self.rep_bytes = try container.decodeFirstIfPresent(StringEncodedValues<[Data]>.self, forKeys: "repBytes", "rep_bytes")?.wrappedValue ?? []
        self.rep_nested_enum = try container.decodeFirstIfPresent([AllTypes.NestedEnum].self, forKeys: "repNestedEnum", "rep_nested_enum") ?? []
        self.rep_nested_message = try container.decodeFirstIfPresent([AllTypes.NestedMessage].self, forKeys: "repNestedMessage", "rep_nested_message") ?? []
        self.pack_int32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "packInt32", "pack_int32") ?? []
        self.pack_uint32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "packUint32", "pack_uint32") ?? []
        self.pack_sint32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "packSint32", "pack_sint32") ?? []
        self.pack_fixed32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "packFixed32", "pack_fixed32") ?? []
        self.pack_sfixed32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "packSfixed32", "pack_sfixed32") ?? []
        self.pack_int64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "packInt64", "pack_int64")?.wrappedValue ?? []
        self.pack_uint64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "packUint64", "pack_uint64")?.wrappedValue ?? []
        self.pack_sint64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "packSint64", "pack_sint64")?.wrappedValue ?? []
        self.pack_fixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "packFixed64", "pack_fixed64")?.wrappedValue ?? []
        self.pack_sfixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "packSfixed64", "pack_sfixed64")?.wrappedValue ?? []
        self.pack_bool = try container.decodeFirstIfPresent([Bool].self, forKeys: "packBool", "pack_bool") ?? []
        self.pack_float = try container.decodeFirstIfPresent([Float].self, forKeys: "packFloat", "pack_float") ?? []
        self.pack_double = try container.decodeFirstIfPresent([Double].self, forKeys: "packDouble", "pack_double") ?? []
        self.pack_nested_enum = try container.decodeFirstIfPresent([AllTypes.NestedEnum].self, forKeys: "packNestedEnum", "pack_nested_enum") ?? []
        self.default_int32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "defaultInt32", "default_int32")
        self.default_uint32 = try container.decodeFirstIfPresent(UInt32.self, forKeys: "defaultUint32", "default_uint32")
        self.default_sint32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "defaultSint32", "default_sint32")
        self.default_fixed32 = try container.decodeFirstIfPresent(UInt32.self, forKeys: "defaultFixed32", "default_fixed32")
        self.default_sfixed32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "defaultSfixed32", "default_sfixed32")
        self.default_int64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "defaultInt64", "default_int64")?.wrappedValue
        self.default_uint64 = try container.decodeFirstIfPresent(StringEncoded<UInt64>.self, forKeys: "defaultUint64", "default_uint64")?.wrappedValue
        self.default_sint64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "defaultSint64", "default_sint64")?.wrappedValue
        self.default_fixed64 = try container.decodeFirstIfPresent(StringEncoded<UInt64>.self, forKeys: "defaultFixed64", "default_fixed64")?.wrappedValue
        self.default_sfixed64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "defaultSfixed64", "default_sfixed64")?.wrappedValue
        self.default_bool = try container.decodeFirstIfPresent(Bool.self, forKeys: "defaultBool", "default_bool")
        self.default_float = try container.decodeFirstIfPresent(Float.self, forKeys: "defaultFloat", "default_float")
        self.default_double = try container.decodeFirstIfPresent(Double.self, forKeys: "defaultDouble", "default_double")
        self.default_string = try container.decodeFirstIfPresent(String.self, forKeys: "defaultString", "default_string")
        self.default_bytes = try container.decodeFirstIfPresent(StringEncoded<Data>.self, forKeys: "defaultBytes", "default_bytes")?.wrappedValue
        self.default_nested_enum = try container.decodeFirstIfPresent(AllTypes.NestedEnum.self, forKeys: "defaultNestedEnum", "default_nested_enum")
        self.map_int32_int32 = try container.decodeFirstIfPresent(ProtoMap<Int32, Int32>.self, forKeys: "mapInt32Int32", "map_int32_int32")?.wrappedValue ?? [:]
        self.map_string_string = try container.decodeFirstIfPresent(ProtoMap<String, String>.self, forKeys: "mapStringString", "map_string_string")?.wrappedValue ?? [:]
        self.map_string_message = try container.decodeFirstIfPresent(ProtoMap<String, AllTypes.NestedMessage>.self, forKeys: "mapStringMessage", "map_string_message")?.wrappedValue ?? [:]
        self.map_string_enum = try container.decodeFirstIfPresent(ProtoMapEnumValues<String, AllTypes.NestedEnum>.self, forKeys: "mapStringEnum", "map_string_enum")?.wrappedValue ?? [:]
        self.ext_opt_int32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "extOptInt32", "ext_opt_int32")
        self.ext_opt_uint32 = try container.decodeFirstIfPresent(UInt32.self, forKeys: "extOptUint32", "ext_opt_uint32")
        self.ext_opt_sint32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "extOptSint32", "ext_opt_sint32")
        self.ext_opt_fixed32 = try container.decodeFirstIfPresent(UInt32.self, forKeys: "extOptFixed32", "ext_opt_fixed32")
        self.ext_opt_sfixed32 = try container.decodeFirstIfPresent(Int32.self, forKeys: "extOptSfixed32", "ext_opt_sfixed32")
        self.ext_opt_int64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "extOptInt64", "ext_opt_int64")?.wrappedValue
        self.ext_opt_uint64 = try container.decodeFirstIfPresent(StringEncoded<UInt64>.self, forKeys: "extOptUint64", "ext_opt_uint64")?.wrappedValue
        self.ext_opt_sint64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "extOptSint64", "ext_opt_sint64")?.wrappedValue
        self.ext_opt_fixed64 = try container.decodeFirstIfPresent(StringEncoded<UInt64>.self, forKeys: "extOptFixed64", "ext_opt_fixed64")?.wrappedValue
        self.ext_opt_sfixed64 = try container.decodeFirstIfPresent(StringEncoded<Int64>.self, forKeys: "extOptSfixed64", "ext_opt_sfixed64")?.wrappedValue
        self.ext_opt_bool = try container.decodeFirstIfPresent(Bool.self, forKeys: "extOptBool", "ext_opt_bool")
        self.ext_opt_float = try container.decodeFirstIfPresent(Float.self, forKeys: "extOptFloat", "ext_opt_float")
        self.ext_opt_double = try container.decodeFirstIfPresent(Double.self, forKeys: "extOptDouble", "ext_opt_double")
        self.ext_opt_string = try container.decodeFirstIfPresent(String.self, forKeys: "extOptString", "ext_opt_string")
        self.ext_opt_bytes = try container.decodeFirstIfPresent(StringEncoded<Data>.self, forKeys: "extOptBytes", "ext_opt_bytes")?.wrappedValue
        self.ext_opt_nested_enum = try container.decodeFirstIfPresent(AllTypes.NestedEnum.self, forKeys: "extOptNestedEnum", "ext_opt_nested_enum")
        self.ext_opt_nested_message = try container.decodeFirstIfPresent(AllTypes.NestedMessage.self, forKeys: "extOptNestedMessage", "ext_opt_nested_message")
        self.ext_rep_int32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "extRepInt32", "ext_rep_int32") ?? []
        self.ext_rep_uint32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "extRepUint32", "ext_rep_uint32") ?? []
        self.ext_rep_sint32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "extRepSint32", "ext_rep_sint32") ?? []
        self.ext_rep_fixed32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "extRepFixed32", "ext_rep_fixed32") ?? []
        self.ext_rep_sfixed32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "extRepSfixed32", "ext_rep_sfixed32") ?? []
        self.ext_rep_int64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "extRepInt64", "ext_rep_int64")?.wrappedValue ?? []
        self.ext_rep_uint64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "extRepUint64", "ext_rep_uint64")?.wrappedValue ?? []
        self.ext_rep_sint64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "extRepSint64", "ext_rep_sint64")?.wrappedValue ?? []
        self.ext_rep_fixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "extRepFixed64", "ext_rep_fixed64")?.wrappedValue ?? []
        self.ext_rep_sfixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "extRepSfixed64", "ext_rep_sfixed64")?.wrappedValue ?? []
        self.ext_rep_bool = try container.decodeFirstIfPresent([Bool].self, forKeys: "extRepBool", "ext_rep_bool") ?? []
        self.ext_rep_float = try container.decodeFirstIfPresent([Float].self, forKeys: "extRepFloat", "ext_rep_float") ?? []
        self.ext_rep_double = try container.decodeFirstIfPresent([Double].self, forKeys: "extRepDouble", "ext_rep_double") ?? []
        self.ext_rep_string = try container.decodeFirstIfPresent([String].self, forKeys: "extRepString", "ext_rep_string") ?? []
        self.ext_rep_bytes = try container.decodeFirstIfPresent(StringEncodedValues<[Data]>.self, forKeys: "extRepBytes", "ext_rep_bytes")?.wrappedValue ?? []
        self.ext_rep_nested_enum = try container.decodeFirstIfPresent([AllTypes.NestedEnum].self, forKeys: "extRepNestedEnum", "ext_rep_nested_enum") ?? []
        self.ext_rep_nested_message = try container.decodeFirstIfPresent([AllTypes.NestedMessage].self, forKeys: "extRepNestedMessage", "ext_rep_nested_message") ?? []
        self.ext_pack_int32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "extPackInt32", "ext_pack_int32") ?? []
        self.ext_pack_uint32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "extPackUint32", "ext_pack_uint32") ?? []
        self.ext_pack_sint32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "extPackSint32", "ext_pack_sint32") ?? []
        self.ext_pack_fixed32 = try container.decodeFirstIfPresent([UInt32].self, forKeys: "extPackFixed32", "ext_pack_fixed32") ?? []
        self.ext_pack_sfixed32 = try container.decodeFirstIfPresent([Int32].self, forKeys: "extPackSfixed32", "ext_pack_sfixed32") ?? []
        self.ext_pack_int64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "extPackInt64", "ext_pack_int64")?.wrappedValue ?? []
        self.ext_pack_uint64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "extPackUint64", "ext_pack_uint64")?.wrappedValue ?? []
        self.ext_pack_sint64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "extPackSint64", "ext_pack_sint64")?.wrappedValue ?? []
        self.ext_pack_fixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[UInt64]>.self, forKeys: "extPackFixed64", "ext_pack_fixed64")?.wrappedValue ?? []
        self.ext_pack_sfixed64 = try container.decodeFirstIfPresent(StringEncodedValues<[Int64]>.self, forKeys: "extPackSfixed64", "ext_pack_sfixed64")?.wrappedValue ?? []
        self.ext_pack_bool = try container.decodeFirstIfPresent([Bool].self, forKeys: "extPackBool", "ext_pack_bool") ?? []
        self.ext_pack_float = try container.decodeFirstIfPresent([Float].self, forKeys: "extPackFloat", "ext_pack_float") ?? []
        self.ext_pack_double = try container.decodeFirstIfPresent([Double].self, forKeys: "extPackDouble", "ext_pack_double") ?? []
        self.ext_pack_nested_enum = try container.decodeFirstIfPresent([AllTypes.NestedEnum].self, forKeys: "extPackNestedEnum", "ext_pack_nested_enum") ?? []
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.opt_int32 != nil {
            try container.encode(self.opt_int32, forKey: preferCamelCase ? "optInt32" : "opt_int32")
        }
        if includeDefaults || self.opt_uint32 != nil {
            try container.encode(self.opt_uint32, forKey: preferCamelCase ? "optUint32" : "opt_uint32")
        }
        if includeDefaults || self.opt_sint32 != nil {
            try container.encode(self.opt_sint32, forKey: preferCamelCase ? "optSint32" : "opt_sint32")
        }
        if includeDefaults || self.opt_fixed32 != nil {
            try container.encode(self.opt_fixed32, forKey: preferCamelCase ? "optFixed32" : "opt_fixed32")
        }
        if includeDefaults || self.opt_sfixed32 != nil {
            try container.encode(self.opt_sfixed32, forKey: preferCamelCase ? "optSfixed32" : "opt_sfixed32")
        }
        if includeDefaults || self.opt_int64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.opt_int64), forKey: preferCamelCase ? "optInt64" : "opt_int64")
        }
        if includeDefaults || self.opt_uint64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.opt_uint64), forKey: preferCamelCase ? "optUint64" : "opt_uint64")
        }
        if includeDefaults || self.opt_sint64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.opt_sint64), forKey: preferCamelCase ? "optSint64" : "opt_sint64")
        }
        if includeDefaults || self.opt_fixed64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.opt_fixed64), forKey: preferCamelCase ? "optFixed64" : "opt_fixed64")
        }
        if includeDefaults || self.opt_sfixed64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.opt_sfixed64), forKey: preferCamelCase ? "optSfixed64" : "opt_sfixed64")
        }
        if includeDefaults || self.opt_bool != nil {
            try container.encode(self.opt_bool, forKey: preferCamelCase ? "optBool" : "opt_bool")
        }
        if includeDefaults || self.opt_float != nil {
            try container.encode(self.opt_float, forKey: preferCamelCase ? "optFloat" : "opt_float")
        }
        if includeDefaults || self.opt_double != nil {
            try container.encode(self.opt_double, forKey: preferCamelCase ? "optDouble" : "opt_double")
        }
        if includeDefaults || self.opt_string != nil {
            try container.encode(self.opt_string, forKey: preferCamelCase ? "optString" : "opt_string")
        }
        if includeDefaults || self.opt_bytes != nil {
            try container.encode(StringEncoded(wrappedValue: self.opt_bytes), forKey: preferCamelCase ? "optBytes" : "opt_bytes")
        }
        if includeDefaults || self.opt_nested_enum != nil {
            try container.encode(self.opt_nested_enum, forKey: preferCamelCase ? "optNestedEnum" : "opt_nested_enum")
        }
        if includeDefaults || self.opt_nested_message != nil {
            try container.encode(self.opt_nested_message, forKey: preferCamelCase ? "optNestedMessage" : "opt_nested_message")
        }
        try container.encode(self.req_int32, forKey: preferCamelCase ? "reqInt32" : "req_int32")
        try container.encode(self.req_uint32, forKey: preferCamelCase ? "reqUint32" : "req_uint32")
        try container.encode(self.req_sint32, forKey: preferCamelCase ? "reqSint32" : "req_sint32")
        try container.encode(self.req_fixed32, forKey: preferCamelCase ? "reqFixed32" : "req_fixed32")
        try container.encode(self.req_sfixed32, forKey: preferCamelCase ? "reqSfixed32" : "req_sfixed32")
        try container.encode(StringEncoded(wrappedValue: self.req_int64), forKey: preferCamelCase ? "reqInt64" : "req_int64")
        try container.encode(StringEncoded(wrappedValue: self.req_uint64), forKey: preferCamelCase ? "reqUint64" : "req_uint64")
        try container.encode(StringEncoded(wrappedValue: self.req_sint64), forKey: preferCamelCase ? "reqSint64" : "req_sint64")
        try container.encode(StringEncoded(wrappedValue: self.req_fixed64), forKey: preferCamelCase ? "reqFixed64" : "req_fixed64")
        try container.encode(StringEncoded(wrappedValue: self.req_sfixed64), forKey: preferCamelCase ? "reqSfixed64" : "req_sfixed64")
        try container.encode(self.req_bool, forKey: preferCamelCase ? "reqBool" : "req_bool")
        try container.encode(self.req_float, forKey: preferCamelCase ? "reqFloat" : "req_float")
        try container.encode(self.req_double, forKey: preferCamelCase ? "reqDouble" : "req_double")
        try container.encode(self.req_string, forKey: preferCamelCase ? "reqString" : "req_string")
        try container.encode(StringEncoded(wrappedValue: self.req_bytes), forKey: preferCamelCase ? "reqBytes" : "req_bytes")
        try container.encode(self.req_nested_enum, forKey: preferCamelCase ? "reqNestedEnum" : "req_nested_enum")
        try container.encode(self.req_nested_message, forKey: preferCamelCase ? "reqNestedMessage" : "req_nested_message")
        if includeDefaults || !self.rep_int32.isEmpty {
            try container.encode(self.rep_int32, forKey: preferCamelCase ? "repInt32" : "rep_int32")
        }
        if includeDefaults || !self.rep_uint32.isEmpty {
            try container.encode(self.rep_uint32, forKey: preferCamelCase ? "repUint32" : "rep_uint32")
        }
        if includeDefaults || !self.rep_sint32.isEmpty {
            try container.encode(self.rep_sint32, forKey: preferCamelCase ? "repSint32" : "rep_sint32")
        }
        if includeDefaults || !self.rep_fixed32.isEmpty {
            try container.encode(self.rep_fixed32, forKey: preferCamelCase ? "repFixed32" : "rep_fixed32")
        }
        if includeDefaults || !self.rep_sfixed32.isEmpty {
            try container.encode(self.rep_sfixed32, forKey: preferCamelCase ? "repSfixed32" : "rep_sfixed32")
        }
        if includeDefaults || !self.rep_int64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.rep_int64), forKey: preferCamelCase ? "repInt64" : "rep_int64")
        }
        if includeDefaults || !self.rep_uint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.rep_uint64), forKey: preferCamelCase ? "repUint64" : "rep_uint64")
        }
        if includeDefaults || !self.rep_sint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.rep_sint64), forKey: preferCamelCase ? "repSint64" : "rep_sint64")
        }
        if includeDefaults || !self.rep_fixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.rep_fixed64), forKey: preferCamelCase ? "repFixed64" : "rep_fixed64")
        }
        if includeDefaults || !self.rep_sfixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.rep_sfixed64), forKey: preferCamelCase ? "repSfixed64" : "rep_sfixed64")
        }
        if includeDefaults || !self.rep_bool.isEmpty {
            try container.encode(self.rep_bool, forKey: preferCamelCase ? "repBool" : "rep_bool")
        }
        if includeDefaults || !self.rep_float.isEmpty {
            try container.encode(self.rep_float, forKey: preferCamelCase ? "repFloat" : "rep_float")
        }
        if includeDefaults || !self.rep_double.isEmpty {
            try container.encode(self.rep_double, forKey: preferCamelCase ? "repDouble" : "rep_double")
        }
        if includeDefaults || !self.rep_string.isEmpty {
            try container.encode(self.rep_string, forKey: preferCamelCase ? "repString" : "rep_string")
        }
        if includeDefaults || !self.rep_bytes.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.rep_bytes), forKey: preferCamelCase ? "repBytes" : "rep_bytes")
        }
        if includeDefaults || !self.rep_nested_enum.isEmpty {
            try container.encode(self.rep_nested_enum, forKey: preferCamelCase ? "repNestedEnum" : "rep_nested_enum")
        }
        if includeDefaults || !self.rep_nested_message.isEmpty {
            try container.encode(self.rep_nested_message, forKey: preferCamelCase ? "repNestedMessage" : "rep_nested_message")
        }
        if includeDefaults || !self.pack_int32.isEmpty {
            try container.encode(self.pack_int32, forKey: preferCamelCase ? "packInt32" : "pack_int32")
        }
        if includeDefaults || !self.pack_uint32.isEmpty {
            try container.encode(self.pack_uint32, forKey: preferCamelCase ? "packUint32" : "pack_uint32")
        }
        if includeDefaults || !self.pack_sint32.isEmpty {
            try container.encode(self.pack_sint32, forKey: preferCamelCase ? "packSint32" : "pack_sint32")
        }
        if includeDefaults || !self.pack_fixed32.isEmpty {
            try container.encode(self.pack_fixed32, forKey: preferCamelCase ? "packFixed32" : "pack_fixed32")
        }
        if includeDefaults || !self.pack_sfixed32.isEmpty {
            try container.encode(self.pack_sfixed32, forKey: preferCamelCase ? "packSfixed32" : "pack_sfixed32")
        }
        if includeDefaults || !self.pack_int64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.pack_int64), forKey: preferCamelCase ? "packInt64" : "pack_int64")
        }
        if includeDefaults || !self.pack_uint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.pack_uint64), forKey: preferCamelCase ? "packUint64" : "pack_uint64")
        }
        if includeDefaults || !self.pack_sint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.pack_sint64), forKey: preferCamelCase ? "packSint64" : "pack_sint64")
        }
        if includeDefaults || !self.pack_fixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.pack_fixed64), forKey: preferCamelCase ? "packFixed64" : "pack_fixed64")
        }
        if includeDefaults || !self.pack_sfixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.pack_sfixed64), forKey: preferCamelCase ? "packSfixed64" : "pack_sfixed64")
        }
        if includeDefaults || !self.pack_bool.isEmpty {
            try container.encode(self.pack_bool, forKey: preferCamelCase ? "packBool" : "pack_bool")
        }
        if includeDefaults || !self.pack_float.isEmpty {
            try container.encode(self.pack_float, forKey: preferCamelCase ? "packFloat" : "pack_float")
        }
        if includeDefaults || !self.pack_double.isEmpty {
            try container.encode(self.pack_double, forKey: preferCamelCase ? "packDouble" : "pack_double")
        }
        if includeDefaults || !self.pack_nested_enum.isEmpty {
            try container.encode(self.pack_nested_enum, forKey: preferCamelCase ? "packNestedEnum" : "pack_nested_enum")
        }
        if includeDefaults || self.default_int32 != nil {
            try container.encode(self.default_int32, forKey: preferCamelCase ? "defaultInt32" : "default_int32")
        }
        if includeDefaults || self.default_uint32 != nil {
            try container.encode(self.default_uint32, forKey: preferCamelCase ? "defaultUint32" : "default_uint32")
        }
        if includeDefaults || self.default_sint32 != nil {
            try container.encode(self.default_sint32, forKey: preferCamelCase ? "defaultSint32" : "default_sint32")
        }
        if includeDefaults || self.default_fixed32 != nil {
            try container.encode(self.default_fixed32, forKey: preferCamelCase ? "defaultFixed32" : "default_fixed32")
        }
        if includeDefaults || self.default_sfixed32 != nil {
            try container.encode(self.default_sfixed32, forKey: preferCamelCase ? "defaultSfixed32" : "default_sfixed32")
        }
        if includeDefaults || self.default_int64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.default_int64), forKey: preferCamelCase ? "defaultInt64" : "default_int64")
        }
        if includeDefaults || self.default_uint64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.default_uint64), forKey: preferCamelCase ? "defaultUint64" : "default_uint64")
        }
        if includeDefaults || self.default_sint64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.default_sint64), forKey: preferCamelCase ? "defaultSint64" : "default_sint64")
        }
        if includeDefaults || self.default_fixed64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.default_fixed64), forKey: preferCamelCase ? "defaultFixed64" : "default_fixed64")
        }
        if includeDefaults || self.default_sfixed64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.default_sfixed64), forKey: preferCamelCase ? "defaultSfixed64" : "default_sfixed64")
        }
        if includeDefaults || self.default_bool != nil {
            try container.encode(self.default_bool, forKey: preferCamelCase ? "defaultBool" : "default_bool")
        }
        if includeDefaults || self.default_float != nil {
            try container.encode(self.default_float, forKey: preferCamelCase ? "defaultFloat" : "default_float")
        }
        if includeDefaults || self.default_double != nil {
            try container.encode(self.default_double, forKey: preferCamelCase ? "defaultDouble" : "default_double")
        }
        if includeDefaults || self.default_string != nil {
            try container.encode(self.default_string, forKey: preferCamelCase ? "defaultString" : "default_string")
        }
        if includeDefaults || self.default_bytes != nil {
            try container.encode(StringEncoded(wrappedValue: self.default_bytes), forKey: preferCamelCase ? "defaultBytes" : "default_bytes")
        }
        if includeDefaults || self.default_nested_enum != nil {
            try container.encode(self.default_nested_enum, forKey: preferCamelCase ? "defaultNestedEnum" : "default_nested_enum")
        }
        if includeDefaults || !self.map_int32_int32.isEmpty {
            try container.encode(ProtoMap(wrappedValue: self.map_int32_int32), forKey: preferCamelCase ? "mapInt32Int32" : "map_int32_int32")
        }
        if includeDefaults || !self.map_string_string.isEmpty {
            try container.encode(ProtoMap(wrappedValue: self.map_string_string), forKey: preferCamelCase ? "mapStringString" : "map_string_string")
        }
        if includeDefaults || !self.map_string_message.isEmpty {
            try container.encode(ProtoMap(wrappedValue: self.map_string_message), forKey: preferCamelCase ? "mapStringMessage" : "map_string_message")
        }
        if includeDefaults || !self.map_string_enum.isEmpty {
            try container.encode(ProtoMapEnumValues(wrappedValue: self.map_string_enum), forKey: preferCamelCase ? "mapStringEnum" : "map_string_enum")
        }
        if includeDefaults || self.ext_opt_int32 != nil {
            try container.encode(self.ext_opt_int32, forKey: preferCamelCase ? "extOptInt32" : "ext_opt_int32")
        }
        if includeDefaults || self.ext_opt_uint32 != nil {
            try container.encode(self.ext_opt_uint32, forKey: preferCamelCase ? "extOptUint32" : "ext_opt_uint32")
        }
        if includeDefaults || self.ext_opt_sint32 != nil {
            try container.encode(self.ext_opt_sint32, forKey: preferCamelCase ? "extOptSint32" : "ext_opt_sint32")
        }
        if includeDefaults || self.ext_opt_fixed32 != nil {
            try container.encode(self.ext_opt_fixed32, forKey: preferCamelCase ? "extOptFixed32" : "ext_opt_fixed32")
        }
        if includeDefaults || self.ext_opt_sfixed32 != nil {
            try container.encode(self.ext_opt_sfixed32, forKey: preferCamelCase ? "extOptSfixed32" : "ext_opt_sfixed32")
        }
        if includeDefaults || self.ext_opt_int64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.ext_opt_int64), forKey: preferCamelCase ? "extOptInt64" : "ext_opt_int64")
        }
        if includeDefaults || self.ext_opt_uint64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.ext_opt_uint64), forKey: preferCamelCase ? "extOptUint64" : "ext_opt_uint64")
        }
        if includeDefaults || self.ext_opt_sint64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.ext_opt_sint64), forKey: preferCamelCase ? "extOptSint64" : "ext_opt_sint64")
        }
        if includeDefaults || self.ext_opt_fixed64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.ext_opt_fixed64), forKey: preferCamelCase ? "extOptFixed64" : "ext_opt_fixed64")
        }
        if includeDefaults || self.ext_opt_sfixed64 != nil {
            try container.encode(StringEncoded(wrappedValue: self.ext_opt_sfixed64), forKey: preferCamelCase ? "extOptSfixed64" : "ext_opt_sfixed64")
        }
        if includeDefaults || self.ext_opt_bool != nil {
            try container.encode(self.ext_opt_bool, forKey: preferCamelCase ? "extOptBool" : "ext_opt_bool")
        }
        if includeDefaults || self.ext_opt_float != nil {
            try container.encode(self.ext_opt_float, forKey: preferCamelCase ? "extOptFloat" : "ext_opt_float")
        }
        if includeDefaults || self.ext_opt_double != nil {
            try container.encode(self.ext_opt_double, forKey: preferCamelCase ? "extOptDouble" : "ext_opt_double")
        }
        if includeDefaults || self.ext_opt_string != nil {
            try container.encode(self.ext_opt_string, forKey: preferCamelCase ? "extOptString" : "ext_opt_string")
        }
        if includeDefaults || self.ext_opt_bytes != nil {
            try container.encode(StringEncoded(wrappedValue: self.ext_opt_bytes), forKey: preferCamelCase ? "extOptBytes" : "ext_opt_bytes")
        }
        if includeDefaults || self.ext_opt_nested_enum != nil {
            try container.encode(self.ext_opt_nested_enum, forKey: preferCamelCase ? "extOptNestedEnum" : "ext_opt_nested_enum")
        }
        if includeDefaults || self.ext_opt_nested_message != nil {
            try container.encode(self.ext_opt_nested_message, forKey: preferCamelCase ? "extOptNestedMessage" : "ext_opt_nested_message")
        }
        if includeDefaults || !self.ext_rep_int32.isEmpty {
            try container.encode(self.ext_rep_int32, forKey: preferCamelCase ? "extRepInt32" : "ext_rep_int32")
        }
        if includeDefaults || !self.ext_rep_uint32.isEmpty {
            try container.encode(self.ext_rep_uint32, forKey: preferCamelCase ? "extRepUint32" : "ext_rep_uint32")
        }
        if includeDefaults || !self.ext_rep_sint32.isEmpty {
            try container.encode(self.ext_rep_sint32, forKey: preferCamelCase ? "extRepSint32" : "ext_rep_sint32")
        }
        if includeDefaults || !self.ext_rep_fixed32.isEmpty {
            try container.encode(self.ext_rep_fixed32, forKey: preferCamelCase ? "extRepFixed32" : "ext_rep_fixed32")
        }
        if includeDefaults || !self.ext_rep_sfixed32.isEmpty {
            try container.encode(self.ext_rep_sfixed32, forKey: preferCamelCase ? "extRepSfixed32" : "ext_rep_sfixed32")
        }
        if includeDefaults || !self.ext_rep_int64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_rep_int64), forKey: preferCamelCase ? "extRepInt64" : "ext_rep_int64")
        }
        if includeDefaults || !self.ext_rep_uint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_rep_uint64), forKey: preferCamelCase ? "extRepUint64" : "ext_rep_uint64")
        }
        if includeDefaults || !self.ext_rep_sint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_rep_sint64), forKey: preferCamelCase ? "extRepSint64" : "ext_rep_sint64")
        }
        if includeDefaults || !self.ext_rep_fixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_rep_fixed64), forKey: preferCamelCase ? "extRepFixed64" : "ext_rep_fixed64")
        }
        if includeDefaults || !self.ext_rep_sfixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_rep_sfixed64), forKey: preferCamelCase ? "extRepSfixed64" : "ext_rep_sfixed64")
        }
        if includeDefaults || !self.ext_rep_bool.isEmpty {
            try container.encode(self.ext_rep_bool, forKey: preferCamelCase ? "extRepBool" : "ext_rep_bool")
        }
        if includeDefaults || !self.ext_rep_float.isEmpty {
            try container.encode(self.ext_rep_float, forKey: preferCamelCase ? "extRepFloat" : "ext_rep_float")
        }
        if includeDefaults || !self.ext_rep_double.isEmpty {
            try container.encode(self.ext_rep_double, forKey: preferCamelCase ? "extRepDouble" : "ext_rep_double")
        }
        if includeDefaults || !self.ext_rep_string.isEmpty {
            try container.encode(self.ext_rep_string, forKey: preferCamelCase ? "extRepString" : "ext_rep_string")
        }
        if includeDefaults || !self.ext_rep_bytes.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_rep_bytes), forKey: preferCamelCase ? "extRepBytes" : "ext_rep_bytes")
        }
        if includeDefaults || !self.ext_rep_nested_enum.isEmpty {
            try container.encode(self.ext_rep_nested_enum, forKey: preferCamelCase ? "extRepNestedEnum" : "ext_rep_nested_enum")
        }
        if includeDefaults || !self.ext_rep_nested_message.isEmpty {
            try container.encode(self.ext_rep_nested_message, forKey: preferCamelCase ? "extRepNestedMessage" : "ext_rep_nested_message")
        }
        if includeDefaults || !self.ext_pack_int32.isEmpty {
            try container.encode(self.ext_pack_int32, forKey: preferCamelCase ? "extPackInt32" : "ext_pack_int32")
        }
        if includeDefaults || !self.ext_pack_uint32.isEmpty {
            try container.encode(self.ext_pack_uint32, forKey: preferCamelCase ? "extPackUint32" : "ext_pack_uint32")
        }
        if includeDefaults || !self.ext_pack_sint32.isEmpty {
            try container.encode(self.ext_pack_sint32, forKey: preferCamelCase ? "extPackSint32" : "ext_pack_sint32")
        }
        if includeDefaults || !self.ext_pack_fixed32.isEmpty {
            try container.encode(self.ext_pack_fixed32, forKey: preferCamelCase ? "extPackFixed32" : "ext_pack_fixed32")
        }
        if includeDefaults || !self.ext_pack_sfixed32.isEmpty {
            try container.encode(self.ext_pack_sfixed32, forKey: preferCamelCase ? "extPackSfixed32" : "ext_pack_sfixed32")
        }
        if includeDefaults || !self.ext_pack_int64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_pack_int64), forKey: preferCamelCase ? "extPackInt64" : "ext_pack_int64")
        }
        if includeDefaults || !self.ext_pack_uint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_pack_uint64), forKey: preferCamelCase ? "extPackUint64" : "ext_pack_uint64")
        }
        if includeDefaults || !self.ext_pack_sint64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_pack_sint64), forKey: preferCamelCase ? "extPackSint64" : "ext_pack_sint64")
        }
        if includeDefaults || !self.ext_pack_fixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_pack_fixed64), forKey: preferCamelCase ? "extPackFixed64" : "ext_pack_fixed64")
        }
        if includeDefaults || !self.ext_pack_sfixed64.isEmpty {
            try container.encode(StringEncodedValues(wrappedValue: self.ext_pack_sfixed64), forKey: preferCamelCase ? "extPackSfixed64" : "ext_pack_sfixed64")
        }
        if includeDefaults || !self.ext_pack_bool.isEmpty {
            try container.encode(self.ext_pack_bool, forKey: preferCamelCase ? "extPackBool" : "ext_pack_bool")
        }
        if includeDefaults || !self.ext_pack_float.isEmpty {
            try container.encode(self.ext_pack_float, forKey: preferCamelCase ? "extPackFloat" : "ext_pack_float")
        }
        if includeDefaults || !self.ext_pack_double.isEmpty {
            try container.encode(self.ext_pack_double, forKey: preferCamelCase ? "extPackDouble" : "ext_pack_double")
        }
        if includeDefaults || !self.ext_pack_nested_enum.isEmpty {
            try container.encode(self.ext_pack_nested_enum, forKey: preferCamelCase ? "extPackNestedEnum" : "ext_pack_nested_enum")
        }
    }
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension _AllTypes : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension _AllTypes : Hashable {
}
#endif

#if swift(>=5.5)
extension _AllTypes : Sendable {
}
#endif
