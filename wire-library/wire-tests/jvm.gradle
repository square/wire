apply plugin: 'java-library'

kotlin.targets.matching { it.platformType.name == 'jvm' }.all { target ->
  target.project.sourceSets.test.java.srcDirs += 'src/jvmTest/proto-java'
  target.project.sourceSets {
    javaTest.java.srcDirs += 'src/jvmJavaTest/proto-java'
    tasks.create('jvmJavaTest', Test) {
      classpath = sourceSets.javaTest.runtimeClasspath
      testClassesDirs = sourceSets.javaTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJavaTest

    javaNoOptionsTest.java.srcDirs += 'src/jvmJavaNoOptionsTest/proto-java'
    tasks.create('jvmJavaNoOptionsTest', Test) {
      classpath = sourceSets.javaNoOptionsTest.runtimeClasspath
      testClassesDirs = sourceSets.javaNoOptionsTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJavaNoOptionsTest

    javaCompactTest.java.srcDirs += 'src/jvmJavaCompactTest/proto-java'
    tasks.create('jvmJavaCompactTest', Test) {
      classpath = sourceSets.javaCompactTest.runtimeClasspath
      testClassesDirs = sourceSets.javaCompactTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJavaCompactTest

    javaPrunedTest.java.srcDirs += 'src/jvmJavaPrunedTest/proto-java'
    tasks.create('jvmJavaPrunedTest', Test) {
      classpath = sourceSets.javaPrunedTest.runtimeClasspath
      testClassesDirs = sourceSets.javaPrunedTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJavaPrunedTest

    javaAndroidTest.java.srcDirs += 'src/jvmJavaAndroidTest/proto-java'
    tasks.create('jvmJavaAndroidTest', Test) {
      classpath = sourceSets.javaAndroidTest.runtimeClasspath
      testClassesDirs = sourceSets.javaAndroidTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJavaAndroidTest

    javaAndroidCompactTest.java.srcDirs += 'src/jvmJavaAndroidCompactTest/proto-java'
    tasks.create('jvmJavaAndroidCompactTest', Test) {
      classpath = sourceSets.javaAndroidCompactTest.runtimeClasspath
      testClassesDirs = sourceSets.javaAndroidCompactTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJavaAndroidCompactTest

    jsonTest.java.srcDirs += 'src/jvmJsonTest/proto-java'
    jsonTest.java.srcDirs += 'src/jvmJsonTest/proto-kotlin'
    tasks.create('jvmJsonTest', Test) {
      classpath = sourceSets.jsonTest.runtimeClasspath
      testClassesDirs = sourceSets.jsonTest.output.classesDirs
    }
    jvmTest.dependsOn jvmJsonTest

    dependencies {
      javaTestImplementation project(':wire-runtime')
      javaNoOptionsTestImplementation project(':wire-runtime')
      javaCompactTestImplementation project(':wire-runtime')
      javaPrunedTestImplementation project(':wire-runtime')
      javaAndroidTestImplementation project(':wire-runtime')
      javaAndroidCompactTestImplementation project(':wire-runtime')
      jsonTestImplementation project(':wire-runtime')

      javaAndroidTestCompileOnly deps.android
      javaAndroidCompactTestCompileOnly deps.android
      javaAndroidTestCompileOnly deps.androidx.annotations
      javaAndroidCompactTestCompileOnly deps.androidx.annotations

      javaTestImplementation deps.kotlin.test.junit
      javaTestImplementation deps.assertj
      javaTestImplementation deps.jimfs
      jsonTestImplementation project(':wire-moshi-adapter')
      jsonTestImplementation project(':wire-gson-support')
      jsonTestImplementation project(':wire-test-utils')
      jsonTestImplementation deps.kotlin.test.junit
      jsonTestImplementation deps.assertj
      jsonTestImplementation deps.jimfs
    }
  }

  tasks['jar'].configure {
    manifest {
      attributes('Automatic-Module-Name': 'wire-tests')
    }
  }
}
