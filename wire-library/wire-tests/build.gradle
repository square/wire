apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

kotlin {
  jvm {
    compilations.create('kotlinInteropTest') {
      defaultSourceSet {
        kotlin.srcDirs += 'src/jvmKotlinInteropTest/proto-kotlin'
        dependencies {
          implementation(compilations.main.compileDependencyFiles)
          implementation deps.kotlin.test.junit
          implementation deps.assertj
        }
      }
      tasks.create('jvmKotlinInteropTest', Test) {
        classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs
        testClassesDirs = output.classesDirs
      }
      jvmTest.dependsOn jvmKotlinInteropTest
    }
    compilations.create('kotlinAndroidTest') {
      defaultSourceSet {
        kotlin.srcDirs += 'src/jvmKotlinAndroidTest/proto-kotlin'
        dependencies {
          implementation(compilations.main.compileDependencyFiles)
          compileOnly deps.android
          implementation deps.kotlin.test.junit
          implementation deps.assertj
        }
      }
      tasks.create('jvmKotlinAndroidTest', Test) {
        classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs
        testClassesDirs = output.classesDirs
      }
      jvmTest.dependsOn jvmKotlinAndroidTest
    }
    // FIXME(egor): withJava() has to be declared after all custom compilations.
    // See https://youtrack.jetbrains.com/issue/KT-41506.
    withJava()
  }
  if (kmpJsEnabled) {
    js {
      configure([compilations.main, compilations.test]) {
        tasks.getByName(compileKotlinTaskName).kotlinOptions {
          moduleKind = 'umd'
          sourceMap = true
          metaInfo = true
        }
      }
      nodejs()
    }
  }
  if (kmpNativeEnabled) {
    iosX64()
    iosArm64()
    // Required to generate tests tasks: https://youtrack.jetbrains.com/issue/KT-26547
    linuxX64()
    macosX64()
  }
  sourceSets {
    commonMain {
      dependencies {
        api project(':wire-runtime')
        api project(':wire-grpc-client')
        implementation deps.kotlin.serializationJson
      }
    }
    commonTest {
      kotlin.srcDirs += 'src/commonTest/proto-kotlin'
      kotlin.srcDirs += 'src/commonTest/proto-kotlin-serialization'
      dependencies {
        implementation project(':wire-kotlin-serialization')
        implementation deps.kotlin.test.common
        implementation deps.kotlin.test.annotations
      }
    }
    jvmTest {
      kotlin.srcDirs += 'src/jvmTest/proto-kotlin'
      kotlin.srcDirs += 'src/jvmTest/proto-java'
      dependencies {
        implementation project(':wire-test-utils')
        implementation deps.assertj
        implementation deps.kotlin.test.junit
        implementation deps.jimfs
      }
    }
    jsTest {
      dependencies {
        implementation deps.kotlin.test.js
      }
    }
    nativeMain {
      dependsOn commonMain
    }
    nativeTest {
      dependsOn commonTest
    }
    darwinTest {
      dependsOn commonTest
    }

    configure([iosX64Main, iosArm64Main, linuxX64Main, macosX64Main]) {
      dependsOn nativeMain
    }
    configure([iosX64Test, iosArm64Test, linuxX64Test, macosX64Test]) {
      dependsOn nativeTest
    }
    configure([iosX64Test, iosArm64Test, macosX64Test]) {
      dependsOn darwinTest
    }
    all {
      languageSettings {
        useExperimentalAnnotation 'kotlin.Experimental'
      }
    }
  }
}

apply from: 'jvm.gradle'
