// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.proto3.MapTypes in map_types.proto
package squareup.proto3

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

class MapTypes(
  map_string_string: Map<String, String> = emptyMap(),
  map_int32_int32: Map<Int, Int> = emptyMap(),
  map_sint32_sint32: Map<Int, Int> = emptyMap(),
  map_sfixed32_sfixed32: Map<Int, Int> = emptyMap(),
  map_fixed32_fixed32: Map<Int, Int> = emptyMap(),
  map_uint32_uint32: Map<Int, Int> = emptyMap(),
  map_int64_int64: Map<Long, Long> = emptyMap(),
  map_sfixed64_sfixed64: Map<Long, Long> = emptyMap(),
  map_sint64_sint64: Map<Long, Long> = emptyMap(),
  map_fixed64_fixed64: Map<Long, Long> = emptyMap(),
  map_uint64_uint64: Map<Long, Long> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<MapTypes, MapTypes.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "mapStringString"
  )
  @JvmField
  val map_string_string: Map<String, String> = immutableCopyOf("map_string_string",
      map_string_string)

  @field:WireField(
    tag = 2,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    jsonName = "mapInt32Int32"
  )
  @JvmField
  val map_int32_int32: Map<Int, Int> = immutableCopyOf("map_int32_int32", map_int32_int32)

  @field:WireField(
    tag = 3,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SINT32",
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    jsonName = "mapSint32Sint32"
  )
  @JvmField
  val map_sint32_sint32: Map<Int, Int> = immutableCopyOf("map_sint32_sint32", map_sint32_sint32)

  @field:WireField(
    tag = 4,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    jsonName = "mapSfixed32Sfixed32"
  )
  @JvmField
  val map_sfixed32_sfixed32: Map<Int, Int> = immutableCopyOf("map_sfixed32_sfixed32",
      map_sfixed32_sfixed32)

  @field:WireField(
    tag = 5,
    keyAdapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    jsonName = "mapFixed32Fixed32"
  )
  @JvmField
  val map_fixed32_fixed32: Map<Int, Int> = immutableCopyOf("map_fixed32_fixed32",
      map_fixed32_fixed32)

  @field:WireField(
    tag = 6,
    keyAdapter = "com.squareup.wire.ProtoAdapter#UINT32",
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    jsonName = "mapUint32Uint32"
  )
  @JvmField
  val map_uint32_uint32: Map<Int, Int> = immutableCopyOf("map_uint32_uint32", map_uint32_uint32)

  @field:WireField(
    tag = 7,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT64",
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    jsonName = "mapInt64Int64"
  )
  @JvmField
  val map_int64_int64: Map<Long, Long> = immutableCopyOf("map_int64_int64", map_int64_int64)

  @field:WireField(
    tag = 8,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    jsonName = "mapSfixed64Sfixed64"
  )
  @JvmField
  val map_sfixed64_sfixed64: Map<Long, Long> = immutableCopyOf("map_sfixed64_sfixed64",
      map_sfixed64_sfixed64)

  @field:WireField(
    tag = 9,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SINT64",
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    jsonName = "mapSint64Sint64"
  )
  @JvmField
  val map_sint64_sint64: Map<Long, Long> = immutableCopyOf("map_sint64_sint64", map_sint64_sint64)

  @field:WireField(
    tag = 10,
    keyAdapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    jsonName = "mapFixed64Fixed64"
  )
  @JvmField
  val map_fixed64_fixed64: Map<Long, Long> = immutableCopyOf("map_fixed64_fixed64",
      map_fixed64_fixed64)

  @field:WireField(
    tag = 11,
    keyAdapter = "com.squareup.wire.ProtoAdapter#UINT64",
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    jsonName = "mapUint64Uint64"
  )
  @JvmField
  val map_uint64_uint64: Map<Long, Long> = immutableCopyOf("map_uint64_uint64", map_uint64_uint64)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.map_string_string = map_string_string
    builder.map_int32_int32 = map_int32_int32
    builder.map_sint32_sint32 = map_sint32_sint32
    builder.map_sfixed32_sfixed32 = map_sfixed32_sfixed32
    builder.map_fixed32_fixed32 = map_fixed32_fixed32
    builder.map_uint32_uint32 = map_uint32_uint32
    builder.map_int64_int64 = map_int64_int64
    builder.map_sfixed64_sfixed64 = map_sfixed64_sfixed64
    builder.map_sint64_sint64 = map_sint64_sint64
    builder.map_fixed64_fixed64 = map_fixed64_fixed64
    builder.map_uint64_uint64 = map_uint64_uint64
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MapTypes) return false
    if (unknownFields != other.unknownFields) return false
    if (map_string_string != other.map_string_string) return false
    if (map_int32_int32 != other.map_int32_int32) return false
    if (map_sint32_sint32 != other.map_sint32_sint32) return false
    if (map_sfixed32_sfixed32 != other.map_sfixed32_sfixed32) return false
    if (map_fixed32_fixed32 != other.map_fixed32_fixed32) return false
    if (map_uint32_uint32 != other.map_uint32_uint32) return false
    if (map_int64_int64 != other.map_int64_int64) return false
    if (map_sfixed64_sfixed64 != other.map_sfixed64_sfixed64) return false
    if (map_sint64_sint64 != other.map_sint64_sint64) return false
    if (map_fixed64_fixed64 != other.map_fixed64_fixed64) return false
    if (map_uint64_uint64 != other.map_uint64_uint64) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + map_string_string.hashCode()
      result = result * 37 + map_int32_int32.hashCode()
      result = result * 37 + map_sint32_sint32.hashCode()
      result = result * 37 + map_sfixed32_sfixed32.hashCode()
      result = result * 37 + map_fixed32_fixed32.hashCode()
      result = result * 37 + map_uint32_uint32.hashCode()
      result = result * 37 + map_int64_int64.hashCode()
      result = result * 37 + map_sfixed64_sfixed64.hashCode()
      result = result * 37 + map_sint64_sint64.hashCode()
      result = result * 37 + map_fixed64_fixed64.hashCode()
      result = result * 37 + map_uint64_uint64.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (map_string_string.isNotEmpty()) result += """map_string_string=$map_string_string"""
    if (map_int32_int32.isNotEmpty()) result += """map_int32_int32=$map_int32_int32"""
    if (map_sint32_sint32.isNotEmpty()) result += """map_sint32_sint32=$map_sint32_sint32"""
    if (map_sfixed32_sfixed32.isNotEmpty()) result +=
        """map_sfixed32_sfixed32=$map_sfixed32_sfixed32"""
    if (map_fixed32_fixed32.isNotEmpty()) result += """map_fixed32_fixed32=$map_fixed32_fixed32"""
    if (map_uint32_uint32.isNotEmpty()) result += """map_uint32_uint32=$map_uint32_uint32"""
    if (map_int64_int64.isNotEmpty()) result += """map_int64_int64=$map_int64_int64"""
    if (map_sfixed64_sfixed64.isNotEmpty()) result +=
        """map_sfixed64_sfixed64=$map_sfixed64_sfixed64"""
    if (map_sint64_sint64.isNotEmpty()) result += """map_sint64_sint64=$map_sint64_sint64"""
    if (map_fixed64_fixed64.isNotEmpty()) result += """map_fixed64_fixed64=$map_fixed64_fixed64"""
    if (map_uint64_uint64.isNotEmpty()) result += """map_uint64_uint64=$map_uint64_uint64"""
    return result.joinToString(prefix = "MapTypes{", separator = ", ", postfix = "}")
  }

  fun copy(
    map_string_string: Map<String, String> = this.map_string_string,
    map_int32_int32: Map<Int, Int> = this.map_int32_int32,
    map_sint32_sint32: Map<Int, Int> = this.map_sint32_sint32,
    map_sfixed32_sfixed32: Map<Int, Int> = this.map_sfixed32_sfixed32,
    map_fixed32_fixed32: Map<Int, Int> = this.map_fixed32_fixed32,
    map_uint32_uint32: Map<Int, Int> = this.map_uint32_uint32,
    map_int64_int64: Map<Long, Long> = this.map_int64_int64,
    map_sfixed64_sfixed64: Map<Long, Long> = this.map_sfixed64_sfixed64,
    map_sint64_sint64: Map<Long, Long> = this.map_sint64_sint64,
    map_fixed64_fixed64: Map<Long, Long> = this.map_fixed64_fixed64,
    map_uint64_uint64: Map<Long, Long> = this.map_uint64_uint64,
    unknownFields: ByteString = this.unknownFields
  ): MapTypes = MapTypes(map_string_string, map_int32_int32, map_sint32_sint32,
      map_sfixed32_sfixed32, map_fixed32_fixed32, map_uint32_uint32, map_int64_int64,
      map_sfixed64_sfixed64, map_sint64_sint64, map_fixed64_fixed64, map_uint64_uint64,
      unknownFields)

  class Builder : Message.Builder<MapTypes, Builder>() {
    @JvmField
    var map_string_string: Map<String, String> = emptyMap()

    @JvmField
    var map_int32_int32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_sint32_sint32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_sfixed32_sfixed32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_fixed32_fixed32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_uint32_uint32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_int64_int64: Map<Long, Long> = emptyMap()

    @JvmField
    var map_sfixed64_sfixed64: Map<Long, Long> = emptyMap()

    @JvmField
    var map_sint64_sint64: Map<Long, Long> = emptyMap()

    @JvmField
    var map_fixed64_fixed64: Map<Long, Long> = emptyMap()

    @JvmField
    var map_uint64_uint64: Map<Long, Long> = emptyMap()

    fun map_string_string(map_string_string: Map<String, String>): Builder {
      this.map_string_string = map_string_string
      return this
    }

    fun map_int32_int32(map_int32_int32: Map<Int, Int>): Builder {
      this.map_int32_int32 = map_int32_int32
      return this
    }

    fun map_sint32_sint32(map_sint32_sint32: Map<Int, Int>): Builder {
      this.map_sint32_sint32 = map_sint32_sint32
      return this
    }

    fun map_sfixed32_sfixed32(map_sfixed32_sfixed32: Map<Int, Int>): Builder {
      this.map_sfixed32_sfixed32 = map_sfixed32_sfixed32
      return this
    }

    fun map_fixed32_fixed32(map_fixed32_fixed32: Map<Int, Int>): Builder {
      this.map_fixed32_fixed32 = map_fixed32_fixed32
      return this
    }

    fun map_uint32_uint32(map_uint32_uint32: Map<Int, Int>): Builder {
      this.map_uint32_uint32 = map_uint32_uint32
      return this
    }

    fun map_int64_int64(map_int64_int64: Map<Long, Long>): Builder {
      this.map_int64_int64 = map_int64_int64
      return this
    }

    fun map_sfixed64_sfixed64(map_sfixed64_sfixed64: Map<Long, Long>): Builder {
      this.map_sfixed64_sfixed64 = map_sfixed64_sfixed64
      return this
    }

    fun map_sint64_sint64(map_sint64_sint64: Map<Long, Long>): Builder {
      this.map_sint64_sint64 = map_sint64_sint64
      return this
    }

    fun map_fixed64_fixed64(map_fixed64_fixed64: Map<Long, Long>): Builder {
      this.map_fixed64_fixed64 = map_fixed64_fixed64
      return this
    }

    fun map_uint64_uint64(map_uint64_uint64: Map<Long, Long>): Builder {
      this.map_uint64_uint64 = map_uint64_uint64
      return this
    }

    override fun build(): MapTypes = MapTypes(
      map_string_string = map_string_string,
      map_int32_int32 = map_int32_int32,
      map_sint32_sint32 = map_sint32_sint32,
      map_sfixed32_sfixed32 = map_sfixed32_sfixed32,
      map_fixed32_fixed32 = map_fixed32_fixed32,
      map_uint32_uint32 = map_uint32_uint32,
      map_int64_int64 = map_int64_int64,
      map_sfixed64_sfixed64 = map_sfixed64_sfixed64,
      map_sint64_sint64 = map_sint64_sint64,
      map_fixed64_fixed64 = map_fixed64_fixed64,
      map_uint64_uint64 = map_uint64_uint64,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<MapTypes> = object : ProtoAdapter<MapTypes>(
      FieldEncoding.LENGTH_DELIMITED, 
      MapTypes::class, 
      "type.googleapis.com/squareup.proto3.MapTypes", 
      PROTO_3, 
      null
    ) {
      private val map_string_stringAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      private val map_int32_int32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32) }

      private val map_sint32_sint32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SINT32, ProtoAdapter.SINT32) }

      private val map_sfixed32_sfixed32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SFIXED32, ProtoAdapter.SFIXED32) }

      private val map_fixed32_fixed32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.FIXED32, ProtoAdapter.FIXED32) }

      private val map_uint32_uint32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.UINT32, ProtoAdapter.UINT32) }

      private val map_int64_int64Adapter: ProtoAdapter<Map<Long, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT64, ProtoAdapter.INT64) }

      private val map_sfixed64_sfixed64Adapter: ProtoAdapter<Map<Long, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SFIXED64, ProtoAdapter.SFIXED64) }

      private val map_sint64_sint64Adapter: ProtoAdapter<Map<Long, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SINT64, ProtoAdapter.SINT64) }

      private val map_fixed64_fixed64Adapter: ProtoAdapter<Map<Long, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.FIXED64, ProtoAdapter.FIXED64) }

      private val map_uint64_uint64Adapter: ProtoAdapter<Map<Long, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.UINT64, ProtoAdapter.UINT64) }

      override fun encodedSize(value: MapTypes): Int {
        var size = value.unknownFields.size
        size += map_string_stringAdapter.encodedSizeWithTag(1, value.map_string_string)
        size += map_int32_int32Adapter.encodedSizeWithTag(2, value.map_int32_int32)
        size += map_sint32_sint32Adapter.encodedSizeWithTag(3, value.map_sint32_sint32)
        size += map_sfixed32_sfixed32Adapter.encodedSizeWithTag(4, value.map_sfixed32_sfixed32)
        size += map_fixed32_fixed32Adapter.encodedSizeWithTag(5, value.map_fixed32_fixed32)
        size += map_uint32_uint32Adapter.encodedSizeWithTag(6, value.map_uint32_uint32)
        size += map_int64_int64Adapter.encodedSizeWithTag(7, value.map_int64_int64)
        size += map_sfixed64_sfixed64Adapter.encodedSizeWithTag(8, value.map_sfixed64_sfixed64)
        size += map_sint64_sint64Adapter.encodedSizeWithTag(9, value.map_sint64_sint64)
        size += map_fixed64_fixed64Adapter.encodedSizeWithTag(10, value.map_fixed64_fixed64)
        size += map_uint64_uint64Adapter.encodedSizeWithTag(11, value.map_uint64_uint64)
        return size
      }

      override fun encode(writer: ProtoWriter, value: MapTypes) {
        map_string_stringAdapter.encodeWithTag(writer, 1, value.map_string_string)
        map_int32_int32Adapter.encodeWithTag(writer, 2, value.map_int32_int32)
        map_sint32_sint32Adapter.encodeWithTag(writer, 3, value.map_sint32_sint32)
        map_sfixed32_sfixed32Adapter.encodeWithTag(writer, 4, value.map_sfixed32_sfixed32)
        map_fixed32_fixed32Adapter.encodeWithTag(writer, 5, value.map_fixed32_fixed32)
        map_uint32_uint32Adapter.encodeWithTag(writer, 6, value.map_uint32_uint32)
        map_int64_int64Adapter.encodeWithTag(writer, 7, value.map_int64_int64)
        map_sfixed64_sfixed64Adapter.encodeWithTag(writer, 8, value.map_sfixed64_sfixed64)
        map_sint64_sint64Adapter.encodeWithTag(writer, 9, value.map_sint64_sint64)
        map_fixed64_fixed64Adapter.encodeWithTag(writer, 10, value.map_fixed64_fixed64)
        map_uint64_uint64Adapter.encodeWithTag(writer, 11, value.map_uint64_uint64)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): MapTypes {
        val map_string_string = mutableMapOf<String, String>()
        val map_int32_int32 = mutableMapOf<Int, Int>()
        val map_sint32_sint32 = mutableMapOf<Int, Int>()
        val map_sfixed32_sfixed32 = mutableMapOf<Int, Int>()
        val map_fixed32_fixed32 = mutableMapOf<Int, Int>()
        val map_uint32_uint32 = mutableMapOf<Int, Int>()
        val map_int64_int64 = mutableMapOf<Long, Long>()
        val map_sfixed64_sfixed64 = mutableMapOf<Long, Long>()
        val map_sint64_sint64 = mutableMapOf<Long, Long>()
        val map_fixed64_fixed64 = mutableMapOf<Long, Long>()
        val map_uint64_uint64 = mutableMapOf<Long, Long>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> map_string_string.putAll(map_string_stringAdapter.decode(reader))
            2 -> map_int32_int32.putAll(map_int32_int32Adapter.decode(reader))
            3 -> map_sint32_sint32.putAll(map_sint32_sint32Adapter.decode(reader))
            4 -> map_sfixed32_sfixed32.putAll(map_sfixed32_sfixed32Adapter.decode(reader))
            5 -> map_fixed32_fixed32.putAll(map_fixed32_fixed32Adapter.decode(reader))
            6 -> map_uint32_uint32.putAll(map_uint32_uint32Adapter.decode(reader))
            7 -> map_int64_int64.putAll(map_int64_int64Adapter.decode(reader))
            8 -> map_sfixed64_sfixed64.putAll(map_sfixed64_sfixed64Adapter.decode(reader))
            9 -> map_sint64_sint64.putAll(map_sint64_sint64Adapter.decode(reader))
            10 -> map_fixed64_fixed64.putAll(map_fixed64_fixed64Adapter.decode(reader))
            11 -> map_uint64_uint64.putAll(map_uint64_uint64Adapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return MapTypes(
          map_string_string = map_string_string,
          map_int32_int32 = map_int32_int32,
          map_sint32_sint32 = map_sint32_sint32,
          map_sfixed32_sfixed32 = map_sfixed32_sfixed32,
          map_fixed32_fixed32 = map_fixed32_fixed32,
          map_uint32_uint32 = map_uint32_uint32,
          map_int64_int64 = map_int64_int64,
          map_sfixed64_sfixed64 = map_sfixed64_sfixed64,
          map_sint64_sint64 = map_sint64_sint64,
          map_fixed64_fixed64 = map_fixed64_fixed64,
          map_uint64_uint64 = map_uint64_uint64,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: MapTypes): MapTypes = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
