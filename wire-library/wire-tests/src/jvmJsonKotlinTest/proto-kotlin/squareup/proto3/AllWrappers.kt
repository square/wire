// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.proto3.AllWrappers in all_wrappers.proto
package squareup.proto3

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

class AllWrappers(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "doubleValue"
  )
  @JvmField
  val double_value: Double? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "floatValue"
  )
  @JvmField
  val float_value: Float? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT64_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "int64Value"
  )
  @JvmField
  val int64_value: Long? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "uint64Value"
  )
  @JvmField
  val uint64_value: Long? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "int32Value"
  )
  @JvmField
  val int32_value: Int? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "uint32Value"
  )
  @JvmField
  val uint32_value: Int? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "boolValue"
  )
  @JvmField
  val bool_value: Boolean? = null,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "stringValue"
  )
  @JvmField
  val string_value: String? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES_VALUE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "bytesValue"
  )
  @JvmField
  val bytes_value: ByteString? = null,
  rep_double_value: List<Double?> = emptyList(),
  rep_float_value: List<Float?> = emptyList(),
  rep_int64_value: List<Long?> = emptyList(),
  rep_uint64_value: List<Long?> = emptyList(),
  rep_int32_value: List<Int?> = emptyList(),
  rep_uint32_value: List<Int?> = emptyList(),
  rep_bool_value: List<Boolean?> = emptyList(),
  rep_string_value: List<String?> = emptyList(),
  rep_bytes_value: List<ByteString?> = emptyList(),
  map_int32_double_value: Map<Int, Double?> = emptyMap(),
  map_int32_float_value: Map<Int, Float?> = emptyMap(),
  map_int32_int64_value: Map<Int, Long?> = emptyMap(),
  map_int32_uint64_value: Map<Int, Long?> = emptyMap(),
  map_int32_int32_value: Map<Int, Int?> = emptyMap(),
  map_int32_uint32_value: Map<Int, Int?> = emptyMap(),
  map_int32_bool_value: Map<Int, Boolean?> = emptyMap(),
  map_int32_string_value: Map<Int, String?> = emptyMap(),
  map_int32_bytes_value: Map<Int, ByteString?> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AllWrappers, AllWrappers.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 101,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repDoubleValue"
  )
  @JvmField
  val rep_double_value: List<Double?> = immutableCopyOf("rep_double_value", rep_double_value)

  @field:WireField(
    tag = 102,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repFloatValue"
  )
  @JvmField
  val rep_float_value: List<Float?> = immutableCopyOf("rep_float_value", rep_float_value)

  @field:WireField(
    tag = 103,
    adapter = "com.squareup.wire.ProtoAdapter#INT64_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repInt64Value"
  )
  @JvmField
  val rep_int64_value: List<Long?> = immutableCopyOf("rep_int64_value", rep_int64_value)

  @field:WireField(
    tag = 104,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repUint64Value"
  )
  @JvmField
  val rep_uint64_value: List<Long?> = immutableCopyOf("rep_uint64_value", rep_uint64_value)

  @field:WireField(
    tag = 105,
    adapter = "com.squareup.wire.ProtoAdapter#INT32_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repInt32Value"
  )
  @JvmField
  val rep_int32_value: List<Int?> = immutableCopyOf("rep_int32_value", rep_int32_value)

  @field:WireField(
    tag = 106,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repUint32Value"
  )
  @JvmField
  val rep_uint32_value: List<Int?> = immutableCopyOf("rep_uint32_value", rep_uint32_value)

  @field:WireField(
    tag = 107,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repBoolValue"
  )
  @JvmField
  val rep_bool_value: List<Boolean?> = immutableCopyOf("rep_bool_value", rep_bool_value)

  @field:WireField(
    tag = 108,
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repStringValue"
  )
  @JvmField
  val rep_string_value: List<String?> = immutableCopyOf("rep_string_value", rep_string_value)

  @field:WireField(
    tag = 109,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repBytesValue"
  )
  @JvmField
  val rep_bytes_value: List<ByteString?> = immutableCopyOf("rep_bytes_value", rep_bytes_value)

  @field:WireField(
    tag = 301,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE_VALUE",
    jsonName = "mapInt32DoubleValue"
  )
  @JvmField
  val map_int32_double_value: Map<Int, Double?> = immutableCopyOf("map_int32_double_value",
      map_int32_double_value)

  @field:WireField(
    tag = 302,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT_VALUE",
    jsonName = "mapInt32FloatValue"
  )
  @JvmField
  val map_int32_float_value: Map<Int, Float?> = immutableCopyOf("map_int32_float_value",
      map_int32_float_value)

  @field:WireField(
    tag = 303,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT64_VALUE",
    jsonName = "mapInt32Int64Value"
  )
  @JvmField
  val map_int32_int64_value: Map<Int, Long?> = immutableCopyOf("map_int32_int64_value",
      map_int32_int64_value)

  @field:WireField(
    tag = 304,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#UINT64_VALUE",
    jsonName = "mapInt32Uint64Value"
  )
  @JvmField
  val map_int32_uint64_value: Map<Int, Long?> = immutableCopyOf("map_int32_uint64_value",
      map_int32_uint64_value)

  @field:WireField(
    tag = 305,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32_VALUE",
    jsonName = "mapInt32Int32Value"
  )
  @JvmField
  val map_int32_int32_value: Map<Int, Int?> = immutableCopyOf("map_int32_int32_value",
      map_int32_int32_value)

  @field:WireField(
    tag = 306,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#UINT32_VALUE",
    jsonName = "mapInt32Uint32Value"
  )
  @JvmField
  val map_int32_uint32_value: Map<Int, Int?> = immutableCopyOf("map_int32_uint32_value",
      map_int32_uint32_value)

  @field:WireField(
    tag = 307,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#BOOL_VALUE",
    jsonName = "mapInt32BoolValue"
  )
  @JvmField
  val map_int32_bool_value: Map<Int, Boolean?> = immutableCopyOf("map_int32_bool_value",
      map_int32_bool_value)

  @field:WireField(
    tag = 308,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#STRING_VALUE",
    jsonName = "mapInt32StringValue"
  )
  @JvmField
  val map_int32_string_value: Map<Int, String?> = immutableCopyOf("map_int32_string_value",
      map_int32_string_value)

  @field:WireField(
    tag = 309,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#BYTES_VALUE",
    jsonName = "mapInt32BytesValue"
  )
  @JvmField
  val map_int32_bytes_value: Map<Int, ByteString?> = immutableCopyOf("map_int32_bytes_value",
      map_int32_bytes_value)

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.double_value = double_value
    builder.float_value = float_value
    builder.int64_value = int64_value
    builder.uint64_value = uint64_value
    builder.int32_value = int32_value
    builder.uint32_value = uint32_value
    builder.bool_value = bool_value
    builder.string_value = string_value
    builder.bytes_value = bytes_value
    builder.rep_double_value = rep_double_value
    builder.rep_float_value = rep_float_value
    builder.rep_int64_value = rep_int64_value
    builder.rep_uint64_value = rep_uint64_value
    builder.rep_int32_value = rep_int32_value
    builder.rep_uint32_value = rep_uint32_value
    builder.rep_bool_value = rep_bool_value
    builder.rep_string_value = rep_string_value
    builder.rep_bytes_value = rep_bytes_value
    builder.map_int32_double_value = map_int32_double_value
    builder.map_int32_float_value = map_int32_float_value
    builder.map_int32_int64_value = map_int32_int64_value
    builder.map_int32_uint64_value = map_int32_uint64_value
    builder.map_int32_int32_value = map_int32_int32_value
    builder.map_int32_uint32_value = map_int32_uint32_value
    builder.map_int32_bool_value = map_int32_bool_value
    builder.map_int32_string_value = map_int32_string_value
    builder.map_int32_bytes_value = map_int32_bytes_value
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AllWrappers) return false
    if (unknownFields != other.unknownFields) return false
    if (double_value != other.double_value) return false
    if (float_value != other.float_value) return false
    if (int64_value != other.int64_value) return false
    if (uint64_value != other.uint64_value) return false
    if (int32_value != other.int32_value) return false
    if (uint32_value != other.uint32_value) return false
    if (bool_value != other.bool_value) return false
    if (string_value != other.string_value) return false
    if (bytes_value != other.bytes_value) return false
    if (rep_double_value != other.rep_double_value) return false
    if (rep_float_value != other.rep_float_value) return false
    if (rep_int64_value != other.rep_int64_value) return false
    if (rep_uint64_value != other.rep_uint64_value) return false
    if (rep_int32_value != other.rep_int32_value) return false
    if (rep_uint32_value != other.rep_uint32_value) return false
    if (rep_bool_value != other.rep_bool_value) return false
    if (rep_string_value != other.rep_string_value) return false
    if (rep_bytes_value != other.rep_bytes_value) return false
    if (map_int32_double_value != other.map_int32_double_value) return false
    if (map_int32_float_value != other.map_int32_float_value) return false
    if (map_int32_int64_value != other.map_int32_int64_value) return false
    if (map_int32_uint64_value != other.map_int32_uint64_value) return false
    if (map_int32_int32_value != other.map_int32_int32_value) return false
    if (map_int32_uint32_value != other.map_int32_uint32_value) return false
    if (map_int32_bool_value != other.map_int32_bool_value) return false
    if (map_int32_string_value != other.map_int32_string_value) return false
    if (map_int32_bytes_value != other.map_int32_bytes_value) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + double_value.hashCode()
      result = result * 37 + float_value.hashCode()
      result = result * 37 + int64_value.hashCode()
      result = result * 37 + uint64_value.hashCode()
      result = result * 37 + int32_value.hashCode()
      result = result * 37 + uint32_value.hashCode()
      result = result * 37 + bool_value.hashCode()
      result = result * 37 + string_value.hashCode()
      result = result * 37 + bytes_value.hashCode()
      result = result * 37 + rep_double_value.hashCode()
      result = result * 37 + rep_float_value.hashCode()
      result = result * 37 + rep_int64_value.hashCode()
      result = result * 37 + rep_uint64_value.hashCode()
      result = result * 37 + rep_int32_value.hashCode()
      result = result * 37 + rep_uint32_value.hashCode()
      result = result * 37 + rep_bool_value.hashCode()
      result = result * 37 + rep_string_value.hashCode()
      result = result * 37 + rep_bytes_value.hashCode()
      result = result * 37 + map_int32_double_value.hashCode()
      result = result * 37 + map_int32_float_value.hashCode()
      result = result * 37 + map_int32_int64_value.hashCode()
      result = result * 37 + map_int32_uint64_value.hashCode()
      result = result * 37 + map_int32_int32_value.hashCode()
      result = result * 37 + map_int32_uint32_value.hashCode()
      result = result * 37 + map_int32_bool_value.hashCode()
      result = result * 37 + map_int32_string_value.hashCode()
      result = result * 37 + map_int32_bytes_value.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (double_value != null) result += """double_value=$double_value"""
    if (float_value != null) result += """float_value=$float_value"""
    if (int64_value != null) result += """int64_value=$int64_value"""
    if (uint64_value != null) result += """uint64_value=$uint64_value"""
    if (int32_value != null) result += """int32_value=$int32_value"""
    if (uint32_value != null) result += """uint32_value=$uint32_value"""
    if (bool_value != null) result += """bool_value=$bool_value"""
    if (string_value != null) result += """string_value=$string_value"""
    if (bytes_value != null) result += """bytes_value=$bytes_value"""
    if (rep_double_value.isNotEmpty()) result += """rep_double_value=$rep_double_value"""
    if (rep_float_value.isNotEmpty()) result += """rep_float_value=$rep_float_value"""
    if (rep_int64_value.isNotEmpty()) result += """rep_int64_value=$rep_int64_value"""
    if (rep_uint64_value.isNotEmpty()) result += """rep_uint64_value=$rep_uint64_value"""
    if (rep_int32_value.isNotEmpty()) result += """rep_int32_value=$rep_int32_value"""
    if (rep_uint32_value.isNotEmpty()) result += """rep_uint32_value=$rep_uint32_value"""
    if (rep_bool_value.isNotEmpty()) result += """rep_bool_value=$rep_bool_value"""
    if (rep_string_value.isNotEmpty()) result += """rep_string_value=$rep_string_value"""
    if (rep_bytes_value.isNotEmpty()) result += """rep_bytes_value=$rep_bytes_value"""
    if (map_int32_double_value.isNotEmpty()) result +=
        """map_int32_double_value=$map_int32_double_value"""
    if (map_int32_float_value.isNotEmpty()) result +=
        """map_int32_float_value=$map_int32_float_value"""
    if (map_int32_int64_value.isNotEmpty()) result +=
        """map_int32_int64_value=$map_int32_int64_value"""
    if (map_int32_uint64_value.isNotEmpty()) result +=
        """map_int32_uint64_value=$map_int32_uint64_value"""
    if (map_int32_int32_value.isNotEmpty()) result +=
        """map_int32_int32_value=$map_int32_int32_value"""
    if (map_int32_uint32_value.isNotEmpty()) result +=
        """map_int32_uint32_value=$map_int32_uint32_value"""
    if (map_int32_bool_value.isNotEmpty()) result +=
        """map_int32_bool_value=$map_int32_bool_value"""
    if (map_int32_string_value.isNotEmpty()) result +=
        """map_int32_string_value=$map_int32_string_value"""
    if (map_int32_bytes_value.isNotEmpty()) result +=
        """map_int32_bytes_value=$map_int32_bytes_value"""
    return result.joinToString(prefix = "AllWrappers{", separator = ", ", postfix = "}")
  }

  fun copy(
    double_value: Double? = this.double_value,
    float_value: Float? = this.float_value,
    int64_value: Long? = this.int64_value,
    uint64_value: Long? = this.uint64_value,
    int32_value: Int? = this.int32_value,
    uint32_value: Int? = this.uint32_value,
    bool_value: Boolean? = this.bool_value,
    string_value: String? = this.string_value,
    bytes_value: ByteString? = this.bytes_value,
    rep_double_value: List<Double?> = this.rep_double_value,
    rep_float_value: List<Float?> = this.rep_float_value,
    rep_int64_value: List<Long?> = this.rep_int64_value,
    rep_uint64_value: List<Long?> = this.rep_uint64_value,
    rep_int32_value: List<Int?> = this.rep_int32_value,
    rep_uint32_value: List<Int?> = this.rep_uint32_value,
    rep_bool_value: List<Boolean?> = this.rep_bool_value,
    rep_string_value: List<String?> = this.rep_string_value,
    rep_bytes_value: List<ByteString?> = this.rep_bytes_value,
    map_int32_double_value: Map<Int, Double?> = this.map_int32_double_value,
    map_int32_float_value: Map<Int, Float?> = this.map_int32_float_value,
    map_int32_int64_value: Map<Int, Long?> = this.map_int32_int64_value,
    map_int32_uint64_value: Map<Int, Long?> = this.map_int32_uint64_value,
    map_int32_int32_value: Map<Int, Int?> = this.map_int32_int32_value,
    map_int32_uint32_value: Map<Int, Int?> = this.map_int32_uint32_value,
    map_int32_bool_value: Map<Int, Boolean?> = this.map_int32_bool_value,
    map_int32_string_value: Map<Int, String?> = this.map_int32_string_value,
    map_int32_bytes_value: Map<Int, ByteString?> = this.map_int32_bytes_value,
    unknownFields: ByteString = this.unknownFields
  ): AllWrappers = AllWrappers(double_value, float_value, int64_value, uint64_value, int32_value,
      uint32_value, bool_value, string_value, bytes_value, rep_double_value, rep_float_value,
      rep_int64_value, rep_uint64_value, rep_int32_value, rep_uint32_value, rep_bool_value,
      rep_string_value, rep_bytes_value, map_int32_double_value, map_int32_float_value,
      map_int32_int64_value, map_int32_uint64_value, map_int32_int32_value, map_int32_uint32_value,
      map_int32_bool_value, map_int32_string_value, map_int32_bytes_value, unknownFields)

  class Builder : Message.Builder<AllWrappers, Builder>() {
    @JvmField
    var double_value: Double? = null

    @JvmField
    var float_value: Float? = null

    @JvmField
    var int64_value: Long? = null

    @JvmField
    var uint64_value: Long? = null

    @JvmField
    var int32_value: Int? = null

    @JvmField
    var uint32_value: Int? = null

    @JvmField
    var bool_value: Boolean? = null

    @JvmField
    var string_value: String? = null

    @JvmField
    var bytes_value: ByteString? = null

    @JvmField
    var rep_double_value: List<Double?> = emptyList()

    @JvmField
    var rep_float_value: List<Float?> = emptyList()

    @JvmField
    var rep_int64_value: List<Long?> = emptyList()

    @JvmField
    var rep_uint64_value: List<Long?> = emptyList()

    @JvmField
    var rep_int32_value: List<Int?> = emptyList()

    @JvmField
    var rep_uint32_value: List<Int?> = emptyList()

    @JvmField
    var rep_bool_value: List<Boolean?> = emptyList()

    @JvmField
    var rep_string_value: List<String?> = emptyList()

    @JvmField
    var rep_bytes_value: List<ByteString?> = emptyList()

    @JvmField
    var map_int32_double_value: Map<Int, Double?> = emptyMap()

    @JvmField
    var map_int32_float_value: Map<Int, Float?> = emptyMap()

    @JvmField
    var map_int32_int64_value: Map<Int, Long?> = emptyMap()

    @JvmField
    var map_int32_uint64_value: Map<Int, Long?> = emptyMap()

    @JvmField
    var map_int32_int32_value: Map<Int, Int?> = emptyMap()

    @JvmField
    var map_int32_uint32_value: Map<Int, Int?> = emptyMap()

    @JvmField
    var map_int32_bool_value: Map<Int, Boolean?> = emptyMap()

    @JvmField
    var map_int32_string_value: Map<Int, String?> = emptyMap()

    @JvmField
    var map_int32_bytes_value: Map<Int, ByteString?> = emptyMap()

    fun double_value(double_value: Double?): Builder {
      this.double_value = double_value
      return this
    }

    fun float_value(float_value: Float?): Builder {
      this.float_value = float_value
      return this
    }

    fun int64_value(int64_value: Long?): Builder {
      this.int64_value = int64_value
      return this
    }

    fun uint64_value(uint64_value: Long?): Builder {
      this.uint64_value = uint64_value
      return this
    }

    fun int32_value(int32_value: Int?): Builder {
      this.int32_value = int32_value
      return this
    }

    fun uint32_value(uint32_value: Int?): Builder {
      this.uint32_value = uint32_value
      return this
    }

    fun bool_value(bool_value: Boolean?): Builder {
      this.bool_value = bool_value
      return this
    }

    fun string_value(string_value: String?): Builder {
      this.string_value = string_value
      return this
    }

    fun bytes_value(bytes_value: ByteString?): Builder {
      this.bytes_value = bytes_value
      return this
    }

    fun rep_double_value(rep_double_value: List<Double?>): Builder {
      checkElementsNotNull(rep_double_value)
      this.rep_double_value = rep_double_value
      return this
    }

    fun rep_float_value(rep_float_value: List<Float?>): Builder {
      checkElementsNotNull(rep_float_value)
      this.rep_float_value = rep_float_value
      return this
    }

    fun rep_int64_value(rep_int64_value: List<Long?>): Builder {
      checkElementsNotNull(rep_int64_value)
      this.rep_int64_value = rep_int64_value
      return this
    }

    fun rep_uint64_value(rep_uint64_value: List<Long?>): Builder {
      checkElementsNotNull(rep_uint64_value)
      this.rep_uint64_value = rep_uint64_value
      return this
    }

    fun rep_int32_value(rep_int32_value: List<Int?>): Builder {
      checkElementsNotNull(rep_int32_value)
      this.rep_int32_value = rep_int32_value
      return this
    }

    fun rep_uint32_value(rep_uint32_value: List<Int?>): Builder {
      checkElementsNotNull(rep_uint32_value)
      this.rep_uint32_value = rep_uint32_value
      return this
    }

    fun rep_bool_value(rep_bool_value: List<Boolean?>): Builder {
      checkElementsNotNull(rep_bool_value)
      this.rep_bool_value = rep_bool_value
      return this
    }

    fun rep_string_value(rep_string_value: List<String?>): Builder {
      checkElementsNotNull(rep_string_value)
      this.rep_string_value = rep_string_value
      return this
    }

    fun rep_bytes_value(rep_bytes_value: List<ByteString?>): Builder {
      checkElementsNotNull(rep_bytes_value)
      this.rep_bytes_value = rep_bytes_value
      return this
    }

    fun map_int32_double_value(map_int32_double_value: Map<Int, Double?>): Builder {
      this.map_int32_double_value = map_int32_double_value
      return this
    }

    fun map_int32_float_value(map_int32_float_value: Map<Int, Float?>): Builder {
      this.map_int32_float_value = map_int32_float_value
      return this
    }

    fun map_int32_int64_value(map_int32_int64_value: Map<Int, Long?>): Builder {
      this.map_int32_int64_value = map_int32_int64_value
      return this
    }

    fun map_int32_uint64_value(map_int32_uint64_value: Map<Int, Long?>): Builder {
      this.map_int32_uint64_value = map_int32_uint64_value
      return this
    }

    fun map_int32_int32_value(map_int32_int32_value: Map<Int, Int?>): Builder {
      this.map_int32_int32_value = map_int32_int32_value
      return this
    }

    fun map_int32_uint32_value(map_int32_uint32_value: Map<Int, Int?>): Builder {
      this.map_int32_uint32_value = map_int32_uint32_value
      return this
    }

    fun map_int32_bool_value(map_int32_bool_value: Map<Int, Boolean?>): Builder {
      this.map_int32_bool_value = map_int32_bool_value
      return this
    }

    fun map_int32_string_value(map_int32_string_value: Map<Int, String?>): Builder {
      this.map_int32_string_value = map_int32_string_value
      return this
    }

    fun map_int32_bytes_value(map_int32_bytes_value: Map<Int, ByteString?>): Builder {
      this.map_int32_bytes_value = map_int32_bytes_value
      return this
    }

    override fun build(): AllWrappers = AllWrappers(
      double_value = double_value,
      float_value = float_value,
      int64_value = int64_value,
      uint64_value = uint64_value,
      int32_value = int32_value,
      uint32_value = uint32_value,
      bool_value = bool_value,
      string_value = string_value,
      bytes_value = bytes_value,
      rep_double_value = rep_double_value,
      rep_float_value = rep_float_value,
      rep_int64_value = rep_int64_value,
      rep_uint64_value = rep_uint64_value,
      rep_int32_value = rep_int32_value,
      rep_uint32_value = rep_uint32_value,
      rep_bool_value = rep_bool_value,
      rep_string_value = rep_string_value,
      rep_bytes_value = rep_bytes_value,
      map_int32_double_value = map_int32_double_value,
      map_int32_float_value = map_int32_float_value,
      map_int32_int64_value = map_int32_int64_value,
      map_int32_uint64_value = map_int32_uint64_value,
      map_int32_int32_value = map_int32_int32_value,
      map_int32_uint32_value = map_int32_uint32_value,
      map_int32_bool_value = map_int32_bool_value,
      map_int32_string_value = map_int32_string_value,
      map_int32_bytes_value = map_int32_bytes_value,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<AllWrappers> = object : ProtoAdapter<AllWrappers>(
      FieldEncoding.LENGTH_DELIMITED, 
      AllWrappers::class, 
      "type.googleapis.com/squareup.proto3.AllWrappers", 
      PROTO_3, 
      null
    ) {
      private val map_int32_double_valueAdapter: ProtoAdapter<Map<Int, Double?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.DOUBLE_VALUE) }

      private val map_int32_float_valueAdapter: ProtoAdapter<Map<Int, Float?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.FLOAT_VALUE) }

      private val map_int32_int64_valueAdapter: ProtoAdapter<Map<Int, Long?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT64_VALUE) }

      private val map_int32_uint64_valueAdapter: ProtoAdapter<Map<Int, Long?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.UINT64_VALUE) }

      private val map_int32_int32_valueAdapter: ProtoAdapter<Map<Int, Int?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32_VALUE) }

      private val map_int32_uint32_valueAdapter: ProtoAdapter<Map<Int, Int?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.UINT32_VALUE) }

      private val map_int32_bool_valueAdapter: ProtoAdapter<Map<Int, Boolean?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.BOOL_VALUE) }

      private val map_int32_string_valueAdapter: ProtoAdapter<Map<Int, String?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.STRING_VALUE) }

      private val map_int32_bytes_valueAdapter: ProtoAdapter<Map<Int, ByteString?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.BYTES_VALUE) }

      override fun encodedSize(value: AllWrappers): Int {
        var size = value.unknownFields.size
        if (value.double_value != null) size += ProtoAdapter.DOUBLE_VALUE.encodedSizeWithTag(1,
            value.double_value)
        if (value.float_value != null) size += ProtoAdapter.FLOAT_VALUE.encodedSizeWithTag(2,
            value.float_value)
        if (value.int64_value != null) size += ProtoAdapter.INT64_VALUE.encodedSizeWithTag(3,
            value.int64_value)
        if (value.uint64_value != null) size += ProtoAdapter.UINT64_VALUE.encodedSizeWithTag(4,
            value.uint64_value)
        if (value.int32_value != null) size += ProtoAdapter.INT32_VALUE.encodedSizeWithTag(5,
            value.int32_value)
        if (value.uint32_value != null) size += ProtoAdapter.UINT32_VALUE.encodedSizeWithTag(6,
            value.uint32_value)
        if (value.bool_value != null) size += ProtoAdapter.BOOL_VALUE.encodedSizeWithTag(7,
            value.bool_value)
        if (value.string_value != null) size += ProtoAdapter.STRING_VALUE.encodedSizeWithTag(8,
            value.string_value)
        if (value.bytes_value != null) size += ProtoAdapter.BYTES_VALUE.encodedSizeWithTag(9,
            value.bytes_value)
        size += ProtoAdapter.DOUBLE_VALUE.asRepeated().encodedSizeWithTag(101,
            value.rep_double_value)
        size += ProtoAdapter.FLOAT_VALUE.asRepeated().encodedSizeWithTag(102, value.rep_float_value)
        size += ProtoAdapter.INT64_VALUE.asRepeated().encodedSizeWithTag(103, value.rep_int64_value)
        size += ProtoAdapter.UINT64_VALUE.asRepeated().encodedSizeWithTag(104,
            value.rep_uint64_value)
        size += ProtoAdapter.INT32_VALUE.asRepeated().encodedSizeWithTag(105, value.rep_int32_value)
        size += ProtoAdapter.UINT32_VALUE.asRepeated().encodedSizeWithTag(106,
            value.rep_uint32_value)
        size += ProtoAdapter.BOOL_VALUE.asRepeated().encodedSizeWithTag(107, value.rep_bool_value)
        size += ProtoAdapter.STRING_VALUE.asRepeated().encodedSizeWithTag(108,
            value.rep_string_value)
        size += ProtoAdapter.BYTES_VALUE.asRepeated().encodedSizeWithTag(109, value.rep_bytes_value)
        size += map_int32_double_valueAdapter.encodedSizeWithTag(301, value.map_int32_double_value)
        size += map_int32_float_valueAdapter.encodedSizeWithTag(302, value.map_int32_float_value)
        size += map_int32_int64_valueAdapter.encodedSizeWithTag(303, value.map_int32_int64_value)
        size += map_int32_uint64_valueAdapter.encodedSizeWithTag(304, value.map_int32_uint64_value)
        size += map_int32_int32_valueAdapter.encodedSizeWithTag(305, value.map_int32_int32_value)
        size += map_int32_uint32_valueAdapter.encodedSizeWithTag(306, value.map_int32_uint32_value)
        size += map_int32_bool_valueAdapter.encodedSizeWithTag(307, value.map_int32_bool_value)
        size += map_int32_string_valueAdapter.encodedSizeWithTag(308, value.map_int32_string_value)
        size += map_int32_bytes_valueAdapter.encodedSizeWithTag(309, value.map_int32_bytes_value)
        return size
      }

      override fun encode(writer: ProtoWriter, value: AllWrappers) {
        if (value.double_value != null) ProtoAdapter.DOUBLE_VALUE.encodeWithTag(writer, 1,
            value.double_value)
        if (value.float_value != null) ProtoAdapter.FLOAT_VALUE.encodeWithTag(writer, 2,
            value.float_value)
        if (value.int64_value != null) ProtoAdapter.INT64_VALUE.encodeWithTag(writer, 3,
            value.int64_value)
        if (value.uint64_value != null) ProtoAdapter.UINT64_VALUE.encodeWithTag(writer, 4,
            value.uint64_value)
        if (value.int32_value != null) ProtoAdapter.INT32_VALUE.encodeWithTag(writer, 5,
            value.int32_value)
        if (value.uint32_value != null) ProtoAdapter.UINT32_VALUE.encodeWithTag(writer, 6,
            value.uint32_value)
        if (value.bool_value != null) ProtoAdapter.BOOL_VALUE.encodeWithTag(writer, 7,
            value.bool_value)
        if (value.string_value != null) ProtoAdapter.STRING_VALUE.encodeWithTag(writer, 8,
            value.string_value)
        if (value.bytes_value != null) ProtoAdapter.BYTES_VALUE.encodeWithTag(writer, 9,
            value.bytes_value)
        ProtoAdapter.DOUBLE_VALUE.asRepeated().encodeWithTag(writer, 101, value.rep_double_value)
        ProtoAdapter.FLOAT_VALUE.asRepeated().encodeWithTag(writer, 102, value.rep_float_value)
        ProtoAdapter.INT64_VALUE.asRepeated().encodeWithTag(writer, 103, value.rep_int64_value)
        ProtoAdapter.UINT64_VALUE.asRepeated().encodeWithTag(writer, 104, value.rep_uint64_value)
        ProtoAdapter.INT32_VALUE.asRepeated().encodeWithTag(writer, 105, value.rep_int32_value)
        ProtoAdapter.UINT32_VALUE.asRepeated().encodeWithTag(writer, 106, value.rep_uint32_value)
        ProtoAdapter.BOOL_VALUE.asRepeated().encodeWithTag(writer, 107, value.rep_bool_value)
        ProtoAdapter.STRING_VALUE.asRepeated().encodeWithTag(writer, 108, value.rep_string_value)
        ProtoAdapter.BYTES_VALUE.asRepeated().encodeWithTag(writer, 109, value.rep_bytes_value)
        map_int32_double_valueAdapter.encodeWithTag(writer, 301, value.map_int32_double_value)
        map_int32_float_valueAdapter.encodeWithTag(writer, 302, value.map_int32_float_value)
        map_int32_int64_valueAdapter.encodeWithTag(writer, 303, value.map_int32_int64_value)
        map_int32_uint64_valueAdapter.encodeWithTag(writer, 304, value.map_int32_uint64_value)
        map_int32_int32_valueAdapter.encodeWithTag(writer, 305, value.map_int32_int32_value)
        map_int32_uint32_valueAdapter.encodeWithTag(writer, 306, value.map_int32_uint32_value)
        map_int32_bool_valueAdapter.encodeWithTag(writer, 307, value.map_int32_bool_value)
        map_int32_string_valueAdapter.encodeWithTag(writer, 308, value.map_int32_string_value)
        map_int32_bytes_valueAdapter.encodeWithTag(writer, 309, value.map_int32_bytes_value)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): AllWrappers {
        var double_value: Double? = null
        var float_value: Float? = null
        var int64_value: Long? = null
        var uint64_value: Long? = null
        var int32_value: Int? = null
        var uint32_value: Int? = null
        var bool_value: Boolean? = null
        var string_value: String? = null
        var bytes_value: ByteString? = null
        val rep_double_value = mutableListOf<Double?>()
        val rep_float_value = mutableListOf<Float?>()
        val rep_int64_value = mutableListOf<Long?>()
        val rep_uint64_value = mutableListOf<Long?>()
        val rep_int32_value = mutableListOf<Int?>()
        val rep_uint32_value = mutableListOf<Int?>()
        val rep_bool_value = mutableListOf<Boolean?>()
        val rep_string_value = mutableListOf<String?>()
        val rep_bytes_value = mutableListOf<ByteString?>()
        val map_int32_double_value = mutableMapOf<Int, Double?>()
        val map_int32_float_value = mutableMapOf<Int, Float?>()
        val map_int32_int64_value = mutableMapOf<Int, Long?>()
        val map_int32_uint64_value = mutableMapOf<Int, Long?>()
        val map_int32_int32_value = mutableMapOf<Int, Int?>()
        val map_int32_uint32_value = mutableMapOf<Int, Int?>()
        val map_int32_bool_value = mutableMapOf<Int, Boolean?>()
        val map_int32_string_value = mutableMapOf<Int, String?>()
        val map_int32_bytes_value = mutableMapOf<Int, ByteString?>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> double_value = ProtoAdapter.DOUBLE_VALUE.decode(reader)
            2 -> float_value = ProtoAdapter.FLOAT_VALUE.decode(reader)
            3 -> int64_value = ProtoAdapter.INT64_VALUE.decode(reader)
            4 -> uint64_value = ProtoAdapter.UINT64_VALUE.decode(reader)
            5 -> int32_value = ProtoAdapter.INT32_VALUE.decode(reader)
            6 -> uint32_value = ProtoAdapter.UINT32_VALUE.decode(reader)
            7 -> bool_value = ProtoAdapter.BOOL_VALUE.decode(reader)
            8 -> string_value = ProtoAdapter.STRING_VALUE.decode(reader)
            9 -> bytes_value = ProtoAdapter.BYTES_VALUE.decode(reader)
            101 -> rep_double_value.add(ProtoAdapter.DOUBLE_VALUE.decode(reader))
            102 -> rep_float_value.add(ProtoAdapter.FLOAT_VALUE.decode(reader))
            103 -> rep_int64_value.add(ProtoAdapter.INT64_VALUE.decode(reader))
            104 -> rep_uint64_value.add(ProtoAdapter.UINT64_VALUE.decode(reader))
            105 -> rep_int32_value.add(ProtoAdapter.INT32_VALUE.decode(reader))
            106 -> rep_uint32_value.add(ProtoAdapter.UINT32_VALUE.decode(reader))
            107 -> rep_bool_value.add(ProtoAdapter.BOOL_VALUE.decode(reader))
            108 -> rep_string_value.add(ProtoAdapter.STRING_VALUE.decode(reader))
            109 -> rep_bytes_value.add(ProtoAdapter.BYTES_VALUE.decode(reader))
            301 -> map_int32_double_value.putAll(map_int32_double_valueAdapter.decode(reader))
            302 -> map_int32_float_value.putAll(map_int32_float_valueAdapter.decode(reader))
            303 -> map_int32_int64_value.putAll(map_int32_int64_valueAdapter.decode(reader))
            304 -> map_int32_uint64_value.putAll(map_int32_uint64_valueAdapter.decode(reader))
            305 -> map_int32_int32_value.putAll(map_int32_int32_valueAdapter.decode(reader))
            306 -> map_int32_uint32_value.putAll(map_int32_uint32_valueAdapter.decode(reader))
            307 -> map_int32_bool_value.putAll(map_int32_bool_valueAdapter.decode(reader))
            308 -> map_int32_string_value.putAll(map_int32_string_valueAdapter.decode(reader))
            309 -> map_int32_bytes_value.putAll(map_int32_bytes_valueAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return AllWrappers(
          double_value = double_value,
          float_value = float_value,
          int64_value = int64_value,
          uint64_value = uint64_value,
          int32_value = int32_value,
          uint32_value = uint32_value,
          bool_value = bool_value,
          string_value = string_value,
          bytes_value = bytes_value,
          rep_double_value = rep_double_value,
          rep_float_value = rep_float_value,
          rep_int64_value = rep_int64_value,
          rep_uint64_value = rep_uint64_value,
          rep_int32_value = rep_int32_value,
          rep_uint32_value = rep_uint32_value,
          rep_bool_value = rep_bool_value,
          rep_string_value = rep_string_value,
          rep_bytes_value = rep_bytes_value,
          map_int32_double_value = map_int32_double_value,
          map_int32_float_value = map_int32_float_value,
          map_int32_int64_value = map_int32_int64_value,
          map_int32_uint64_value = map_int32_uint64_value,
          map_int32_int32_value = map_int32_int32_value,
          map_int32_uint32_value = map_int32_uint32_value,
          map_int32_bool_value = map_int32_bool_value,
          map_int32_string_value = map_int32_string_value,
          map_int32_bytes_value = map_int32_bytes_value,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: AllWrappers): AllWrappers = value.copy(
        double_value = value.double_value?.let(ProtoAdapter.DOUBLE_VALUE::redact),
        float_value = value.float_value?.let(ProtoAdapter.FLOAT_VALUE::redact),
        int64_value = value.int64_value?.let(ProtoAdapter.INT64_VALUE::redact),
        uint64_value = value.uint64_value?.let(ProtoAdapter.UINT64_VALUE::redact),
        int32_value = value.int32_value?.let(ProtoAdapter.INT32_VALUE::redact),
        uint32_value = value.uint32_value?.let(ProtoAdapter.UINT32_VALUE::redact),
        bool_value = value.bool_value?.let(ProtoAdapter.BOOL_VALUE::redact),
        string_value = value.string_value?.let(ProtoAdapter.STRING_VALUE::redact),
        bytes_value = value.bytes_value?.let(ProtoAdapter.BYTES_VALUE::redact),
        rep_double_value = value.rep_double_value.redactElements(ProtoAdapter.DOUBLE_VALUE),
        rep_float_value = value.rep_float_value.redactElements(ProtoAdapter.FLOAT_VALUE),
        rep_int64_value = value.rep_int64_value.redactElements(ProtoAdapter.INT64_VALUE),
        rep_uint64_value = value.rep_uint64_value.redactElements(ProtoAdapter.UINT64_VALUE),
        rep_int32_value = value.rep_int32_value.redactElements(ProtoAdapter.INT32_VALUE),
        rep_uint32_value = value.rep_uint32_value.redactElements(ProtoAdapter.UINT32_VALUE),
        rep_bool_value = value.rep_bool_value.redactElements(ProtoAdapter.BOOL_VALUE),
        rep_string_value = value.rep_string_value.redactElements(ProtoAdapter.STRING_VALUE),
        rep_bytes_value = value.rep_bytes_value.redactElements(ProtoAdapter.BYTES_VALUE),
        map_int32_double_value =
            value.map_int32_double_value.redactElements(ProtoAdapter.DOUBLE_VALUE),
        map_int32_float_value =
            value.map_int32_float_value.redactElements(ProtoAdapter.FLOAT_VALUE),
        map_int32_int64_value =
            value.map_int32_int64_value.redactElements(ProtoAdapter.INT64_VALUE),
        map_int32_uint64_value =
            value.map_int32_uint64_value.redactElements(ProtoAdapter.UINT64_VALUE),
        map_int32_int32_value =
            value.map_int32_int32_value.redactElements(ProtoAdapter.INT32_VALUE),
        map_int32_uint32_value =
            value.map_int32_uint32_value.redactElements(ProtoAdapter.UINT32_VALUE),
        map_int32_bool_value = value.map_int32_bool_value.redactElements(ProtoAdapter.BOOL_VALUE),
        map_int32_string_value =
            value.map_int32_string_value.redactElements(ProtoAdapter.STRING_VALUE),
        map_int32_bytes_value =
            value.map_int32_bytes_value.redactElements(ProtoAdapter.BYTES_VALUE),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
