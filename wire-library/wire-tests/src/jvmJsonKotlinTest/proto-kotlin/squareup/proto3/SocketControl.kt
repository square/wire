// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.proto3.SocketControl in keywords.proto
package squareup.proto3

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class SocketControl(
  @field:WireField(
    tag = 1,
    adapter = "squareup.proto3.SocketControl${'$'}Sort#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  val sort: Sort = Sort.open,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<SocketControl, SocketControl.Builder>(ADAPTER, unknownFields) {
  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.sort = sort
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SocketControl) return false
    if (unknownFields != other.unknownFields) return false
    if (sort != other.sort) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + sort.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """sort=$sort"""
    return result.joinToString(prefix = "SocketControl{", separator = ", ", postfix = "}")
  }

  fun copy(sort: Sort = this.sort, unknownFields: ByteString = this.unknownFields): SocketControl =
      SocketControl(sort, unknownFields)

  class Builder : Message.Builder<SocketControl, Builder>() {
    @JvmField
    var sort: Sort = Sort.open

    fun sort(sort: Sort): Builder {
      this.sort = sort
      return this
    }

    override fun build(): SocketControl = SocketControl(
      sort = sort,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<SocketControl> = object : ProtoAdapter<SocketControl>(
      FieldEncoding.LENGTH_DELIMITED, 
      SocketControl::class, 
      "type.googleapis.com/squareup.proto3.SocketControl", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: SocketControl): Int {
        var size = value.unknownFields.size
        if (value.sort != Sort.open) size += Sort.ADAPTER.encodedSizeWithTag(1, value.sort)
        return size
      }

      override fun encode(writer: ProtoWriter, value: SocketControl) {
        if (value.sort != Sort.open) Sort.ADAPTER.encodeWithTag(writer, 1, value.sort)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): SocketControl {
        var sort: Sort = Sort.open
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              sort = Sort.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return SocketControl(
          sort = sort,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: SocketControl): SocketControl = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class Sort(
    override val value: Int
  ) : WireEnum {
    open(0),

    closed(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Sort> = object : EnumAdapter<Sort>(
        Sort::class, 
        PROTO_3, 
        Sort.open
      ) {
        override fun fromValue(value: Int): Sort? = Sort.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): Sort? = when (value) {
        0 -> open
        1 -> closed
        else -> null
      }
    }
  }
}
