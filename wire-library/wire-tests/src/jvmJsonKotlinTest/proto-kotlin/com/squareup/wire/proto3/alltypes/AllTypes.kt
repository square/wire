// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.proto3.AllTypes in all_types_proto3.proto
package com.squareup.wire.proto3.alltypes

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.lazy
import okio.ByteString

class AllTypes(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myInt32"
  )
  @JvmField
  val my_int32: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myUint32"
  )
  @JvmField
  val my_uint32: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "mySint32"
  )
  @JvmField
  val my_sint32: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myFixed32"
  )
  @JvmField
  val my_fixed32: Int = 0,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "mySfixed32"
  )
  @JvmField
  val my_sfixed32: Int = 0,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myInt64"
  )
  @JvmField
  val my_int64: Long = 0L,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myUint64"
  )
  @JvmField
  val my_uint64: Long = 0L,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "mySint64"
  )
  @JvmField
  val my_sint64: Long = 0L,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myFixed64"
  )
  @JvmField
  val my_fixed64: Long = 0L,
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "mySfixed64"
  )
  @JvmField
  val my_sfixed64: Long = 0L,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myBool"
  )
  @JvmField
  val my_bool: Boolean = false,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myFloat"
  )
  @JvmField
  val my_float: Float = 0f,
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myDouble"
  )
  @JvmField
  val my_double: Double = 0.0,
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myString"
  )
  @JvmField
  val my_string: String = "",
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "myBytes"
  )
  @JvmField
  val my_bytes: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "nestedEnum"
  )
  @JvmField
  val nested_enum: NestedEnum = NestedEnum.UNKNOWN,
  @field:WireField(
    tag = 17,
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "nestedMessage"
  )
  @JvmField
  val nested_message: NestedMessage? = null,
  rep_int32: List<Int> = emptyList(),
  rep_uint32: List<Int> = emptyList(),
  rep_sint32: List<Int> = emptyList(),
  rep_fixed32: List<Int> = emptyList(),
  rep_sfixed32: List<Int> = emptyList(),
  rep_int64: List<Long> = emptyList(),
  rep_uint64: List<Long> = emptyList(),
  rep_sint64: List<Long> = emptyList(),
  rep_fixed64: List<Long> = emptyList(),
  rep_sfixed64: List<Long> = emptyList(),
  rep_bool: List<Boolean> = emptyList(),
  rep_float: List<Float> = emptyList(),
  rep_double: List<Double> = emptyList(),
  rep_string: List<String> = emptyList(),
  rep_bytes: List<ByteString> = emptyList(),
  rep_nested_enum: List<NestedEnum> = emptyList(),
  rep_nested_message: List<NestedMessage> = emptyList(),
  pack_int32: List<Int> = emptyList(),
  pack_uint32: List<Int> = emptyList(),
  pack_sint32: List<Int> = emptyList(),
  pack_fixed32: List<Int> = emptyList(),
  pack_sfixed32: List<Int> = emptyList(),
  pack_int64: List<Long> = emptyList(),
  pack_uint64: List<Long> = emptyList(),
  pack_sint64: List<Long> = emptyList(),
  pack_fixed64: List<Long> = emptyList(),
  pack_sfixed64: List<Long> = emptyList(),
  pack_bool: List<Boolean> = emptyList(),
  pack_float: List<Float> = emptyList(),
  pack_double: List<Double> = emptyList(),
  pack_nested_enum: List<NestedEnum> = emptyList(),
  map_int32_int32: Map<Int, Int> = emptyMap(),
  map_string_string: Map<String, String> = emptyMap(),
  map_string_message: Map<String, NestedMessage> = emptyMap(),
  map_string_enum: Map<String, NestedEnum> = emptyMap(),
  @field:WireField(
    tag = 601,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "oneofString"
  )
  @JvmField
  val oneof_string: String? = null,
  @field:WireField(
    tag = 602,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    jsonName = "oneofInt32"
  )
  @JvmField
  val oneof_int32: Int? = null,
  @field:WireField(
    tag = 603,
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    jsonName = "oneofNestedMessage"
  )
  @JvmField
  val oneof_nested_message: NestedMessage? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AllTypes, AllTypes.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 201,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED,
    jsonName = "repInt32"
  )
  @JvmField
  val rep_int32: List<Int> = immutableCopyOf("rep_int32", rep_int32)

  @field:WireField(
    tag = 202,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REPEATED,
    jsonName = "repUint32"
  )
  @JvmField
  val rep_uint32: List<Int> = immutableCopyOf("rep_uint32", rep_uint32)

  @field:WireField(
    tag = 203,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REPEATED,
    jsonName = "repSint32"
  )
  @JvmField
  val rep_sint32: List<Int> = immutableCopyOf("rep_sint32", rep_sint32)

  @field:WireField(
    tag = 204,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REPEATED,
    jsonName = "repFixed32"
  )
  @JvmField
  val rep_fixed32: List<Int> = immutableCopyOf("rep_fixed32", rep_fixed32)

  @field:WireField(
    tag = 205,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REPEATED,
    jsonName = "repSfixed32"
  )
  @JvmField
  val rep_sfixed32: List<Int> = immutableCopyOf("rep_sfixed32", rep_sfixed32)

  @field:WireField(
    tag = 206,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REPEATED,
    jsonName = "repInt64"
  )
  @JvmField
  val rep_int64: List<Long> = immutableCopyOf("rep_int64", rep_int64)

  @field:WireField(
    tag = 207,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REPEATED,
    jsonName = "repUint64"
  )
  @JvmField
  val rep_uint64: List<Long> = immutableCopyOf("rep_uint64", rep_uint64)

  @field:WireField(
    tag = 208,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REPEATED,
    jsonName = "repSint64"
  )
  @JvmField
  val rep_sint64: List<Long> = immutableCopyOf("rep_sint64", rep_sint64)

  @field:WireField(
    tag = 209,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REPEATED,
    jsonName = "repFixed64"
  )
  @JvmField
  val rep_fixed64: List<Long> = immutableCopyOf("rep_fixed64", rep_fixed64)

  @field:WireField(
    tag = 210,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REPEATED,
    jsonName = "repSfixed64"
  )
  @JvmField
  val rep_sfixed64: List<Long> = immutableCopyOf("rep_sfixed64", rep_sfixed64)

  @field:WireField(
    tag = 211,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REPEATED,
    jsonName = "repBool"
  )
  @JvmField
  val rep_bool: List<Boolean> = immutableCopyOf("rep_bool", rep_bool)

  @field:WireField(
    tag = 212,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REPEATED,
    jsonName = "repFloat"
  )
  @JvmField
  val rep_float: List<Float> = immutableCopyOf("rep_float", rep_float)

  @field:WireField(
    tag = 213,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REPEATED,
    jsonName = "repDouble"
  )
  @JvmField
  val rep_double: List<Double> = immutableCopyOf("rep_double", rep_double)

  @field:WireField(
    tag = 214,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "repString"
  )
  @JvmField
  val rep_string: List<String> = immutableCopyOf("rep_string", rep_string)

  @field:WireField(
    tag = 215,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REPEATED,
    jsonName = "repBytes"
  )
  @JvmField
  val rep_bytes: List<ByteString> = immutableCopyOf("rep_bytes", rep_bytes)

  @field:WireField(
    tag = 216,
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "repNestedEnum"
  )
  @JvmField
  val rep_nested_enum: List<NestedEnum> = immutableCopyOf("rep_nested_enum", rep_nested_enum)

  @field:WireField(
    tag = 217,
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "repNestedMessage"
  )
  @JvmField
  val rep_nested_message: List<NestedMessage> = immutableCopyOf("rep_nested_message",
      rep_nested_message)

  @field:WireField(
    tag = 301,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED,
    jsonName = "packInt32"
  )
  @JvmField
  val pack_int32: List<Int> = immutableCopyOf("pack_int32", pack_int32)

  @field:WireField(
    tag = 302,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.PACKED,
    jsonName = "packUint32"
  )
  @JvmField
  val pack_uint32: List<Int> = immutableCopyOf("pack_uint32", pack_uint32)

  @field:WireField(
    tag = 303,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.PACKED,
    jsonName = "packSint32"
  )
  @JvmField
  val pack_sint32: List<Int> = immutableCopyOf("pack_sint32", pack_sint32)

  @field:WireField(
    tag = 304,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.PACKED,
    jsonName = "packFixed32"
  )
  @JvmField
  val pack_fixed32: List<Int> = immutableCopyOf("pack_fixed32", pack_fixed32)

  @field:WireField(
    tag = 305,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.PACKED,
    jsonName = "packSfixed32"
  )
  @JvmField
  val pack_sfixed32: List<Int> = immutableCopyOf("pack_sfixed32", pack_sfixed32)

  @field:WireField(
    tag = 306,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.PACKED,
    jsonName = "packInt64"
  )
  @JvmField
  val pack_int64: List<Long> = immutableCopyOf("pack_int64", pack_int64)

  @field:WireField(
    tag = 307,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.PACKED,
    jsonName = "packUint64"
  )
  @JvmField
  val pack_uint64: List<Long> = immutableCopyOf("pack_uint64", pack_uint64)

  @field:WireField(
    tag = 308,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.PACKED,
    jsonName = "packSint64"
  )
  @JvmField
  val pack_sint64: List<Long> = immutableCopyOf("pack_sint64", pack_sint64)

  @field:WireField(
    tag = 309,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.PACKED,
    jsonName = "packFixed64"
  )
  @JvmField
  val pack_fixed64: List<Long> = immutableCopyOf("pack_fixed64", pack_fixed64)

  @field:WireField(
    tag = 310,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.PACKED,
    jsonName = "packSfixed64"
  )
  @JvmField
  val pack_sfixed64: List<Long> = immutableCopyOf("pack_sfixed64", pack_sfixed64)

  @field:WireField(
    tag = 311,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.PACKED,
    jsonName = "packBool"
  )
  @JvmField
  val pack_bool: List<Boolean> = immutableCopyOf("pack_bool", pack_bool)

  @field:WireField(
    tag = 312,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.PACKED,
    jsonName = "packFloat"
  )
  @JvmField
  val pack_float: List<Float> = immutableCopyOf("pack_float", pack_float)

  @field:WireField(
    tag = 313,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.PACKED,
    jsonName = "packDouble"
  )
  @JvmField
  val pack_double: List<Double> = immutableCopyOf("pack_double", pack_double)

  @field:WireField(
    tag = 316,
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.PACKED,
    jsonName = "packNestedEnum"
  )
  @JvmField
  val pack_nested_enum: List<NestedEnum> = immutableCopyOf("pack_nested_enum", pack_nested_enum)

  @field:WireField(
    tag = 501,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    jsonName = "mapInt32Int32"
  )
  @JvmField
  val map_int32_int32: Map<Int, Int> = immutableCopyOf("map_int32_int32", map_int32_int32)

  @field:WireField(
    tag = 502,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "mapStringString"
  )
  @JvmField
  val map_string_string: Map<String, String> = immutableCopyOf("map_string_string",
      map_string_string)

  @field:WireField(
    tag = 503,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    jsonName = "mapStringMessage"
  )
  @JvmField
  val map_string_message: Map<String, NestedMessage> = immutableCopyOf("map_string_message",
      map_string_message)

  @field:WireField(
    tag = 504,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.proto3.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    jsonName = "mapStringEnum"
  )
  @JvmField
  val map_string_enum: Map<String, NestedEnum> = immutableCopyOf("map_string_enum", map_string_enum)

  init {
    require(countNonNull(oneof_string, oneof_int32, oneof_nested_message) <= 1) {
      "At most one of oneof_string, oneof_int32, oneof_nested_message may be non-null"
    }
  }

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.my_int32 = my_int32
    builder.my_uint32 = my_uint32
    builder.my_sint32 = my_sint32
    builder.my_fixed32 = my_fixed32
    builder.my_sfixed32 = my_sfixed32
    builder.my_int64 = my_int64
    builder.my_uint64 = my_uint64
    builder.my_sint64 = my_sint64
    builder.my_fixed64 = my_fixed64
    builder.my_sfixed64 = my_sfixed64
    builder.my_bool = my_bool
    builder.my_float = my_float
    builder.my_double = my_double
    builder.my_string = my_string
    builder.my_bytes = my_bytes
    builder.nested_enum = nested_enum
    builder.nested_message = nested_message
    builder.rep_int32 = rep_int32
    builder.rep_uint32 = rep_uint32
    builder.rep_sint32 = rep_sint32
    builder.rep_fixed32 = rep_fixed32
    builder.rep_sfixed32 = rep_sfixed32
    builder.rep_int64 = rep_int64
    builder.rep_uint64 = rep_uint64
    builder.rep_sint64 = rep_sint64
    builder.rep_fixed64 = rep_fixed64
    builder.rep_sfixed64 = rep_sfixed64
    builder.rep_bool = rep_bool
    builder.rep_float = rep_float
    builder.rep_double = rep_double
    builder.rep_string = rep_string
    builder.rep_bytes = rep_bytes
    builder.rep_nested_enum = rep_nested_enum
    builder.rep_nested_message = rep_nested_message
    builder.pack_int32 = pack_int32
    builder.pack_uint32 = pack_uint32
    builder.pack_sint32 = pack_sint32
    builder.pack_fixed32 = pack_fixed32
    builder.pack_sfixed32 = pack_sfixed32
    builder.pack_int64 = pack_int64
    builder.pack_uint64 = pack_uint64
    builder.pack_sint64 = pack_sint64
    builder.pack_fixed64 = pack_fixed64
    builder.pack_sfixed64 = pack_sfixed64
    builder.pack_bool = pack_bool
    builder.pack_float = pack_float
    builder.pack_double = pack_double
    builder.pack_nested_enum = pack_nested_enum
    builder.map_int32_int32 = map_int32_int32
    builder.map_string_string = map_string_string
    builder.map_string_message = map_string_message
    builder.map_string_enum = map_string_enum
    builder.oneof_string = oneof_string
    builder.oneof_int32 = oneof_int32
    builder.oneof_nested_message = oneof_nested_message
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AllTypes) return false
    if (unknownFields != other.unknownFields) return false
    if (my_int32 != other.my_int32) return false
    if (my_uint32 != other.my_uint32) return false
    if (my_sint32 != other.my_sint32) return false
    if (my_fixed32 != other.my_fixed32) return false
    if (my_sfixed32 != other.my_sfixed32) return false
    if (my_int64 != other.my_int64) return false
    if (my_uint64 != other.my_uint64) return false
    if (my_sint64 != other.my_sint64) return false
    if (my_fixed64 != other.my_fixed64) return false
    if (my_sfixed64 != other.my_sfixed64) return false
    if (my_bool != other.my_bool) return false
    if (my_float != other.my_float) return false
    if (my_double != other.my_double) return false
    if (my_string != other.my_string) return false
    if (my_bytes != other.my_bytes) return false
    if (nested_enum != other.nested_enum) return false
    if (nested_message != other.nested_message) return false
    if (rep_int32 != other.rep_int32) return false
    if (rep_uint32 != other.rep_uint32) return false
    if (rep_sint32 != other.rep_sint32) return false
    if (rep_fixed32 != other.rep_fixed32) return false
    if (rep_sfixed32 != other.rep_sfixed32) return false
    if (rep_int64 != other.rep_int64) return false
    if (rep_uint64 != other.rep_uint64) return false
    if (rep_sint64 != other.rep_sint64) return false
    if (rep_fixed64 != other.rep_fixed64) return false
    if (rep_sfixed64 != other.rep_sfixed64) return false
    if (rep_bool != other.rep_bool) return false
    if (rep_float != other.rep_float) return false
    if (rep_double != other.rep_double) return false
    if (rep_string != other.rep_string) return false
    if (rep_bytes != other.rep_bytes) return false
    if (rep_nested_enum != other.rep_nested_enum) return false
    if (rep_nested_message != other.rep_nested_message) return false
    if (pack_int32 != other.pack_int32) return false
    if (pack_uint32 != other.pack_uint32) return false
    if (pack_sint32 != other.pack_sint32) return false
    if (pack_fixed32 != other.pack_fixed32) return false
    if (pack_sfixed32 != other.pack_sfixed32) return false
    if (pack_int64 != other.pack_int64) return false
    if (pack_uint64 != other.pack_uint64) return false
    if (pack_sint64 != other.pack_sint64) return false
    if (pack_fixed64 != other.pack_fixed64) return false
    if (pack_sfixed64 != other.pack_sfixed64) return false
    if (pack_bool != other.pack_bool) return false
    if (pack_float != other.pack_float) return false
    if (pack_double != other.pack_double) return false
    if (pack_nested_enum != other.pack_nested_enum) return false
    if (map_int32_int32 != other.map_int32_int32) return false
    if (map_string_string != other.map_string_string) return false
    if (map_string_message != other.map_string_message) return false
    if (map_string_enum != other.map_string_enum) return false
    if (oneof_string != other.oneof_string) return false
    if (oneof_int32 != other.oneof_int32) return false
    if (oneof_nested_message != other.oneof_nested_message) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + my_int32.hashCode()
      result = result * 37 + my_uint32.hashCode()
      result = result * 37 + my_sint32.hashCode()
      result = result * 37 + my_fixed32.hashCode()
      result = result * 37 + my_sfixed32.hashCode()
      result = result * 37 + my_int64.hashCode()
      result = result * 37 + my_uint64.hashCode()
      result = result * 37 + my_sint64.hashCode()
      result = result * 37 + my_fixed64.hashCode()
      result = result * 37 + my_sfixed64.hashCode()
      result = result * 37 + my_bool.hashCode()
      result = result * 37 + my_float.hashCode()
      result = result * 37 + my_double.hashCode()
      result = result * 37 + my_string.hashCode()
      result = result * 37 + my_bytes.hashCode()
      result = result * 37 + nested_enum.hashCode()
      result = result * 37 + nested_message.hashCode()
      result = result * 37 + rep_int32.hashCode()
      result = result * 37 + rep_uint32.hashCode()
      result = result * 37 + rep_sint32.hashCode()
      result = result * 37 + rep_fixed32.hashCode()
      result = result * 37 + rep_sfixed32.hashCode()
      result = result * 37 + rep_int64.hashCode()
      result = result * 37 + rep_uint64.hashCode()
      result = result * 37 + rep_sint64.hashCode()
      result = result * 37 + rep_fixed64.hashCode()
      result = result * 37 + rep_sfixed64.hashCode()
      result = result * 37 + rep_bool.hashCode()
      result = result * 37 + rep_float.hashCode()
      result = result * 37 + rep_double.hashCode()
      result = result * 37 + rep_string.hashCode()
      result = result * 37 + rep_bytes.hashCode()
      result = result * 37 + rep_nested_enum.hashCode()
      result = result * 37 + rep_nested_message.hashCode()
      result = result * 37 + pack_int32.hashCode()
      result = result * 37 + pack_uint32.hashCode()
      result = result * 37 + pack_sint32.hashCode()
      result = result * 37 + pack_fixed32.hashCode()
      result = result * 37 + pack_sfixed32.hashCode()
      result = result * 37 + pack_int64.hashCode()
      result = result * 37 + pack_uint64.hashCode()
      result = result * 37 + pack_sint64.hashCode()
      result = result * 37 + pack_fixed64.hashCode()
      result = result * 37 + pack_sfixed64.hashCode()
      result = result * 37 + pack_bool.hashCode()
      result = result * 37 + pack_float.hashCode()
      result = result * 37 + pack_double.hashCode()
      result = result * 37 + pack_nested_enum.hashCode()
      result = result * 37 + map_int32_int32.hashCode()
      result = result * 37 + map_string_string.hashCode()
      result = result * 37 + map_string_message.hashCode()
      result = result * 37 + map_string_enum.hashCode()
      result = result * 37 + oneof_string.hashCode()
      result = result * 37 + oneof_int32.hashCode()
      result = result * 37 + oneof_nested_message.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """my_int32=$my_int32"""
    result += """my_uint32=$my_uint32"""
    result += """my_sint32=$my_sint32"""
    result += """my_fixed32=$my_fixed32"""
    result += """my_sfixed32=$my_sfixed32"""
    result += """my_int64=$my_int64"""
    result += """my_uint64=$my_uint64"""
    result += """my_sint64=$my_sint64"""
    result += """my_fixed64=$my_fixed64"""
    result += """my_sfixed64=$my_sfixed64"""
    result += """my_bool=$my_bool"""
    result += """my_float=$my_float"""
    result += """my_double=$my_double"""
    result += """my_string=${sanitize(my_string)}"""
    result += """my_bytes=$my_bytes"""
    result += """nested_enum=$nested_enum"""
    if (nested_message != null) result += """nested_message=$nested_message"""
    if (rep_int32.isNotEmpty()) result += """rep_int32=$rep_int32"""
    if (rep_uint32.isNotEmpty()) result += """rep_uint32=$rep_uint32"""
    if (rep_sint32.isNotEmpty()) result += """rep_sint32=$rep_sint32"""
    if (rep_fixed32.isNotEmpty()) result += """rep_fixed32=$rep_fixed32"""
    if (rep_sfixed32.isNotEmpty()) result += """rep_sfixed32=$rep_sfixed32"""
    if (rep_int64.isNotEmpty()) result += """rep_int64=$rep_int64"""
    if (rep_uint64.isNotEmpty()) result += """rep_uint64=$rep_uint64"""
    if (rep_sint64.isNotEmpty()) result += """rep_sint64=$rep_sint64"""
    if (rep_fixed64.isNotEmpty()) result += """rep_fixed64=$rep_fixed64"""
    if (rep_sfixed64.isNotEmpty()) result += """rep_sfixed64=$rep_sfixed64"""
    if (rep_bool.isNotEmpty()) result += """rep_bool=$rep_bool"""
    if (rep_float.isNotEmpty()) result += """rep_float=$rep_float"""
    if (rep_double.isNotEmpty()) result += """rep_double=$rep_double"""
    if (rep_string.isNotEmpty()) result += """rep_string=${sanitize(rep_string)}"""
    if (rep_bytes.isNotEmpty()) result += """rep_bytes=$rep_bytes"""
    if (rep_nested_enum.isNotEmpty()) result += """rep_nested_enum=$rep_nested_enum"""
    if (rep_nested_message.isNotEmpty()) result += """rep_nested_message=$rep_nested_message"""
    if (pack_int32.isNotEmpty()) result += """pack_int32=$pack_int32"""
    if (pack_uint32.isNotEmpty()) result += """pack_uint32=$pack_uint32"""
    if (pack_sint32.isNotEmpty()) result += """pack_sint32=$pack_sint32"""
    if (pack_fixed32.isNotEmpty()) result += """pack_fixed32=$pack_fixed32"""
    if (pack_sfixed32.isNotEmpty()) result += """pack_sfixed32=$pack_sfixed32"""
    if (pack_int64.isNotEmpty()) result += """pack_int64=$pack_int64"""
    if (pack_uint64.isNotEmpty()) result += """pack_uint64=$pack_uint64"""
    if (pack_sint64.isNotEmpty()) result += """pack_sint64=$pack_sint64"""
    if (pack_fixed64.isNotEmpty()) result += """pack_fixed64=$pack_fixed64"""
    if (pack_sfixed64.isNotEmpty()) result += """pack_sfixed64=$pack_sfixed64"""
    if (pack_bool.isNotEmpty()) result += """pack_bool=$pack_bool"""
    if (pack_float.isNotEmpty()) result += """pack_float=$pack_float"""
    if (pack_double.isNotEmpty()) result += """pack_double=$pack_double"""
    if (pack_nested_enum.isNotEmpty()) result += """pack_nested_enum=$pack_nested_enum"""
    if (map_int32_int32.isNotEmpty()) result += """map_int32_int32=$map_int32_int32"""
    if (map_string_string.isNotEmpty()) result += """map_string_string=$map_string_string"""
    if (map_string_message.isNotEmpty()) result += """map_string_message=$map_string_message"""
    if (map_string_enum.isNotEmpty()) result += """map_string_enum=$map_string_enum"""
    if (oneof_string != null) result += """oneof_string=${sanitize(oneof_string)}"""
    if (oneof_int32 != null) result += """oneof_int32=$oneof_int32"""
    if (oneof_nested_message != null) result += """oneof_nested_message=$oneof_nested_message"""
    return result.joinToString(prefix = "AllTypes{", separator = ", ", postfix = "}")
  }

  fun copy(
    my_int32: Int = this.my_int32,
    my_uint32: Int = this.my_uint32,
    my_sint32: Int = this.my_sint32,
    my_fixed32: Int = this.my_fixed32,
    my_sfixed32: Int = this.my_sfixed32,
    my_int64: Long = this.my_int64,
    my_uint64: Long = this.my_uint64,
    my_sint64: Long = this.my_sint64,
    my_fixed64: Long = this.my_fixed64,
    my_sfixed64: Long = this.my_sfixed64,
    my_bool: Boolean = this.my_bool,
    my_float: Float = this.my_float,
    my_double: Double = this.my_double,
    my_string: String = this.my_string,
    my_bytes: ByteString = this.my_bytes,
    nested_enum: NestedEnum = this.nested_enum,
    nested_message: NestedMessage? = this.nested_message,
    rep_int32: List<Int> = this.rep_int32,
    rep_uint32: List<Int> = this.rep_uint32,
    rep_sint32: List<Int> = this.rep_sint32,
    rep_fixed32: List<Int> = this.rep_fixed32,
    rep_sfixed32: List<Int> = this.rep_sfixed32,
    rep_int64: List<Long> = this.rep_int64,
    rep_uint64: List<Long> = this.rep_uint64,
    rep_sint64: List<Long> = this.rep_sint64,
    rep_fixed64: List<Long> = this.rep_fixed64,
    rep_sfixed64: List<Long> = this.rep_sfixed64,
    rep_bool: List<Boolean> = this.rep_bool,
    rep_float: List<Float> = this.rep_float,
    rep_double: List<Double> = this.rep_double,
    rep_string: List<String> = this.rep_string,
    rep_bytes: List<ByteString> = this.rep_bytes,
    rep_nested_enum: List<NestedEnum> = this.rep_nested_enum,
    rep_nested_message: List<NestedMessage> = this.rep_nested_message,
    pack_int32: List<Int> = this.pack_int32,
    pack_uint32: List<Int> = this.pack_uint32,
    pack_sint32: List<Int> = this.pack_sint32,
    pack_fixed32: List<Int> = this.pack_fixed32,
    pack_sfixed32: List<Int> = this.pack_sfixed32,
    pack_int64: List<Long> = this.pack_int64,
    pack_uint64: List<Long> = this.pack_uint64,
    pack_sint64: List<Long> = this.pack_sint64,
    pack_fixed64: List<Long> = this.pack_fixed64,
    pack_sfixed64: List<Long> = this.pack_sfixed64,
    pack_bool: List<Boolean> = this.pack_bool,
    pack_float: List<Float> = this.pack_float,
    pack_double: List<Double> = this.pack_double,
    pack_nested_enum: List<NestedEnum> = this.pack_nested_enum,
    map_int32_int32: Map<Int, Int> = this.map_int32_int32,
    map_string_string: Map<String, String> = this.map_string_string,
    map_string_message: Map<String, NestedMessage> = this.map_string_message,
    map_string_enum: Map<String, NestedEnum> = this.map_string_enum,
    oneof_string: String? = this.oneof_string,
    oneof_int32: Int? = this.oneof_int32,
    oneof_nested_message: NestedMessage? = this.oneof_nested_message,
    unknownFields: ByteString = this.unknownFields
  ): AllTypes = AllTypes(my_int32, my_uint32, my_sint32, my_fixed32, my_sfixed32, my_int64,
      my_uint64, my_sint64, my_fixed64, my_sfixed64, my_bool, my_float, my_double, my_string,
      my_bytes, nested_enum, nested_message, rep_int32, rep_uint32, rep_sint32, rep_fixed32,
      rep_sfixed32, rep_int64, rep_uint64, rep_sint64, rep_fixed64, rep_sfixed64, rep_bool,
      rep_float, rep_double, rep_string, rep_bytes, rep_nested_enum, rep_nested_message, pack_int32,
      pack_uint32, pack_sint32, pack_fixed32, pack_sfixed32, pack_int64, pack_uint64, pack_sint64,
      pack_fixed64, pack_sfixed64, pack_bool, pack_float, pack_double, pack_nested_enum,
      map_int32_int32, map_string_string, map_string_message, map_string_enum, oneof_string,
      oneof_int32, oneof_nested_message, unknownFields)

  class Builder : Message.Builder<AllTypes, Builder>() {
    @JvmField
    var my_int32: Int = 0

    @JvmField
    var my_uint32: Int = 0

    @JvmField
    var my_sint32: Int = 0

    @JvmField
    var my_fixed32: Int = 0

    @JvmField
    var my_sfixed32: Int = 0

    @JvmField
    var my_int64: Long = 0L

    @JvmField
    var my_uint64: Long = 0L

    @JvmField
    var my_sint64: Long = 0L

    @JvmField
    var my_fixed64: Long = 0L

    @JvmField
    var my_sfixed64: Long = 0L

    @JvmField
    var my_bool: Boolean = false

    @JvmField
    var my_float: Float = 0f

    @JvmField
    var my_double: Double = 0.0

    @JvmField
    var my_string: String = ""

    @JvmField
    var my_bytes: ByteString = ByteString.EMPTY

    @JvmField
    var nested_enum: NestedEnum = NestedEnum.UNKNOWN

    @JvmField
    var nested_message: NestedMessage? = null

    @JvmField
    var rep_int32: List<Int> = emptyList()

    @JvmField
    var rep_uint32: List<Int> = emptyList()

    @JvmField
    var rep_sint32: List<Int> = emptyList()

    @JvmField
    var rep_fixed32: List<Int> = emptyList()

    @JvmField
    var rep_sfixed32: List<Int> = emptyList()

    @JvmField
    var rep_int64: List<Long> = emptyList()

    @JvmField
    var rep_uint64: List<Long> = emptyList()

    @JvmField
    var rep_sint64: List<Long> = emptyList()

    @JvmField
    var rep_fixed64: List<Long> = emptyList()

    @JvmField
    var rep_sfixed64: List<Long> = emptyList()

    @JvmField
    var rep_bool: List<Boolean> = emptyList()

    @JvmField
    var rep_float: List<Float> = emptyList()

    @JvmField
    var rep_double: List<Double> = emptyList()

    @JvmField
    var rep_string: List<String> = emptyList()

    @JvmField
    var rep_bytes: List<ByteString> = emptyList()

    @JvmField
    var rep_nested_enum: List<NestedEnum> = emptyList()

    @JvmField
    var rep_nested_message: List<NestedMessage> = emptyList()

    @JvmField
    var pack_int32: List<Int> = emptyList()

    @JvmField
    var pack_uint32: List<Int> = emptyList()

    @JvmField
    var pack_sint32: List<Int> = emptyList()

    @JvmField
    var pack_fixed32: List<Int> = emptyList()

    @JvmField
    var pack_sfixed32: List<Int> = emptyList()

    @JvmField
    var pack_int64: List<Long> = emptyList()

    @JvmField
    var pack_uint64: List<Long> = emptyList()

    @JvmField
    var pack_sint64: List<Long> = emptyList()

    @JvmField
    var pack_fixed64: List<Long> = emptyList()

    @JvmField
    var pack_sfixed64: List<Long> = emptyList()

    @JvmField
    var pack_bool: List<Boolean> = emptyList()

    @JvmField
    var pack_float: List<Float> = emptyList()

    @JvmField
    var pack_double: List<Double> = emptyList()

    @JvmField
    var pack_nested_enum: List<NestedEnum> = emptyList()

    @JvmField
    var map_int32_int32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_string_string: Map<String, String> = emptyMap()

    @JvmField
    var map_string_message: Map<String, NestedMessage> = emptyMap()

    @JvmField
    var map_string_enum: Map<String, NestedEnum> = emptyMap()

    @JvmField
    var oneof_string: String? = null

    @JvmField
    var oneof_int32: Int? = null

    @JvmField
    var oneof_nested_message: NestedMessage? = null

    fun my_int32(my_int32: Int): Builder {
      this.my_int32 = my_int32
      return this
    }

    fun my_uint32(my_uint32: Int): Builder {
      this.my_uint32 = my_uint32
      return this
    }

    fun my_sint32(my_sint32: Int): Builder {
      this.my_sint32 = my_sint32
      return this
    }

    fun my_fixed32(my_fixed32: Int): Builder {
      this.my_fixed32 = my_fixed32
      return this
    }

    fun my_sfixed32(my_sfixed32: Int): Builder {
      this.my_sfixed32 = my_sfixed32
      return this
    }

    fun my_int64(my_int64: Long): Builder {
      this.my_int64 = my_int64
      return this
    }

    fun my_uint64(my_uint64: Long): Builder {
      this.my_uint64 = my_uint64
      return this
    }

    fun my_sint64(my_sint64: Long): Builder {
      this.my_sint64 = my_sint64
      return this
    }

    fun my_fixed64(my_fixed64: Long): Builder {
      this.my_fixed64 = my_fixed64
      return this
    }

    fun my_sfixed64(my_sfixed64: Long): Builder {
      this.my_sfixed64 = my_sfixed64
      return this
    }

    fun my_bool(my_bool: Boolean): Builder {
      this.my_bool = my_bool
      return this
    }

    fun my_float(my_float: Float): Builder {
      this.my_float = my_float
      return this
    }

    fun my_double(my_double: Double): Builder {
      this.my_double = my_double
      return this
    }

    fun my_string(my_string: String): Builder {
      this.my_string = my_string
      return this
    }

    fun my_bytes(my_bytes: ByteString): Builder {
      this.my_bytes = my_bytes
      return this
    }

    fun nested_enum(nested_enum: NestedEnum): Builder {
      this.nested_enum = nested_enum
      return this
    }

    fun nested_message(nested_message: NestedMessage?): Builder {
      this.nested_message = nested_message
      return this
    }

    fun rep_int32(rep_int32: List<Int>): Builder {
      checkElementsNotNull(rep_int32)
      this.rep_int32 = rep_int32
      return this
    }

    fun rep_uint32(rep_uint32: List<Int>): Builder {
      checkElementsNotNull(rep_uint32)
      this.rep_uint32 = rep_uint32
      return this
    }

    fun rep_sint32(rep_sint32: List<Int>): Builder {
      checkElementsNotNull(rep_sint32)
      this.rep_sint32 = rep_sint32
      return this
    }

    fun rep_fixed32(rep_fixed32: List<Int>): Builder {
      checkElementsNotNull(rep_fixed32)
      this.rep_fixed32 = rep_fixed32
      return this
    }

    fun rep_sfixed32(rep_sfixed32: List<Int>): Builder {
      checkElementsNotNull(rep_sfixed32)
      this.rep_sfixed32 = rep_sfixed32
      return this
    }

    fun rep_int64(rep_int64: List<Long>): Builder {
      checkElementsNotNull(rep_int64)
      this.rep_int64 = rep_int64
      return this
    }

    fun rep_uint64(rep_uint64: List<Long>): Builder {
      checkElementsNotNull(rep_uint64)
      this.rep_uint64 = rep_uint64
      return this
    }

    fun rep_sint64(rep_sint64: List<Long>): Builder {
      checkElementsNotNull(rep_sint64)
      this.rep_sint64 = rep_sint64
      return this
    }

    fun rep_fixed64(rep_fixed64: List<Long>): Builder {
      checkElementsNotNull(rep_fixed64)
      this.rep_fixed64 = rep_fixed64
      return this
    }

    fun rep_sfixed64(rep_sfixed64: List<Long>): Builder {
      checkElementsNotNull(rep_sfixed64)
      this.rep_sfixed64 = rep_sfixed64
      return this
    }

    fun rep_bool(rep_bool: List<Boolean>): Builder {
      checkElementsNotNull(rep_bool)
      this.rep_bool = rep_bool
      return this
    }

    fun rep_float(rep_float: List<Float>): Builder {
      checkElementsNotNull(rep_float)
      this.rep_float = rep_float
      return this
    }

    fun rep_double(rep_double: List<Double>): Builder {
      checkElementsNotNull(rep_double)
      this.rep_double = rep_double
      return this
    }

    fun rep_string(rep_string: List<String>): Builder {
      checkElementsNotNull(rep_string)
      this.rep_string = rep_string
      return this
    }

    fun rep_bytes(rep_bytes: List<ByteString>): Builder {
      checkElementsNotNull(rep_bytes)
      this.rep_bytes = rep_bytes
      return this
    }

    fun rep_nested_enum(rep_nested_enum: List<NestedEnum>): Builder {
      checkElementsNotNull(rep_nested_enum)
      this.rep_nested_enum = rep_nested_enum
      return this
    }

    fun rep_nested_message(rep_nested_message: List<NestedMessage>): Builder {
      checkElementsNotNull(rep_nested_message)
      this.rep_nested_message = rep_nested_message
      return this
    }

    fun pack_int32(pack_int32: List<Int>): Builder {
      checkElementsNotNull(pack_int32)
      this.pack_int32 = pack_int32
      return this
    }

    fun pack_uint32(pack_uint32: List<Int>): Builder {
      checkElementsNotNull(pack_uint32)
      this.pack_uint32 = pack_uint32
      return this
    }

    fun pack_sint32(pack_sint32: List<Int>): Builder {
      checkElementsNotNull(pack_sint32)
      this.pack_sint32 = pack_sint32
      return this
    }

    fun pack_fixed32(pack_fixed32: List<Int>): Builder {
      checkElementsNotNull(pack_fixed32)
      this.pack_fixed32 = pack_fixed32
      return this
    }

    fun pack_sfixed32(pack_sfixed32: List<Int>): Builder {
      checkElementsNotNull(pack_sfixed32)
      this.pack_sfixed32 = pack_sfixed32
      return this
    }

    fun pack_int64(pack_int64: List<Long>): Builder {
      checkElementsNotNull(pack_int64)
      this.pack_int64 = pack_int64
      return this
    }

    fun pack_uint64(pack_uint64: List<Long>): Builder {
      checkElementsNotNull(pack_uint64)
      this.pack_uint64 = pack_uint64
      return this
    }

    fun pack_sint64(pack_sint64: List<Long>): Builder {
      checkElementsNotNull(pack_sint64)
      this.pack_sint64 = pack_sint64
      return this
    }

    fun pack_fixed64(pack_fixed64: List<Long>): Builder {
      checkElementsNotNull(pack_fixed64)
      this.pack_fixed64 = pack_fixed64
      return this
    }

    fun pack_sfixed64(pack_sfixed64: List<Long>): Builder {
      checkElementsNotNull(pack_sfixed64)
      this.pack_sfixed64 = pack_sfixed64
      return this
    }

    fun pack_bool(pack_bool: List<Boolean>): Builder {
      checkElementsNotNull(pack_bool)
      this.pack_bool = pack_bool
      return this
    }

    fun pack_float(pack_float: List<Float>): Builder {
      checkElementsNotNull(pack_float)
      this.pack_float = pack_float
      return this
    }

    fun pack_double(pack_double: List<Double>): Builder {
      checkElementsNotNull(pack_double)
      this.pack_double = pack_double
      return this
    }

    fun pack_nested_enum(pack_nested_enum: List<NestedEnum>): Builder {
      checkElementsNotNull(pack_nested_enum)
      this.pack_nested_enum = pack_nested_enum
      return this
    }

    fun map_int32_int32(map_int32_int32: Map<Int, Int>): Builder {
      this.map_int32_int32 = map_int32_int32
      return this
    }

    fun map_string_string(map_string_string: Map<String, String>): Builder {
      this.map_string_string = map_string_string
      return this
    }

    fun map_string_message(map_string_message: Map<String, NestedMessage>): Builder {
      this.map_string_message = map_string_message
      return this
    }

    fun map_string_enum(map_string_enum: Map<String, NestedEnum>): Builder {
      this.map_string_enum = map_string_enum
      return this
    }

    fun oneof_string(oneof_string: String?): Builder {
      this.oneof_string = oneof_string
      this.oneof_int32 = null
      this.oneof_nested_message = null
      return this
    }

    fun oneof_int32(oneof_int32: Int?): Builder {
      this.oneof_int32 = oneof_int32
      this.oneof_string = null
      this.oneof_nested_message = null
      return this
    }

    fun oneof_nested_message(oneof_nested_message: NestedMessage?): Builder {
      this.oneof_nested_message = oneof_nested_message
      this.oneof_string = null
      this.oneof_int32 = null
      return this
    }

    override fun build(): AllTypes = AllTypes(
      my_int32 = my_int32,
      my_uint32 = my_uint32,
      my_sint32 = my_sint32,
      my_fixed32 = my_fixed32,
      my_sfixed32 = my_sfixed32,
      my_int64 = my_int64,
      my_uint64 = my_uint64,
      my_sint64 = my_sint64,
      my_fixed64 = my_fixed64,
      my_sfixed64 = my_sfixed64,
      my_bool = my_bool,
      my_float = my_float,
      my_double = my_double,
      my_string = my_string,
      my_bytes = my_bytes,
      nested_enum = nested_enum,
      nested_message = nested_message,
      rep_int32 = rep_int32,
      rep_uint32 = rep_uint32,
      rep_sint32 = rep_sint32,
      rep_fixed32 = rep_fixed32,
      rep_sfixed32 = rep_sfixed32,
      rep_int64 = rep_int64,
      rep_uint64 = rep_uint64,
      rep_sint64 = rep_sint64,
      rep_fixed64 = rep_fixed64,
      rep_sfixed64 = rep_sfixed64,
      rep_bool = rep_bool,
      rep_float = rep_float,
      rep_double = rep_double,
      rep_string = rep_string,
      rep_bytes = rep_bytes,
      rep_nested_enum = rep_nested_enum,
      rep_nested_message = rep_nested_message,
      pack_int32 = pack_int32,
      pack_uint32 = pack_uint32,
      pack_sint32 = pack_sint32,
      pack_fixed32 = pack_fixed32,
      pack_sfixed32 = pack_sfixed32,
      pack_int64 = pack_int64,
      pack_uint64 = pack_uint64,
      pack_sint64 = pack_sint64,
      pack_fixed64 = pack_fixed64,
      pack_sfixed64 = pack_sfixed64,
      pack_bool = pack_bool,
      pack_float = pack_float,
      pack_double = pack_double,
      pack_nested_enum = pack_nested_enum,
      map_int32_int32 = map_int32_int32,
      map_string_string = map_string_string,
      map_string_message = map_string_message,
      map_string_enum = map_string_enum,
      oneof_string = oneof_string,
      oneof_int32 = oneof_int32,
      oneof_nested_message = oneof_nested_message,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<AllTypes> = object : ProtoAdapter<AllTypes>(
      FieldEncoding.LENGTH_DELIMITED, 
      AllTypes::class, 
      "type.googleapis.com/squareup.proto3.AllTypes", 
      PROTO_3, 
      null
    ) {
      private val map_int32_int32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32) }

      private val map_string_stringAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      private val map_string_messageAdapter: ProtoAdapter<Map<String, NestedMessage>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedMessage.ADAPTER) }

      private val map_string_enumAdapter: ProtoAdapter<Map<String, NestedEnum>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedEnum.ADAPTER) }

      override fun encodedSize(value: AllTypes): Int {
        var size = value.unknownFields.size
        if (value.my_int32 != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.my_int32)
        if (value.my_uint32 != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(2, value.my_uint32)
        if (value.my_sint32 != 0) size += ProtoAdapter.SINT32.encodedSizeWithTag(3, value.my_sint32)
        if (value.my_fixed32 != 0) size += ProtoAdapter.FIXED32.encodedSizeWithTag(4,
            value.my_fixed32)
        if (value.my_sfixed32 != 0) size += ProtoAdapter.SFIXED32.encodedSizeWithTag(5,
            value.my_sfixed32)
        if (value.my_int64 != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(6, value.my_int64)
        if (value.my_uint64 != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(7,
            value.my_uint64)
        if (value.my_sint64 != 0L) size += ProtoAdapter.SINT64.encodedSizeWithTag(8,
            value.my_sint64)
        if (value.my_fixed64 != 0L) size += ProtoAdapter.FIXED64.encodedSizeWithTag(9,
            value.my_fixed64)
        if (value.my_sfixed64 != 0L) size += ProtoAdapter.SFIXED64.encodedSizeWithTag(10,
            value.my_sfixed64)
        if (value.my_bool != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(11, value.my_bool)
        if (value.my_float != 0f) size += ProtoAdapter.FLOAT.encodedSizeWithTag(12, value.my_float)
        if (value.my_double != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(13,
            value.my_double)
        if (value.my_string != "") size += ProtoAdapter.STRING.encodedSizeWithTag(14,
            value.my_string)
        if (value.my_bytes != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(15,
            value.my_bytes)
        if (value.nested_enum != NestedEnum.UNKNOWN) size +=
            NestedEnum.ADAPTER.encodedSizeWithTag(16, value.nested_enum)
        if (value.nested_message != null) size += NestedMessage.ADAPTER.encodedSizeWithTag(17,
            value.nested_message)
        size += ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.rep_int32)
        size += ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.rep_uint32)
        size += ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.rep_sint32)
        size += ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.rep_fixed32)
        size += ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.rep_sfixed32)
        size += ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.rep_int64)
        size += ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.rep_uint64)
        size += ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.rep_sint64)
        size += ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.rep_fixed64)
        size += ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.rep_sfixed64)
        size += ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.rep_bool)
        size += ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.rep_float)
        size += ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.rep_double)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.rep_string)
        size += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.rep_bytes)
        size += NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(216, value.rep_nested_enum)
        size += NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(217, value.rep_nested_message)
        size += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(301, value.pack_int32)
        size += ProtoAdapter.UINT32.asPacked().encodedSizeWithTag(302, value.pack_uint32)
        size += ProtoAdapter.SINT32.asPacked().encodedSizeWithTag(303, value.pack_sint32)
        size += ProtoAdapter.FIXED32.asPacked().encodedSizeWithTag(304, value.pack_fixed32)
        size += ProtoAdapter.SFIXED32.asPacked().encodedSizeWithTag(305, value.pack_sfixed32)
        size += ProtoAdapter.INT64.asPacked().encodedSizeWithTag(306, value.pack_int64)
        size += ProtoAdapter.UINT64.asPacked().encodedSizeWithTag(307, value.pack_uint64)
        size += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(308, value.pack_sint64)
        size += ProtoAdapter.FIXED64.asPacked().encodedSizeWithTag(309, value.pack_fixed64)
        size += ProtoAdapter.SFIXED64.asPacked().encodedSizeWithTag(310, value.pack_sfixed64)
        size += ProtoAdapter.BOOL.asPacked().encodedSizeWithTag(311, value.pack_bool)
        size += ProtoAdapter.FLOAT.asPacked().encodedSizeWithTag(312, value.pack_float)
        size += ProtoAdapter.DOUBLE.asPacked().encodedSizeWithTag(313, value.pack_double)
        size += NestedEnum.ADAPTER.asPacked().encodedSizeWithTag(316, value.pack_nested_enum)
        size += map_int32_int32Adapter.encodedSizeWithTag(501, value.map_int32_int32)
        size += map_string_stringAdapter.encodedSizeWithTag(502, value.map_string_string)
        size += map_string_messageAdapter.encodedSizeWithTag(503, value.map_string_message)
        size += map_string_enumAdapter.encodedSizeWithTag(504, value.map_string_enum)
        size += ProtoAdapter.STRING.encodedSizeWithTag(601, value.oneof_string)
        size += ProtoAdapter.INT32.encodedSizeWithTag(602, value.oneof_int32)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(603, value.oneof_nested_message)
        return size
      }

      override fun encode(writer: ProtoWriter, value: AllTypes) {
        if (value.my_int32 != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.my_int32)
        if (value.my_uint32 != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.my_uint32)
        if (value.my_sint32 != 0) ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.my_sint32)
        if (value.my_fixed32 != 0) ProtoAdapter.FIXED32.encodeWithTag(writer, 4, value.my_fixed32)
        if (value.my_sfixed32 != 0) ProtoAdapter.SFIXED32.encodeWithTag(writer, 5,
            value.my_sfixed32)
        if (value.my_int64 != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.my_int64)
        if (value.my_uint64 != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.my_uint64)
        if (value.my_sint64 != 0L) ProtoAdapter.SINT64.encodeWithTag(writer, 8, value.my_sint64)
        if (value.my_fixed64 != 0L) ProtoAdapter.FIXED64.encodeWithTag(writer, 9, value.my_fixed64)
        if (value.my_sfixed64 != 0L) ProtoAdapter.SFIXED64.encodeWithTag(writer, 10,
            value.my_sfixed64)
        if (value.my_bool != false) ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.my_bool)
        if (value.my_float != 0f) ProtoAdapter.FLOAT.encodeWithTag(writer, 12, value.my_float)
        if (value.my_double != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 13, value.my_double)
        if (value.my_string != "") ProtoAdapter.STRING.encodeWithTag(writer, 14, value.my_string)
        if (value.my_bytes != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 15,
            value.my_bytes)
        if (value.nested_enum != NestedEnum.UNKNOWN) NestedEnum.ADAPTER.encodeWithTag(writer, 16,
            value.nested_enum)
        if (value.nested_message != null) NestedMessage.ADAPTER.encodeWithTag(writer, 17,
            value.nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.rep_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.rep_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.rep_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.rep_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.rep_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.rep_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.rep_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.rep_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.rep_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.rep_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.rep_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.rep_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.rep_double)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.rep_string)
        ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.rep_bytes)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.rep_nested_enum)
        NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 217, value.rep_nested_message)
        ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 301, value.pack_int32)
        ProtoAdapter.UINT32.asPacked().encodeWithTag(writer, 302, value.pack_uint32)
        ProtoAdapter.SINT32.asPacked().encodeWithTag(writer, 303, value.pack_sint32)
        ProtoAdapter.FIXED32.asPacked().encodeWithTag(writer, 304, value.pack_fixed32)
        ProtoAdapter.SFIXED32.asPacked().encodeWithTag(writer, 305, value.pack_sfixed32)
        ProtoAdapter.INT64.asPacked().encodeWithTag(writer, 306, value.pack_int64)
        ProtoAdapter.UINT64.asPacked().encodeWithTag(writer, 307, value.pack_uint64)
        ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 308, value.pack_sint64)
        ProtoAdapter.FIXED64.asPacked().encodeWithTag(writer, 309, value.pack_fixed64)
        ProtoAdapter.SFIXED64.asPacked().encodeWithTag(writer, 310, value.pack_sfixed64)
        ProtoAdapter.BOOL.asPacked().encodeWithTag(writer, 311, value.pack_bool)
        ProtoAdapter.FLOAT.asPacked().encodeWithTag(writer, 312, value.pack_float)
        ProtoAdapter.DOUBLE.asPacked().encodeWithTag(writer, 313, value.pack_double)
        NestedEnum.ADAPTER.asPacked().encodeWithTag(writer, 316, value.pack_nested_enum)
        map_int32_int32Adapter.encodeWithTag(writer, 501, value.map_int32_int32)
        map_string_stringAdapter.encodeWithTag(writer, 502, value.map_string_string)
        map_string_messageAdapter.encodeWithTag(writer, 503, value.map_string_message)
        map_string_enumAdapter.encodeWithTag(writer, 504, value.map_string_enum)
        ProtoAdapter.STRING.encodeWithTag(writer, 601, value.oneof_string)
        ProtoAdapter.INT32.encodeWithTag(writer, 602, value.oneof_int32)
        NestedMessage.ADAPTER.encodeWithTag(writer, 603, value.oneof_nested_message)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): AllTypes {
        var my_int32: Int = 0
        var my_uint32: Int = 0
        var my_sint32: Int = 0
        var my_fixed32: Int = 0
        var my_sfixed32: Int = 0
        var my_int64: Long = 0L
        var my_uint64: Long = 0L
        var my_sint64: Long = 0L
        var my_fixed64: Long = 0L
        var my_sfixed64: Long = 0L
        var my_bool: Boolean = false
        var my_float: Float = 0f
        var my_double: Double = 0.0
        var my_string: String = ""
        var my_bytes: ByteString = ByteString.EMPTY
        var nested_enum: NestedEnum = NestedEnum.UNKNOWN
        var nested_message: NestedMessage? = null
        val rep_int32 = mutableListOf<Int>()
        val rep_uint32 = mutableListOf<Int>()
        val rep_sint32 = mutableListOf<Int>()
        val rep_fixed32 = mutableListOf<Int>()
        val rep_sfixed32 = mutableListOf<Int>()
        val rep_int64 = mutableListOf<Long>()
        val rep_uint64 = mutableListOf<Long>()
        val rep_sint64 = mutableListOf<Long>()
        val rep_fixed64 = mutableListOf<Long>()
        val rep_sfixed64 = mutableListOf<Long>()
        val rep_bool = mutableListOf<Boolean>()
        val rep_float = mutableListOf<Float>()
        val rep_double = mutableListOf<Double>()
        val rep_string = mutableListOf<String>()
        val rep_bytes = mutableListOf<ByteString>()
        val rep_nested_enum = mutableListOf<NestedEnum>()
        val rep_nested_message = mutableListOf<NestedMessage>()
        val pack_int32 = mutableListOf<Int>()
        val pack_uint32 = mutableListOf<Int>()
        val pack_sint32 = mutableListOf<Int>()
        val pack_fixed32 = mutableListOf<Int>()
        val pack_sfixed32 = mutableListOf<Int>()
        val pack_int64 = mutableListOf<Long>()
        val pack_uint64 = mutableListOf<Long>()
        val pack_sint64 = mutableListOf<Long>()
        val pack_fixed64 = mutableListOf<Long>()
        val pack_sfixed64 = mutableListOf<Long>()
        val pack_bool = mutableListOf<Boolean>()
        val pack_float = mutableListOf<Float>()
        val pack_double = mutableListOf<Double>()
        val pack_nested_enum = mutableListOf<NestedEnum>()
        val map_int32_int32 = mutableMapOf<Int, Int>()
        val map_string_string = mutableMapOf<String, String>()
        val map_string_message = mutableMapOf<String, NestedMessage>()
        val map_string_enum = mutableMapOf<String, NestedEnum>()
        var oneof_string: String? = null
        var oneof_int32: Int? = null
        var oneof_nested_message: NestedMessage? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> my_int32 = ProtoAdapter.INT32.decode(reader)
            2 -> my_uint32 = ProtoAdapter.UINT32.decode(reader)
            3 -> my_sint32 = ProtoAdapter.SINT32.decode(reader)
            4 -> my_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            5 -> my_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            6 -> my_int64 = ProtoAdapter.INT64.decode(reader)
            7 -> my_uint64 = ProtoAdapter.UINT64.decode(reader)
            8 -> my_sint64 = ProtoAdapter.SINT64.decode(reader)
            9 -> my_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            10 -> my_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            11 -> my_bool = ProtoAdapter.BOOL.decode(reader)
            12 -> my_float = ProtoAdapter.FLOAT.decode(reader)
            13 -> my_double = ProtoAdapter.DOUBLE.decode(reader)
            14 -> my_string = ProtoAdapter.STRING.decode(reader)
            15 -> my_bytes = ProtoAdapter.BYTES.decode(reader)
            16 -> try {
              nested_enum = NestedEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            17 -> nested_message = NestedMessage.ADAPTER.decode(reader)
            201 -> rep_int32.add(ProtoAdapter.INT32.decode(reader))
            202 -> rep_uint32.add(ProtoAdapter.UINT32.decode(reader))
            203 -> rep_sint32.add(ProtoAdapter.SINT32.decode(reader))
            204 -> rep_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            205 -> rep_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            206 -> rep_int64.add(ProtoAdapter.INT64.decode(reader))
            207 -> rep_uint64.add(ProtoAdapter.UINT64.decode(reader))
            208 -> rep_sint64.add(ProtoAdapter.SINT64.decode(reader))
            209 -> rep_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            210 -> rep_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            211 -> rep_bool.add(ProtoAdapter.BOOL.decode(reader))
            212 -> rep_float.add(ProtoAdapter.FLOAT.decode(reader))
            213 -> rep_double.add(ProtoAdapter.DOUBLE.decode(reader))
            214 -> rep_string.add(ProtoAdapter.STRING.decode(reader))
            215 -> rep_bytes.add(ProtoAdapter.BYTES.decode(reader))
            216 -> try {
              rep_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            217 -> rep_nested_message.add(NestedMessage.ADAPTER.decode(reader))
            301 -> pack_int32.add(ProtoAdapter.INT32.decode(reader))
            302 -> pack_uint32.add(ProtoAdapter.UINT32.decode(reader))
            303 -> pack_sint32.add(ProtoAdapter.SINT32.decode(reader))
            304 -> pack_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            305 -> pack_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            306 -> pack_int64.add(ProtoAdapter.INT64.decode(reader))
            307 -> pack_uint64.add(ProtoAdapter.UINT64.decode(reader))
            308 -> pack_sint64.add(ProtoAdapter.SINT64.decode(reader))
            309 -> pack_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            310 -> pack_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            311 -> pack_bool.add(ProtoAdapter.BOOL.decode(reader))
            312 -> pack_float.add(ProtoAdapter.FLOAT.decode(reader))
            313 -> pack_double.add(ProtoAdapter.DOUBLE.decode(reader))
            316 -> try {
              pack_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            501 -> map_int32_int32.putAll(map_int32_int32Adapter.decode(reader))
            502 -> map_string_string.putAll(map_string_stringAdapter.decode(reader))
            503 -> map_string_message.putAll(map_string_messageAdapter.decode(reader))
            504 -> map_string_enum.putAll(map_string_enumAdapter.decode(reader))
            601 -> oneof_string = ProtoAdapter.STRING.decode(reader)
            602 -> oneof_int32 = ProtoAdapter.INT32.decode(reader)
            603 -> oneof_nested_message = NestedMessage.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AllTypes(
          my_int32 = my_int32,
          my_uint32 = my_uint32,
          my_sint32 = my_sint32,
          my_fixed32 = my_fixed32,
          my_sfixed32 = my_sfixed32,
          my_int64 = my_int64,
          my_uint64 = my_uint64,
          my_sint64 = my_sint64,
          my_fixed64 = my_fixed64,
          my_sfixed64 = my_sfixed64,
          my_bool = my_bool,
          my_float = my_float,
          my_double = my_double,
          my_string = my_string,
          my_bytes = my_bytes,
          nested_enum = nested_enum,
          nested_message = nested_message,
          rep_int32 = rep_int32,
          rep_uint32 = rep_uint32,
          rep_sint32 = rep_sint32,
          rep_fixed32 = rep_fixed32,
          rep_sfixed32 = rep_sfixed32,
          rep_int64 = rep_int64,
          rep_uint64 = rep_uint64,
          rep_sint64 = rep_sint64,
          rep_fixed64 = rep_fixed64,
          rep_sfixed64 = rep_sfixed64,
          rep_bool = rep_bool,
          rep_float = rep_float,
          rep_double = rep_double,
          rep_string = rep_string,
          rep_bytes = rep_bytes,
          rep_nested_enum = rep_nested_enum,
          rep_nested_message = rep_nested_message,
          pack_int32 = pack_int32,
          pack_uint32 = pack_uint32,
          pack_sint32 = pack_sint32,
          pack_fixed32 = pack_fixed32,
          pack_sfixed32 = pack_sfixed32,
          pack_int64 = pack_int64,
          pack_uint64 = pack_uint64,
          pack_sint64 = pack_sint64,
          pack_fixed64 = pack_fixed64,
          pack_sfixed64 = pack_sfixed64,
          pack_bool = pack_bool,
          pack_float = pack_float,
          pack_double = pack_double,
          pack_nested_enum = pack_nested_enum,
          map_int32_int32 = map_int32_int32,
          map_string_string = map_string_string,
          map_string_message = map_string_message,
          map_string_enum = map_string_enum,
          oneof_string = oneof_string,
          oneof_int32 = oneof_int32,
          oneof_nested_message = oneof_nested_message,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: AllTypes): AllTypes = value.copy(
        nested_message = value.nested_message?.let(NestedMessage.ADAPTER::redact),
        rep_nested_message = value.rep_nested_message.redactElements(NestedMessage.ADAPTER),
        map_string_message = value.map_string_message.redactElements(NestedMessage.ADAPTER),
        oneof_nested_message = value.oneof_nested_message?.let(NestedMessage.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class NestedEnum(
    override val value: Int
  ) : WireEnum {
    UNKNOWN(0),

    A(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NestedEnum> = object : EnumAdapter<NestedEnum>(
        NestedEnum::class, 
        PROTO_3, 
        NestedEnum.UNKNOWN
      ) {
        override fun fromValue(value: Int): NestedEnum? = NestedEnum.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): NestedEnum? = when (value) {
        0 -> UNKNOWN
        1 -> A
        else -> null
      }
    }
  }

  class NestedMessage(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.OMIT_IDENTITY
    )
    @JvmField
    val a: Int = 0,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<NestedMessage, NestedMessage.Builder>(ADAPTER, unknownFields) {
    override fun newBuilder(): Builder {
      val builder = Builder()
      builder.a = a
      builder.addUnknownFields(unknownFields)
      return builder
    }

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is NestedMessage) return false
      if (unknownFields != other.unknownFields) return false
      if (a != other.a) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + a.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """a=$a"""
      return result.joinToString(prefix = "NestedMessage{", separator = ", ", postfix = "}")
    }

    fun copy(a: Int = this.a, unknownFields: ByteString = this.unknownFields): NestedMessage =
        NestedMessage(a, unknownFields)

    class Builder : Message.Builder<NestedMessage, Builder>() {
      @JvmField
      var a: Int = 0

      fun a(a: Int): Builder {
        this.a = a
        return this
      }

      override fun build(): NestedMessage = NestedMessage(
        a = a,
        unknownFields = buildUnknownFields()
      )
    }

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NestedMessage> = object : ProtoAdapter<NestedMessage>(
        FieldEncoding.LENGTH_DELIMITED, 
        NestedMessage::class, 
        "type.googleapis.com/squareup.proto3.AllTypes.NestedMessage", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: NestedMessage): Int {
          var size = value.unknownFields.size
          if (value.a != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.a)
          return size
        }

        override fun encode(writer: ProtoWriter, value: NestedMessage) {
          if (value.a != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.a)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): NestedMessage {
          var a: Int = 0
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> a = ProtoAdapter.INT32.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return NestedMessage(
            a = a,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: NestedMessage): NestedMessage = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
