// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.proto2.AllTypes in all_types_proto2.proto
package com.squareup.wire.proto2.alltypes

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.checkElementsNotNull
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.missingRequiredFields
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.lazy
import okio.ByteString
import okio.ByteString.Companion.decodeBase64

class AllTypes(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val opt_int32: Int? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  @JvmField
  val opt_uint32: Int? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  @JvmField
  val opt_sint32: Int? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  @JvmField
  val opt_fixed32: Int? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  @JvmField
  val opt_sfixed32: Int? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val opt_int64: Long? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  @JvmField
  val opt_uint64: Long? = null,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  @JvmField
  val opt_sint64: Long? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  @JvmField
  val opt_fixed64: Long? = null,
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  @JvmField
  val opt_sfixed64: Long? = null,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @JvmField
  val opt_bool: Boolean? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  @JvmField
  val opt_float: Float? = null,
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @JvmField
  val opt_double: Double? = null,
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val opt_string: String? = null,
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  @JvmField
  val opt_bytes: ByteString? = null,
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  @JvmField
  val opt_nested_enum: NestedEnum? = null,
  @field:WireField(
    tag = 17,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  @JvmField
  val opt_nested_message: NestedMessage? = null,
  @field:WireField(
    tag = 101,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_int32: Int,
  @field:WireField(
    tag = 102,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_uint32: Int,
  @field:WireField(
    tag = 103,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_sint32: Int,
  @field:WireField(
    tag = 104,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_fixed32: Int,
  @field:WireField(
    tag = 105,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_sfixed32: Int,
  @field:WireField(
    tag = 106,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_int64: Long,
  @field:WireField(
    tag = 107,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_uint64: Long,
  @field:WireField(
    tag = 108,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_sint64: Long,
  @field:WireField(
    tag = 109,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_fixed64: Long,
  @field:WireField(
    tag = 110,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_sfixed64: Long,
  @field:WireField(
    tag = 111,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_bool: Boolean,
  @field:WireField(
    tag = 112,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_float: Float,
  @field:WireField(
    tag = 113,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_double: Double,
  @field:WireField(
    tag = 114,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_string: String,
  @field:WireField(
    tag = 115,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_bytes: ByteString,
  @field:WireField(
    tag = 116,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_nested_enum: NestedEnum,
  @field:WireField(
    tag = 117,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REQUIRED
  )
  @JvmField
  val req_nested_message: NestedMessage,
  rep_int32: List<Int> = emptyList(),
  rep_uint32: List<Int> = emptyList(),
  rep_sint32: List<Int> = emptyList(),
  rep_fixed32: List<Int> = emptyList(),
  rep_sfixed32: List<Int> = emptyList(),
  rep_int64: List<Long> = emptyList(),
  rep_uint64: List<Long> = emptyList(),
  rep_sint64: List<Long> = emptyList(),
  rep_fixed64: List<Long> = emptyList(),
  rep_sfixed64: List<Long> = emptyList(),
  rep_bool: List<Boolean> = emptyList(),
  rep_float: List<Float> = emptyList(),
  rep_double: List<Double> = emptyList(),
  rep_string: List<String> = emptyList(),
  rep_bytes: List<ByteString> = emptyList(),
  rep_nested_enum: List<NestedEnum> = emptyList(),
  rep_nested_message: List<NestedMessage> = emptyList(),
  pack_int32: List<Int> = emptyList(),
  pack_uint32: List<Int> = emptyList(),
  pack_sint32: List<Int> = emptyList(),
  pack_fixed32: List<Int> = emptyList(),
  pack_sfixed32: List<Int> = emptyList(),
  pack_int64: List<Long> = emptyList(),
  pack_uint64: List<Long> = emptyList(),
  pack_sint64: List<Long> = emptyList(),
  pack_fixed64: List<Long> = emptyList(),
  pack_sfixed64: List<Long> = emptyList(),
  pack_bool: List<Boolean> = emptyList(),
  pack_float: List<Float> = emptyList(),
  pack_double: List<Double> = emptyList(),
  pack_nested_enum: List<NestedEnum> = emptyList(),
  @field:WireField(
    tag = 401,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val default_int32: Int? = null,
  @field:WireField(
    tag = 402,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  @JvmField
  val default_uint32: Int? = null,
  @field:WireField(
    tag = 403,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  @JvmField
  val default_sint32: Int? = null,
  @field:WireField(
    tag = 404,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  @JvmField
  val default_fixed32: Int? = null,
  @field:WireField(
    tag = 405,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  @JvmField
  val default_sfixed32: Int? = null,
  @field:WireField(
    tag = 406,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val default_int64: Long? = null,
  @field:WireField(
    tag = 407,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  @JvmField
  val default_uint64: Long? = null,
  @field:WireField(
    tag = 408,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  @JvmField
  val default_sint64: Long? = null,
  @field:WireField(
    tag = 409,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  @JvmField
  val default_fixed64: Long? = null,
  @field:WireField(
    tag = 410,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  @JvmField
  val default_sfixed64: Long? = null,
  @field:WireField(
    tag = 411,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @JvmField
  val default_bool: Boolean? = null,
  @field:WireField(
    tag = 412,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  @JvmField
  val default_float: Float? = null,
  @field:WireField(
    tag = 413,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @JvmField
  val default_double: Double? = null,
  @field:WireField(
    tag = 414,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val default_string: String? = null,
  @field:WireField(
    tag = 415,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  @JvmField
  val default_bytes: ByteString? = null,
  @field:WireField(
    tag = 416,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  @JvmField
  val default_nested_enum: NestedEnum? = null,
  map_int32_int32: Map<Int, Int> = emptyMap(),
  map_string_string: Map<String, String> = emptyMap(),
  map_string_message: Map<String, NestedMessage> = emptyMap(),
  map_string_enum: Map<String, NestedEnum> = emptyMap(),
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1001,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val ext_opt_int32: Int? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1002,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  @JvmField
  val ext_opt_uint32: Int? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1003,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  @JvmField
  val ext_opt_sint32: Int? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1004,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  @JvmField
  val ext_opt_fixed32: Int? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1005,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  @JvmField
  val ext_opt_sfixed32: Int? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1006,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  val ext_opt_int64: Long? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1007,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  @JvmField
  val ext_opt_uint64: Long? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1008,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  @JvmField
  val ext_opt_sint64: Long? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1009,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  @JvmField
  val ext_opt_fixed64: Long? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1010,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  @JvmField
  val ext_opt_sfixed64: Long? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1011,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @JvmField
  val ext_opt_bool: Boolean? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1012,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  @JvmField
  val ext_opt_float: Float? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1013,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @JvmField
  val ext_opt_double: Double? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1014,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val ext_opt_string: String? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1015,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  @JvmField
  val ext_opt_bytes: ByteString? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1016,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  @JvmField
  val ext_opt_nested_enum: NestedEnum? = null,
  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1017,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  @JvmField
  val ext_opt_nested_message: NestedMessage? = null,
  ext_rep_int32: List<Int> = emptyList(),
  ext_rep_uint32: List<Int> = emptyList(),
  ext_rep_sint32: List<Int> = emptyList(),
  ext_rep_fixed32: List<Int> = emptyList(),
  ext_rep_sfixed32: List<Int> = emptyList(),
  ext_rep_int64: List<Long> = emptyList(),
  ext_rep_uint64: List<Long> = emptyList(),
  ext_rep_sint64: List<Long> = emptyList(),
  ext_rep_fixed64: List<Long> = emptyList(),
  ext_rep_sfixed64: List<Long> = emptyList(),
  ext_rep_bool: List<Boolean> = emptyList(),
  ext_rep_float: List<Float> = emptyList(),
  ext_rep_double: List<Double> = emptyList(),
  ext_rep_string: List<String> = emptyList(),
  ext_rep_bytes: List<ByteString> = emptyList(),
  ext_rep_nested_enum: List<NestedEnum> = emptyList(),
  ext_rep_nested_message: List<NestedMessage> = emptyList(),
  ext_pack_int32: List<Int> = emptyList(),
  ext_pack_uint32: List<Int> = emptyList(),
  ext_pack_sint32: List<Int> = emptyList(),
  ext_pack_fixed32: List<Int> = emptyList(),
  ext_pack_sfixed32: List<Int> = emptyList(),
  ext_pack_int64: List<Long> = emptyList(),
  ext_pack_uint64: List<Long> = emptyList(),
  ext_pack_sint64: List<Long> = emptyList(),
  ext_pack_fixed64: List<Long> = emptyList(),
  ext_pack_sfixed64: List<Long> = emptyList(),
  ext_pack_bool: List<Boolean> = emptyList(),
  ext_pack_float: List<Float> = emptyList(),
  ext_pack_double: List<Double> = emptyList(),
  ext_pack_nested_enum: List<NestedEnum> = emptyList(),
  @field:WireField(
    tag = 601,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val oneof_string: String? = null,
  @field:WireField(
    tag = 602,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val oneof_int32: Int? = null,
  @field:WireField(
    tag = 603,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  @JvmField
  val oneof_nested_message: NestedMessage? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AllTypes, AllTypes.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 201,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_int32: List<Int> = immutableCopyOf("rep_int32", rep_int32)

  @field:WireField(
    tag = 202,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_uint32: List<Int> = immutableCopyOf("rep_uint32", rep_uint32)

  @field:WireField(
    tag = 203,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_sint32: List<Int> = immutableCopyOf("rep_sint32", rep_sint32)

  @field:WireField(
    tag = 204,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_fixed32: List<Int> = immutableCopyOf("rep_fixed32", rep_fixed32)

  @field:WireField(
    tag = 205,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_sfixed32: List<Int> = immutableCopyOf("rep_sfixed32", rep_sfixed32)

  @field:WireField(
    tag = 206,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_int64: List<Long> = immutableCopyOf("rep_int64", rep_int64)

  @field:WireField(
    tag = 207,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_uint64: List<Long> = immutableCopyOf("rep_uint64", rep_uint64)

  @field:WireField(
    tag = 208,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_sint64: List<Long> = immutableCopyOf("rep_sint64", rep_sint64)

  @field:WireField(
    tag = 209,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_fixed64: List<Long> = immutableCopyOf("rep_fixed64", rep_fixed64)

  @field:WireField(
    tag = 210,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_sfixed64: List<Long> = immutableCopyOf("rep_sfixed64", rep_sfixed64)

  @field:WireField(
    tag = 211,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_bool: List<Boolean> = immutableCopyOf("rep_bool", rep_bool)

  @field:WireField(
    tag = 212,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_float: List<Float> = immutableCopyOf("rep_float", rep_float)

  @field:WireField(
    tag = 213,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_double: List<Double> = immutableCopyOf("rep_double", rep_double)

  @field:WireField(
    tag = 214,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_string: List<String> = immutableCopyOf("rep_string", rep_string)

  @field:WireField(
    tag = 215,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_bytes: List<ByteString> = immutableCopyOf("rep_bytes", rep_bytes)

  @field:WireField(
    tag = 216,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_nested_enum: List<NestedEnum> = immutableCopyOf("rep_nested_enum", rep_nested_enum)

  @field:WireField(
    tag = 217,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val rep_nested_message: List<NestedMessage> = immutableCopyOf("rep_nested_message",
      rep_nested_message)

  @field:WireField(
    tag = 301,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_int32: List<Int> = immutableCopyOf("pack_int32", pack_int32)

  @field:WireField(
    tag = 302,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_uint32: List<Int> = immutableCopyOf("pack_uint32", pack_uint32)

  @field:WireField(
    tag = 303,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_sint32: List<Int> = immutableCopyOf("pack_sint32", pack_sint32)

  @field:WireField(
    tag = 304,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_fixed32: List<Int> = immutableCopyOf("pack_fixed32", pack_fixed32)

  @field:WireField(
    tag = 305,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_sfixed32: List<Int> = immutableCopyOf("pack_sfixed32", pack_sfixed32)

  @field:WireField(
    tag = 306,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_int64: List<Long> = immutableCopyOf("pack_int64", pack_int64)

  @field:WireField(
    tag = 307,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_uint64: List<Long> = immutableCopyOf("pack_uint64", pack_uint64)

  @field:WireField(
    tag = 308,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_sint64: List<Long> = immutableCopyOf("pack_sint64", pack_sint64)

  @field:WireField(
    tag = 309,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_fixed64: List<Long> = immutableCopyOf("pack_fixed64", pack_fixed64)

  @field:WireField(
    tag = 310,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_sfixed64: List<Long> = immutableCopyOf("pack_sfixed64", pack_sfixed64)

  @field:WireField(
    tag = 311,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_bool: List<Boolean> = immutableCopyOf("pack_bool", pack_bool)

  @field:WireField(
    tag = 312,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_float: List<Float> = immutableCopyOf("pack_float", pack_float)

  @field:WireField(
    tag = 313,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_double: List<Double> = immutableCopyOf("pack_double", pack_double)

  @field:WireField(
    tag = 316,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.PACKED
  )
  @JvmField
  val pack_nested_enum: List<NestedEnum> = immutableCopyOf("pack_nested_enum", pack_nested_enum)

  @field:WireField(
    tag = 501,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @JvmField
  val map_int32_int32: Map<Int, Int> = immutableCopyOf("map_int32_int32", map_int32_int32)

  @field:WireField(
    tag = 502,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  val map_string_string: Map<String, String> = immutableCopyOf("map_string_string",
      map_string_string)

  @field:WireField(
    tag = 503,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER"
  )
  @JvmField
  val map_string_message: Map<String, NestedMessage> = immutableCopyOf("map_string_message",
      map_string_message)

  @field:WireField(
    tag = 504,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER"
  )
  @JvmField
  val map_string_enum: Map<String, NestedEnum> = immutableCopyOf("map_string_enum", map_string_enum)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1101,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_int32: List<Int> = immutableCopyOf("ext_rep_int32", ext_rep_int32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1102,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_uint32: List<Int> = immutableCopyOf("ext_rep_uint32", ext_rep_uint32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1103,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_sint32: List<Int> = immutableCopyOf("ext_rep_sint32", ext_rep_sint32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1104,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_fixed32: List<Int> = immutableCopyOf("ext_rep_fixed32", ext_rep_fixed32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1105,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_sfixed32: List<Int> = immutableCopyOf("ext_rep_sfixed32", ext_rep_sfixed32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1106,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_int64: List<Long> = immutableCopyOf("ext_rep_int64", ext_rep_int64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1107,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_uint64: List<Long> = immutableCopyOf("ext_rep_uint64", ext_rep_uint64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1108,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_sint64: List<Long> = immutableCopyOf("ext_rep_sint64", ext_rep_sint64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1109,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_fixed64: List<Long> = immutableCopyOf("ext_rep_fixed64", ext_rep_fixed64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1110,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_sfixed64: List<Long> = immutableCopyOf("ext_rep_sfixed64", ext_rep_sfixed64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1111,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_bool: List<Boolean> = immutableCopyOf("ext_rep_bool", ext_rep_bool)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1112,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_float: List<Float> = immutableCopyOf("ext_rep_float", ext_rep_float)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1113,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_double: List<Double> = immutableCopyOf("ext_rep_double", ext_rep_double)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1114,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_string: List<String> = immutableCopyOf("ext_rep_string", ext_rep_string)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1115,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_bytes: List<ByteString> = immutableCopyOf("ext_rep_bytes", ext_rep_bytes)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1116,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_nested_enum: List<NestedEnum> = immutableCopyOf("ext_rep_nested_enum",
      ext_rep_nested_enum)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1117,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  val ext_rep_nested_message: List<NestedMessage> = immutableCopyOf("ext_rep_nested_message",
      ext_rep_nested_message)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1201,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_int32: List<Int> = immutableCopyOf("ext_pack_int32", ext_pack_int32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1202,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_uint32: List<Int> = immutableCopyOf("ext_pack_uint32", ext_pack_uint32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1203,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_sint32: List<Int> = immutableCopyOf("ext_pack_sint32", ext_pack_sint32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1204,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_fixed32: List<Int> = immutableCopyOf("ext_pack_fixed32", ext_pack_fixed32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1205,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_sfixed32: List<Int> = immutableCopyOf("ext_pack_sfixed32", ext_pack_sfixed32)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1206,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_int64: List<Long> = immutableCopyOf("ext_pack_int64", ext_pack_int64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1207,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_uint64: List<Long> = immutableCopyOf("ext_pack_uint64", ext_pack_uint64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1208,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_sint64: List<Long> = immutableCopyOf("ext_pack_sint64", ext_pack_sint64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1209,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_fixed64: List<Long> = immutableCopyOf("ext_pack_fixed64", ext_pack_fixed64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1210,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_sfixed64: List<Long> = immutableCopyOf("ext_pack_sfixed64", ext_pack_sfixed64)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1211,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_bool: List<Boolean> = immutableCopyOf("ext_pack_bool", ext_pack_bool)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1212,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_float: List<Float> = immutableCopyOf("ext_pack_float", ext_pack_float)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1213,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_double: List<Double> = immutableCopyOf("ext_pack_double", ext_pack_double)

  /**
   * Extension source: all_types_proto2.proto
   */
  @field:WireField(
    tag = 1216,
    adapter = "com.squareup.wire.proto2.alltypes.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.PACKED
  )
  @JvmField
  val ext_pack_nested_enum: List<NestedEnum> = immutableCopyOf("ext_pack_nested_enum",
      ext_pack_nested_enum)

  init {
    require(countNonNull(oneof_string, oneof_int32, oneof_nested_message) <= 1) {
      "At most one of oneof_string, oneof_int32, oneof_nested_message may be non-null"
    }
  }

  override fun newBuilder(): Builder {
    val builder = Builder()
    builder.opt_int32 = opt_int32
    builder.opt_uint32 = opt_uint32
    builder.opt_sint32 = opt_sint32
    builder.opt_fixed32 = opt_fixed32
    builder.opt_sfixed32 = opt_sfixed32
    builder.opt_int64 = opt_int64
    builder.opt_uint64 = opt_uint64
    builder.opt_sint64 = opt_sint64
    builder.opt_fixed64 = opt_fixed64
    builder.opt_sfixed64 = opt_sfixed64
    builder.opt_bool = opt_bool
    builder.opt_float = opt_float
    builder.opt_double = opt_double
    builder.opt_string = opt_string
    builder.opt_bytes = opt_bytes
    builder.opt_nested_enum = opt_nested_enum
    builder.opt_nested_message = opt_nested_message
    builder.req_int32 = req_int32
    builder.req_uint32 = req_uint32
    builder.req_sint32 = req_sint32
    builder.req_fixed32 = req_fixed32
    builder.req_sfixed32 = req_sfixed32
    builder.req_int64 = req_int64
    builder.req_uint64 = req_uint64
    builder.req_sint64 = req_sint64
    builder.req_fixed64 = req_fixed64
    builder.req_sfixed64 = req_sfixed64
    builder.req_bool = req_bool
    builder.req_float = req_float
    builder.req_double = req_double
    builder.req_string = req_string
    builder.req_bytes = req_bytes
    builder.req_nested_enum = req_nested_enum
    builder.req_nested_message = req_nested_message
    builder.rep_int32 = rep_int32
    builder.rep_uint32 = rep_uint32
    builder.rep_sint32 = rep_sint32
    builder.rep_fixed32 = rep_fixed32
    builder.rep_sfixed32 = rep_sfixed32
    builder.rep_int64 = rep_int64
    builder.rep_uint64 = rep_uint64
    builder.rep_sint64 = rep_sint64
    builder.rep_fixed64 = rep_fixed64
    builder.rep_sfixed64 = rep_sfixed64
    builder.rep_bool = rep_bool
    builder.rep_float = rep_float
    builder.rep_double = rep_double
    builder.rep_string = rep_string
    builder.rep_bytes = rep_bytes
    builder.rep_nested_enum = rep_nested_enum
    builder.rep_nested_message = rep_nested_message
    builder.pack_int32 = pack_int32
    builder.pack_uint32 = pack_uint32
    builder.pack_sint32 = pack_sint32
    builder.pack_fixed32 = pack_fixed32
    builder.pack_sfixed32 = pack_sfixed32
    builder.pack_int64 = pack_int64
    builder.pack_uint64 = pack_uint64
    builder.pack_sint64 = pack_sint64
    builder.pack_fixed64 = pack_fixed64
    builder.pack_sfixed64 = pack_sfixed64
    builder.pack_bool = pack_bool
    builder.pack_float = pack_float
    builder.pack_double = pack_double
    builder.pack_nested_enum = pack_nested_enum
    builder.default_int32 = default_int32
    builder.default_uint32 = default_uint32
    builder.default_sint32 = default_sint32
    builder.default_fixed32 = default_fixed32
    builder.default_sfixed32 = default_sfixed32
    builder.default_int64 = default_int64
    builder.default_uint64 = default_uint64
    builder.default_sint64 = default_sint64
    builder.default_fixed64 = default_fixed64
    builder.default_sfixed64 = default_sfixed64
    builder.default_bool = default_bool
    builder.default_float = default_float
    builder.default_double = default_double
    builder.default_string = default_string
    builder.default_bytes = default_bytes
    builder.default_nested_enum = default_nested_enum
    builder.map_int32_int32 = map_int32_int32
    builder.map_string_string = map_string_string
    builder.map_string_message = map_string_message
    builder.map_string_enum = map_string_enum
    builder.ext_opt_int32 = ext_opt_int32
    builder.ext_opt_uint32 = ext_opt_uint32
    builder.ext_opt_sint32 = ext_opt_sint32
    builder.ext_opt_fixed32 = ext_opt_fixed32
    builder.ext_opt_sfixed32 = ext_opt_sfixed32
    builder.ext_opt_int64 = ext_opt_int64
    builder.ext_opt_uint64 = ext_opt_uint64
    builder.ext_opt_sint64 = ext_opt_sint64
    builder.ext_opt_fixed64 = ext_opt_fixed64
    builder.ext_opt_sfixed64 = ext_opt_sfixed64
    builder.ext_opt_bool = ext_opt_bool
    builder.ext_opt_float = ext_opt_float
    builder.ext_opt_double = ext_opt_double
    builder.ext_opt_string = ext_opt_string
    builder.ext_opt_bytes = ext_opt_bytes
    builder.ext_opt_nested_enum = ext_opt_nested_enum
    builder.ext_opt_nested_message = ext_opt_nested_message
    builder.ext_rep_int32 = ext_rep_int32
    builder.ext_rep_uint32 = ext_rep_uint32
    builder.ext_rep_sint32 = ext_rep_sint32
    builder.ext_rep_fixed32 = ext_rep_fixed32
    builder.ext_rep_sfixed32 = ext_rep_sfixed32
    builder.ext_rep_int64 = ext_rep_int64
    builder.ext_rep_uint64 = ext_rep_uint64
    builder.ext_rep_sint64 = ext_rep_sint64
    builder.ext_rep_fixed64 = ext_rep_fixed64
    builder.ext_rep_sfixed64 = ext_rep_sfixed64
    builder.ext_rep_bool = ext_rep_bool
    builder.ext_rep_float = ext_rep_float
    builder.ext_rep_double = ext_rep_double
    builder.ext_rep_string = ext_rep_string
    builder.ext_rep_bytes = ext_rep_bytes
    builder.ext_rep_nested_enum = ext_rep_nested_enum
    builder.ext_rep_nested_message = ext_rep_nested_message
    builder.ext_pack_int32 = ext_pack_int32
    builder.ext_pack_uint32 = ext_pack_uint32
    builder.ext_pack_sint32 = ext_pack_sint32
    builder.ext_pack_fixed32 = ext_pack_fixed32
    builder.ext_pack_sfixed32 = ext_pack_sfixed32
    builder.ext_pack_int64 = ext_pack_int64
    builder.ext_pack_uint64 = ext_pack_uint64
    builder.ext_pack_sint64 = ext_pack_sint64
    builder.ext_pack_fixed64 = ext_pack_fixed64
    builder.ext_pack_sfixed64 = ext_pack_sfixed64
    builder.ext_pack_bool = ext_pack_bool
    builder.ext_pack_float = ext_pack_float
    builder.ext_pack_double = ext_pack_double
    builder.ext_pack_nested_enum = ext_pack_nested_enum
    builder.oneof_string = oneof_string
    builder.oneof_int32 = oneof_int32
    builder.oneof_nested_message = oneof_nested_message
    builder.addUnknownFields(unknownFields)
    return builder
  }

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AllTypes) return false
    if (unknownFields != other.unknownFields) return false
    if (opt_int32 != other.opt_int32) return false
    if (opt_uint32 != other.opt_uint32) return false
    if (opt_sint32 != other.opt_sint32) return false
    if (opt_fixed32 != other.opt_fixed32) return false
    if (opt_sfixed32 != other.opt_sfixed32) return false
    if (opt_int64 != other.opt_int64) return false
    if (opt_uint64 != other.opt_uint64) return false
    if (opt_sint64 != other.opt_sint64) return false
    if (opt_fixed64 != other.opt_fixed64) return false
    if (opt_sfixed64 != other.opt_sfixed64) return false
    if (opt_bool != other.opt_bool) return false
    if (opt_float != other.opt_float) return false
    if (opt_double != other.opt_double) return false
    if (opt_string != other.opt_string) return false
    if (opt_bytes != other.opt_bytes) return false
    if (opt_nested_enum != other.opt_nested_enum) return false
    if (opt_nested_message != other.opt_nested_message) return false
    if (req_int32 != other.req_int32) return false
    if (req_uint32 != other.req_uint32) return false
    if (req_sint32 != other.req_sint32) return false
    if (req_fixed32 != other.req_fixed32) return false
    if (req_sfixed32 != other.req_sfixed32) return false
    if (req_int64 != other.req_int64) return false
    if (req_uint64 != other.req_uint64) return false
    if (req_sint64 != other.req_sint64) return false
    if (req_fixed64 != other.req_fixed64) return false
    if (req_sfixed64 != other.req_sfixed64) return false
    if (req_bool != other.req_bool) return false
    if (req_float != other.req_float) return false
    if (req_double != other.req_double) return false
    if (req_string != other.req_string) return false
    if (req_bytes != other.req_bytes) return false
    if (req_nested_enum != other.req_nested_enum) return false
    if (req_nested_message != other.req_nested_message) return false
    if (rep_int32 != other.rep_int32) return false
    if (rep_uint32 != other.rep_uint32) return false
    if (rep_sint32 != other.rep_sint32) return false
    if (rep_fixed32 != other.rep_fixed32) return false
    if (rep_sfixed32 != other.rep_sfixed32) return false
    if (rep_int64 != other.rep_int64) return false
    if (rep_uint64 != other.rep_uint64) return false
    if (rep_sint64 != other.rep_sint64) return false
    if (rep_fixed64 != other.rep_fixed64) return false
    if (rep_sfixed64 != other.rep_sfixed64) return false
    if (rep_bool != other.rep_bool) return false
    if (rep_float != other.rep_float) return false
    if (rep_double != other.rep_double) return false
    if (rep_string != other.rep_string) return false
    if (rep_bytes != other.rep_bytes) return false
    if (rep_nested_enum != other.rep_nested_enum) return false
    if (rep_nested_message != other.rep_nested_message) return false
    if (pack_int32 != other.pack_int32) return false
    if (pack_uint32 != other.pack_uint32) return false
    if (pack_sint32 != other.pack_sint32) return false
    if (pack_fixed32 != other.pack_fixed32) return false
    if (pack_sfixed32 != other.pack_sfixed32) return false
    if (pack_int64 != other.pack_int64) return false
    if (pack_uint64 != other.pack_uint64) return false
    if (pack_sint64 != other.pack_sint64) return false
    if (pack_fixed64 != other.pack_fixed64) return false
    if (pack_sfixed64 != other.pack_sfixed64) return false
    if (pack_bool != other.pack_bool) return false
    if (pack_float != other.pack_float) return false
    if (pack_double != other.pack_double) return false
    if (pack_nested_enum != other.pack_nested_enum) return false
    if (default_int32 != other.default_int32) return false
    if (default_uint32 != other.default_uint32) return false
    if (default_sint32 != other.default_sint32) return false
    if (default_fixed32 != other.default_fixed32) return false
    if (default_sfixed32 != other.default_sfixed32) return false
    if (default_int64 != other.default_int64) return false
    if (default_uint64 != other.default_uint64) return false
    if (default_sint64 != other.default_sint64) return false
    if (default_fixed64 != other.default_fixed64) return false
    if (default_sfixed64 != other.default_sfixed64) return false
    if (default_bool != other.default_bool) return false
    if (default_float != other.default_float) return false
    if (default_double != other.default_double) return false
    if (default_string != other.default_string) return false
    if (default_bytes != other.default_bytes) return false
    if (default_nested_enum != other.default_nested_enum) return false
    if (map_int32_int32 != other.map_int32_int32) return false
    if (map_string_string != other.map_string_string) return false
    if (map_string_message != other.map_string_message) return false
    if (map_string_enum != other.map_string_enum) return false
    if (ext_opt_int32 != other.ext_opt_int32) return false
    if (ext_opt_uint32 != other.ext_opt_uint32) return false
    if (ext_opt_sint32 != other.ext_opt_sint32) return false
    if (ext_opt_fixed32 != other.ext_opt_fixed32) return false
    if (ext_opt_sfixed32 != other.ext_opt_sfixed32) return false
    if (ext_opt_int64 != other.ext_opt_int64) return false
    if (ext_opt_uint64 != other.ext_opt_uint64) return false
    if (ext_opt_sint64 != other.ext_opt_sint64) return false
    if (ext_opt_fixed64 != other.ext_opt_fixed64) return false
    if (ext_opt_sfixed64 != other.ext_opt_sfixed64) return false
    if (ext_opt_bool != other.ext_opt_bool) return false
    if (ext_opt_float != other.ext_opt_float) return false
    if (ext_opt_double != other.ext_opt_double) return false
    if (ext_opt_string != other.ext_opt_string) return false
    if (ext_opt_bytes != other.ext_opt_bytes) return false
    if (ext_opt_nested_enum != other.ext_opt_nested_enum) return false
    if (ext_opt_nested_message != other.ext_opt_nested_message) return false
    if (ext_rep_int32 != other.ext_rep_int32) return false
    if (ext_rep_uint32 != other.ext_rep_uint32) return false
    if (ext_rep_sint32 != other.ext_rep_sint32) return false
    if (ext_rep_fixed32 != other.ext_rep_fixed32) return false
    if (ext_rep_sfixed32 != other.ext_rep_sfixed32) return false
    if (ext_rep_int64 != other.ext_rep_int64) return false
    if (ext_rep_uint64 != other.ext_rep_uint64) return false
    if (ext_rep_sint64 != other.ext_rep_sint64) return false
    if (ext_rep_fixed64 != other.ext_rep_fixed64) return false
    if (ext_rep_sfixed64 != other.ext_rep_sfixed64) return false
    if (ext_rep_bool != other.ext_rep_bool) return false
    if (ext_rep_float != other.ext_rep_float) return false
    if (ext_rep_double != other.ext_rep_double) return false
    if (ext_rep_string != other.ext_rep_string) return false
    if (ext_rep_bytes != other.ext_rep_bytes) return false
    if (ext_rep_nested_enum != other.ext_rep_nested_enum) return false
    if (ext_rep_nested_message != other.ext_rep_nested_message) return false
    if (ext_pack_int32 != other.ext_pack_int32) return false
    if (ext_pack_uint32 != other.ext_pack_uint32) return false
    if (ext_pack_sint32 != other.ext_pack_sint32) return false
    if (ext_pack_fixed32 != other.ext_pack_fixed32) return false
    if (ext_pack_sfixed32 != other.ext_pack_sfixed32) return false
    if (ext_pack_int64 != other.ext_pack_int64) return false
    if (ext_pack_uint64 != other.ext_pack_uint64) return false
    if (ext_pack_sint64 != other.ext_pack_sint64) return false
    if (ext_pack_fixed64 != other.ext_pack_fixed64) return false
    if (ext_pack_sfixed64 != other.ext_pack_sfixed64) return false
    if (ext_pack_bool != other.ext_pack_bool) return false
    if (ext_pack_float != other.ext_pack_float) return false
    if (ext_pack_double != other.ext_pack_double) return false
    if (ext_pack_nested_enum != other.ext_pack_nested_enum) return false
    if (oneof_string != other.oneof_string) return false
    if (oneof_int32 != other.oneof_int32) return false
    if (oneof_nested_message != other.oneof_nested_message) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + opt_int32.hashCode()
      result = result * 37 + opt_uint32.hashCode()
      result = result * 37 + opt_sint32.hashCode()
      result = result * 37 + opt_fixed32.hashCode()
      result = result * 37 + opt_sfixed32.hashCode()
      result = result * 37 + opt_int64.hashCode()
      result = result * 37 + opt_uint64.hashCode()
      result = result * 37 + opt_sint64.hashCode()
      result = result * 37 + opt_fixed64.hashCode()
      result = result * 37 + opt_sfixed64.hashCode()
      result = result * 37 + opt_bool.hashCode()
      result = result * 37 + opt_float.hashCode()
      result = result * 37 + opt_double.hashCode()
      result = result * 37 + opt_string.hashCode()
      result = result * 37 + opt_bytes.hashCode()
      result = result * 37 + opt_nested_enum.hashCode()
      result = result * 37 + opt_nested_message.hashCode()
      result = result * 37 + req_int32.hashCode()
      result = result * 37 + req_uint32.hashCode()
      result = result * 37 + req_sint32.hashCode()
      result = result * 37 + req_fixed32.hashCode()
      result = result * 37 + req_sfixed32.hashCode()
      result = result * 37 + req_int64.hashCode()
      result = result * 37 + req_uint64.hashCode()
      result = result * 37 + req_sint64.hashCode()
      result = result * 37 + req_fixed64.hashCode()
      result = result * 37 + req_sfixed64.hashCode()
      result = result * 37 + req_bool.hashCode()
      result = result * 37 + req_float.hashCode()
      result = result * 37 + req_double.hashCode()
      result = result * 37 + req_string.hashCode()
      result = result * 37 + req_bytes.hashCode()
      result = result * 37 + req_nested_enum.hashCode()
      result = result * 37 + req_nested_message.hashCode()
      result = result * 37 + rep_int32.hashCode()
      result = result * 37 + rep_uint32.hashCode()
      result = result * 37 + rep_sint32.hashCode()
      result = result * 37 + rep_fixed32.hashCode()
      result = result * 37 + rep_sfixed32.hashCode()
      result = result * 37 + rep_int64.hashCode()
      result = result * 37 + rep_uint64.hashCode()
      result = result * 37 + rep_sint64.hashCode()
      result = result * 37 + rep_fixed64.hashCode()
      result = result * 37 + rep_sfixed64.hashCode()
      result = result * 37 + rep_bool.hashCode()
      result = result * 37 + rep_float.hashCode()
      result = result * 37 + rep_double.hashCode()
      result = result * 37 + rep_string.hashCode()
      result = result * 37 + rep_bytes.hashCode()
      result = result * 37 + rep_nested_enum.hashCode()
      result = result * 37 + rep_nested_message.hashCode()
      result = result * 37 + pack_int32.hashCode()
      result = result * 37 + pack_uint32.hashCode()
      result = result * 37 + pack_sint32.hashCode()
      result = result * 37 + pack_fixed32.hashCode()
      result = result * 37 + pack_sfixed32.hashCode()
      result = result * 37 + pack_int64.hashCode()
      result = result * 37 + pack_uint64.hashCode()
      result = result * 37 + pack_sint64.hashCode()
      result = result * 37 + pack_fixed64.hashCode()
      result = result * 37 + pack_sfixed64.hashCode()
      result = result * 37 + pack_bool.hashCode()
      result = result * 37 + pack_float.hashCode()
      result = result * 37 + pack_double.hashCode()
      result = result * 37 + pack_nested_enum.hashCode()
      result = result * 37 + default_int32.hashCode()
      result = result * 37 + default_uint32.hashCode()
      result = result * 37 + default_sint32.hashCode()
      result = result * 37 + default_fixed32.hashCode()
      result = result * 37 + default_sfixed32.hashCode()
      result = result * 37 + default_int64.hashCode()
      result = result * 37 + default_uint64.hashCode()
      result = result * 37 + default_sint64.hashCode()
      result = result * 37 + default_fixed64.hashCode()
      result = result * 37 + default_sfixed64.hashCode()
      result = result * 37 + default_bool.hashCode()
      result = result * 37 + default_float.hashCode()
      result = result * 37 + default_double.hashCode()
      result = result * 37 + default_string.hashCode()
      result = result * 37 + default_bytes.hashCode()
      result = result * 37 + default_nested_enum.hashCode()
      result = result * 37 + map_int32_int32.hashCode()
      result = result * 37 + map_string_string.hashCode()
      result = result * 37 + map_string_message.hashCode()
      result = result * 37 + map_string_enum.hashCode()
      result = result * 37 + ext_opt_int32.hashCode()
      result = result * 37 + ext_opt_uint32.hashCode()
      result = result * 37 + ext_opt_sint32.hashCode()
      result = result * 37 + ext_opt_fixed32.hashCode()
      result = result * 37 + ext_opt_sfixed32.hashCode()
      result = result * 37 + ext_opt_int64.hashCode()
      result = result * 37 + ext_opt_uint64.hashCode()
      result = result * 37 + ext_opt_sint64.hashCode()
      result = result * 37 + ext_opt_fixed64.hashCode()
      result = result * 37 + ext_opt_sfixed64.hashCode()
      result = result * 37 + ext_opt_bool.hashCode()
      result = result * 37 + ext_opt_float.hashCode()
      result = result * 37 + ext_opt_double.hashCode()
      result = result * 37 + ext_opt_string.hashCode()
      result = result * 37 + ext_opt_bytes.hashCode()
      result = result * 37 + ext_opt_nested_enum.hashCode()
      result = result * 37 + ext_opt_nested_message.hashCode()
      result = result * 37 + ext_rep_int32.hashCode()
      result = result * 37 + ext_rep_uint32.hashCode()
      result = result * 37 + ext_rep_sint32.hashCode()
      result = result * 37 + ext_rep_fixed32.hashCode()
      result = result * 37 + ext_rep_sfixed32.hashCode()
      result = result * 37 + ext_rep_int64.hashCode()
      result = result * 37 + ext_rep_uint64.hashCode()
      result = result * 37 + ext_rep_sint64.hashCode()
      result = result * 37 + ext_rep_fixed64.hashCode()
      result = result * 37 + ext_rep_sfixed64.hashCode()
      result = result * 37 + ext_rep_bool.hashCode()
      result = result * 37 + ext_rep_float.hashCode()
      result = result * 37 + ext_rep_double.hashCode()
      result = result * 37 + ext_rep_string.hashCode()
      result = result * 37 + ext_rep_bytes.hashCode()
      result = result * 37 + ext_rep_nested_enum.hashCode()
      result = result * 37 + ext_rep_nested_message.hashCode()
      result = result * 37 + ext_pack_int32.hashCode()
      result = result * 37 + ext_pack_uint32.hashCode()
      result = result * 37 + ext_pack_sint32.hashCode()
      result = result * 37 + ext_pack_fixed32.hashCode()
      result = result * 37 + ext_pack_sfixed32.hashCode()
      result = result * 37 + ext_pack_int64.hashCode()
      result = result * 37 + ext_pack_uint64.hashCode()
      result = result * 37 + ext_pack_sint64.hashCode()
      result = result * 37 + ext_pack_fixed64.hashCode()
      result = result * 37 + ext_pack_sfixed64.hashCode()
      result = result * 37 + ext_pack_bool.hashCode()
      result = result * 37 + ext_pack_float.hashCode()
      result = result * 37 + ext_pack_double.hashCode()
      result = result * 37 + ext_pack_nested_enum.hashCode()
      result = result * 37 + oneof_string.hashCode()
      result = result * 37 + oneof_int32.hashCode()
      result = result * 37 + oneof_nested_message.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (opt_int32 != null) result += """opt_int32=$opt_int32"""
    if (opt_uint32 != null) result += """opt_uint32=$opt_uint32"""
    if (opt_sint32 != null) result += """opt_sint32=$opt_sint32"""
    if (opt_fixed32 != null) result += """opt_fixed32=$opt_fixed32"""
    if (opt_sfixed32 != null) result += """opt_sfixed32=$opt_sfixed32"""
    if (opt_int64 != null) result += """opt_int64=$opt_int64"""
    if (opt_uint64 != null) result += """opt_uint64=$opt_uint64"""
    if (opt_sint64 != null) result += """opt_sint64=$opt_sint64"""
    if (opt_fixed64 != null) result += """opt_fixed64=$opt_fixed64"""
    if (opt_sfixed64 != null) result += """opt_sfixed64=$opt_sfixed64"""
    if (opt_bool != null) result += """opt_bool=$opt_bool"""
    if (opt_float != null) result += """opt_float=$opt_float"""
    if (opt_double != null) result += """opt_double=$opt_double"""
    if (opt_string != null) result += """opt_string=${sanitize(opt_string)}"""
    if (opt_bytes != null) result += """opt_bytes=$opt_bytes"""
    if (opt_nested_enum != null) result += """opt_nested_enum=$opt_nested_enum"""
    if (opt_nested_message != null) result += """opt_nested_message=$opt_nested_message"""
    result += """req_int32=$req_int32"""
    result += """req_uint32=$req_uint32"""
    result += """req_sint32=$req_sint32"""
    result += """req_fixed32=$req_fixed32"""
    result += """req_sfixed32=$req_sfixed32"""
    result += """req_int64=$req_int64"""
    result += """req_uint64=$req_uint64"""
    result += """req_sint64=$req_sint64"""
    result += """req_fixed64=$req_fixed64"""
    result += """req_sfixed64=$req_sfixed64"""
    result += """req_bool=$req_bool"""
    result += """req_float=$req_float"""
    result += """req_double=$req_double"""
    result += """req_string=${sanitize(req_string)}"""
    result += """req_bytes=$req_bytes"""
    result += """req_nested_enum=$req_nested_enum"""
    result += """req_nested_message=$req_nested_message"""
    if (rep_int32.isNotEmpty()) result += """rep_int32=$rep_int32"""
    if (rep_uint32.isNotEmpty()) result += """rep_uint32=$rep_uint32"""
    if (rep_sint32.isNotEmpty()) result += """rep_sint32=$rep_sint32"""
    if (rep_fixed32.isNotEmpty()) result += """rep_fixed32=$rep_fixed32"""
    if (rep_sfixed32.isNotEmpty()) result += """rep_sfixed32=$rep_sfixed32"""
    if (rep_int64.isNotEmpty()) result += """rep_int64=$rep_int64"""
    if (rep_uint64.isNotEmpty()) result += """rep_uint64=$rep_uint64"""
    if (rep_sint64.isNotEmpty()) result += """rep_sint64=$rep_sint64"""
    if (rep_fixed64.isNotEmpty()) result += """rep_fixed64=$rep_fixed64"""
    if (rep_sfixed64.isNotEmpty()) result += """rep_sfixed64=$rep_sfixed64"""
    if (rep_bool.isNotEmpty()) result += """rep_bool=$rep_bool"""
    if (rep_float.isNotEmpty()) result += """rep_float=$rep_float"""
    if (rep_double.isNotEmpty()) result += """rep_double=$rep_double"""
    if (rep_string.isNotEmpty()) result += """rep_string=${sanitize(rep_string)}"""
    if (rep_bytes.isNotEmpty()) result += """rep_bytes=$rep_bytes"""
    if (rep_nested_enum.isNotEmpty()) result += """rep_nested_enum=$rep_nested_enum"""
    if (rep_nested_message.isNotEmpty()) result += """rep_nested_message=$rep_nested_message"""
    if (pack_int32.isNotEmpty()) result += """pack_int32=$pack_int32"""
    if (pack_uint32.isNotEmpty()) result += """pack_uint32=$pack_uint32"""
    if (pack_sint32.isNotEmpty()) result += """pack_sint32=$pack_sint32"""
    if (pack_fixed32.isNotEmpty()) result += """pack_fixed32=$pack_fixed32"""
    if (pack_sfixed32.isNotEmpty()) result += """pack_sfixed32=$pack_sfixed32"""
    if (pack_int64.isNotEmpty()) result += """pack_int64=$pack_int64"""
    if (pack_uint64.isNotEmpty()) result += """pack_uint64=$pack_uint64"""
    if (pack_sint64.isNotEmpty()) result += """pack_sint64=$pack_sint64"""
    if (pack_fixed64.isNotEmpty()) result += """pack_fixed64=$pack_fixed64"""
    if (pack_sfixed64.isNotEmpty()) result += """pack_sfixed64=$pack_sfixed64"""
    if (pack_bool.isNotEmpty()) result += """pack_bool=$pack_bool"""
    if (pack_float.isNotEmpty()) result += """pack_float=$pack_float"""
    if (pack_double.isNotEmpty()) result += """pack_double=$pack_double"""
    if (pack_nested_enum.isNotEmpty()) result += """pack_nested_enum=$pack_nested_enum"""
    if (default_int32 != null) result += """default_int32=$default_int32"""
    if (default_uint32 != null) result += """default_uint32=$default_uint32"""
    if (default_sint32 != null) result += """default_sint32=$default_sint32"""
    if (default_fixed32 != null) result += """default_fixed32=$default_fixed32"""
    if (default_sfixed32 != null) result += """default_sfixed32=$default_sfixed32"""
    if (default_int64 != null) result += """default_int64=$default_int64"""
    if (default_uint64 != null) result += """default_uint64=$default_uint64"""
    if (default_sint64 != null) result += """default_sint64=$default_sint64"""
    if (default_fixed64 != null) result += """default_fixed64=$default_fixed64"""
    if (default_sfixed64 != null) result += """default_sfixed64=$default_sfixed64"""
    if (default_bool != null) result += """default_bool=$default_bool"""
    if (default_float != null) result += """default_float=$default_float"""
    if (default_double != null) result += """default_double=$default_double"""
    if (default_string != null) result += """default_string=${sanitize(default_string)}"""
    if (default_bytes != null) result += """default_bytes=$default_bytes"""
    if (default_nested_enum != null) result += """default_nested_enum=$default_nested_enum"""
    if (map_int32_int32.isNotEmpty()) result += """map_int32_int32=$map_int32_int32"""
    if (map_string_string.isNotEmpty()) result += """map_string_string=$map_string_string"""
    if (map_string_message.isNotEmpty()) result += """map_string_message=$map_string_message"""
    if (map_string_enum.isNotEmpty()) result += """map_string_enum=$map_string_enum"""
    if (ext_opt_int32 != null) result += """ext_opt_int32=$ext_opt_int32"""
    if (ext_opt_uint32 != null) result += """ext_opt_uint32=$ext_opt_uint32"""
    if (ext_opt_sint32 != null) result += """ext_opt_sint32=$ext_opt_sint32"""
    if (ext_opt_fixed32 != null) result += """ext_opt_fixed32=$ext_opt_fixed32"""
    if (ext_opt_sfixed32 != null) result += """ext_opt_sfixed32=$ext_opt_sfixed32"""
    if (ext_opt_int64 != null) result += """ext_opt_int64=$ext_opt_int64"""
    if (ext_opt_uint64 != null) result += """ext_opt_uint64=$ext_opt_uint64"""
    if (ext_opt_sint64 != null) result += """ext_opt_sint64=$ext_opt_sint64"""
    if (ext_opt_fixed64 != null) result += """ext_opt_fixed64=$ext_opt_fixed64"""
    if (ext_opt_sfixed64 != null) result += """ext_opt_sfixed64=$ext_opt_sfixed64"""
    if (ext_opt_bool != null) result += """ext_opt_bool=$ext_opt_bool"""
    if (ext_opt_float != null) result += """ext_opt_float=$ext_opt_float"""
    if (ext_opt_double != null) result += """ext_opt_double=$ext_opt_double"""
    if (ext_opt_string != null) result += """ext_opt_string=${sanitize(ext_opt_string)}"""
    if (ext_opt_bytes != null) result += """ext_opt_bytes=$ext_opt_bytes"""
    if (ext_opt_nested_enum != null) result += """ext_opt_nested_enum=$ext_opt_nested_enum"""
    if (ext_opt_nested_message != null) result +=
        """ext_opt_nested_message=$ext_opt_nested_message"""
    if (ext_rep_int32.isNotEmpty()) result += """ext_rep_int32=$ext_rep_int32"""
    if (ext_rep_uint32.isNotEmpty()) result += """ext_rep_uint32=$ext_rep_uint32"""
    if (ext_rep_sint32.isNotEmpty()) result += """ext_rep_sint32=$ext_rep_sint32"""
    if (ext_rep_fixed32.isNotEmpty()) result += """ext_rep_fixed32=$ext_rep_fixed32"""
    if (ext_rep_sfixed32.isNotEmpty()) result += """ext_rep_sfixed32=$ext_rep_sfixed32"""
    if (ext_rep_int64.isNotEmpty()) result += """ext_rep_int64=$ext_rep_int64"""
    if (ext_rep_uint64.isNotEmpty()) result += """ext_rep_uint64=$ext_rep_uint64"""
    if (ext_rep_sint64.isNotEmpty()) result += """ext_rep_sint64=$ext_rep_sint64"""
    if (ext_rep_fixed64.isNotEmpty()) result += """ext_rep_fixed64=$ext_rep_fixed64"""
    if (ext_rep_sfixed64.isNotEmpty()) result += """ext_rep_sfixed64=$ext_rep_sfixed64"""
    if (ext_rep_bool.isNotEmpty()) result += """ext_rep_bool=$ext_rep_bool"""
    if (ext_rep_float.isNotEmpty()) result += """ext_rep_float=$ext_rep_float"""
    if (ext_rep_double.isNotEmpty()) result += """ext_rep_double=$ext_rep_double"""
    if (ext_rep_string.isNotEmpty()) result += """ext_rep_string=${sanitize(ext_rep_string)}"""
    if (ext_rep_bytes.isNotEmpty()) result += """ext_rep_bytes=$ext_rep_bytes"""
    if (ext_rep_nested_enum.isNotEmpty()) result += """ext_rep_nested_enum=$ext_rep_nested_enum"""
    if (ext_rep_nested_message.isNotEmpty()) result +=
        """ext_rep_nested_message=$ext_rep_nested_message"""
    if (ext_pack_int32.isNotEmpty()) result += """ext_pack_int32=$ext_pack_int32"""
    if (ext_pack_uint32.isNotEmpty()) result += """ext_pack_uint32=$ext_pack_uint32"""
    if (ext_pack_sint32.isNotEmpty()) result += """ext_pack_sint32=$ext_pack_sint32"""
    if (ext_pack_fixed32.isNotEmpty()) result += """ext_pack_fixed32=$ext_pack_fixed32"""
    if (ext_pack_sfixed32.isNotEmpty()) result += """ext_pack_sfixed32=$ext_pack_sfixed32"""
    if (ext_pack_int64.isNotEmpty()) result += """ext_pack_int64=$ext_pack_int64"""
    if (ext_pack_uint64.isNotEmpty()) result += """ext_pack_uint64=$ext_pack_uint64"""
    if (ext_pack_sint64.isNotEmpty()) result += """ext_pack_sint64=$ext_pack_sint64"""
    if (ext_pack_fixed64.isNotEmpty()) result += """ext_pack_fixed64=$ext_pack_fixed64"""
    if (ext_pack_sfixed64.isNotEmpty()) result += """ext_pack_sfixed64=$ext_pack_sfixed64"""
    if (ext_pack_bool.isNotEmpty()) result += """ext_pack_bool=$ext_pack_bool"""
    if (ext_pack_float.isNotEmpty()) result += """ext_pack_float=$ext_pack_float"""
    if (ext_pack_double.isNotEmpty()) result += """ext_pack_double=$ext_pack_double"""
    if (ext_pack_nested_enum.isNotEmpty()) result +=
        """ext_pack_nested_enum=$ext_pack_nested_enum"""
    if (oneof_string != null) result += """oneof_string=${sanitize(oneof_string)}"""
    if (oneof_int32 != null) result += """oneof_int32=$oneof_int32"""
    if (oneof_nested_message != null) result += """oneof_nested_message=$oneof_nested_message"""
    return result.joinToString(prefix = "AllTypes{", separator = ", ", postfix = "}")
  }

  fun copy(
    opt_int32: Int? = this.opt_int32,
    opt_uint32: Int? = this.opt_uint32,
    opt_sint32: Int? = this.opt_sint32,
    opt_fixed32: Int? = this.opt_fixed32,
    opt_sfixed32: Int? = this.opt_sfixed32,
    opt_int64: Long? = this.opt_int64,
    opt_uint64: Long? = this.opt_uint64,
    opt_sint64: Long? = this.opt_sint64,
    opt_fixed64: Long? = this.opt_fixed64,
    opt_sfixed64: Long? = this.opt_sfixed64,
    opt_bool: Boolean? = this.opt_bool,
    opt_float: Float? = this.opt_float,
    opt_double: Double? = this.opt_double,
    opt_string: String? = this.opt_string,
    opt_bytes: ByteString? = this.opt_bytes,
    opt_nested_enum: NestedEnum? = this.opt_nested_enum,
    opt_nested_message: NestedMessage? = this.opt_nested_message,
    req_int32: Int = this.req_int32,
    req_uint32: Int = this.req_uint32,
    req_sint32: Int = this.req_sint32,
    req_fixed32: Int = this.req_fixed32,
    req_sfixed32: Int = this.req_sfixed32,
    req_int64: Long = this.req_int64,
    req_uint64: Long = this.req_uint64,
    req_sint64: Long = this.req_sint64,
    req_fixed64: Long = this.req_fixed64,
    req_sfixed64: Long = this.req_sfixed64,
    req_bool: Boolean = this.req_bool,
    req_float: Float = this.req_float,
    req_double: Double = this.req_double,
    req_string: String = this.req_string,
    req_bytes: ByteString = this.req_bytes,
    req_nested_enum: NestedEnum = this.req_nested_enum,
    req_nested_message: NestedMessage = this.req_nested_message,
    rep_int32: List<Int> = this.rep_int32,
    rep_uint32: List<Int> = this.rep_uint32,
    rep_sint32: List<Int> = this.rep_sint32,
    rep_fixed32: List<Int> = this.rep_fixed32,
    rep_sfixed32: List<Int> = this.rep_sfixed32,
    rep_int64: List<Long> = this.rep_int64,
    rep_uint64: List<Long> = this.rep_uint64,
    rep_sint64: List<Long> = this.rep_sint64,
    rep_fixed64: List<Long> = this.rep_fixed64,
    rep_sfixed64: List<Long> = this.rep_sfixed64,
    rep_bool: List<Boolean> = this.rep_bool,
    rep_float: List<Float> = this.rep_float,
    rep_double: List<Double> = this.rep_double,
    rep_string: List<String> = this.rep_string,
    rep_bytes: List<ByteString> = this.rep_bytes,
    rep_nested_enum: List<NestedEnum> = this.rep_nested_enum,
    rep_nested_message: List<NestedMessage> = this.rep_nested_message,
    pack_int32: List<Int> = this.pack_int32,
    pack_uint32: List<Int> = this.pack_uint32,
    pack_sint32: List<Int> = this.pack_sint32,
    pack_fixed32: List<Int> = this.pack_fixed32,
    pack_sfixed32: List<Int> = this.pack_sfixed32,
    pack_int64: List<Long> = this.pack_int64,
    pack_uint64: List<Long> = this.pack_uint64,
    pack_sint64: List<Long> = this.pack_sint64,
    pack_fixed64: List<Long> = this.pack_fixed64,
    pack_sfixed64: List<Long> = this.pack_sfixed64,
    pack_bool: List<Boolean> = this.pack_bool,
    pack_float: List<Float> = this.pack_float,
    pack_double: List<Double> = this.pack_double,
    pack_nested_enum: List<NestedEnum> = this.pack_nested_enum,
    default_int32: Int? = this.default_int32,
    default_uint32: Int? = this.default_uint32,
    default_sint32: Int? = this.default_sint32,
    default_fixed32: Int? = this.default_fixed32,
    default_sfixed32: Int? = this.default_sfixed32,
    default_int64: Long? = this.default_int64,
    default_uint64: Long? = this.default_uint64,
    default_sint64: Long? = this.default_sint64,
    default_fixed64: Long? = this.default_fixed64,
    default_sfixed64: Long? = this.default_sfixed64,
    default_bool: Boolean? = this.default_bool,
    default_float: Float? = this.default_float,
    default_double: Double? = this.default_double,
    default_string: String? = this.default_string,
    default_bytes: ByteString? = this.default_bytes,
    default_nested_enum: NestedEnum? = this.default_nested_enum,
    map_int32_int32: Map<Int, Int> = this.map_int32_int32,
    map_string_string: Map<String, String> = this.map_string_string,
    map_string_message: Map<String, NestedMessage> = this.map_string_message,
    map_string_enum: Map<String, NestedEnum> = this.map_string_enum,
    ext_opt_int32: Int? = this.ext_opt_int32,
    ext_opt_uint32: Int? = this.ext_opt_uint32,
    ext_opt_sint32: Int? = this.ext_opt_sint32,
    ext_opt_fixed32: Int? = this.ext_opt_fixed32,
    ext_opt_sfixed32: Int? = this.ext_opt_sfixed32,
    ext_opt_int64: Long? = this.ext_opt_int64,
    ext_opt_uint64: Long? = this.ext_opt_uint64,
    ext_opt_sint64: Long? = this.ext_opt_sint64,
    ext_opt_fixed64: Long? = this.ext_opt_fixed64,
    ext_opt_sfixed64: Long? = this.ext_opt_sfixed64,
    ext_opt_bool: Boolean? = this.ext_opt_bool,
    ext_opt_float: Float? = this.ext_opt_float,
    ext_opt_double: Double? = this.ext_opt_double,
    ext_opt_string: String? = this.ext_opt_string,
    ext_opt_bytes: ByteString? = this.ext_opt_bytes,
    ext_opt_nested_enum: NestedEnum? = this.ext_opt_nested_enum,
    ext_opt_nested_message: NestedMessage? = this.ext_opt_nested_message,
    ext_rep_int32: List<Int> = this.ext_rep_int32,
    ext_rep_uint32: List<Int> = this.ext_rep_uint32,
    ext_rep_sint32: List<Int> = this.ext_rep_sint32,
    ext_rep_fixed32: List<Int> = this.ext_rep_fixed32,
    ext_rep_sfixed32: List<Int> = this.ext_rep_sfixed32,
    ext_rep_int64: List<Long> = this.ext_rep_int64,
    ext_rep_uint64: List<Long> = this.ext_rep_uint64,
    ext_rep_sint64: List<Long> = this.ext_rep_sint64,
    ext_rep_fixed64: List<Long> = this.ext_rep_fixed64,
    ext_rep_sfixed64: List<Long> = this.ext_rep_sfixed64,
    ext_rep_bool: List<Boolean> = this.ext_rep_bool,
    ext_rep_float: List<Float> = this.ext_rep_float,
    ext_rep_double: List<Double> = this.ext_rep_double,
    ext_rep_string: List<String> = this.ext_rep_string,
    ext_rep_bytes: List<ByteString> = this.ext_rep_bytes,
    ext_rep_nested_enum: List<NestedEnum> = this.ext_rep_nested_enum,
    ext_rep_nested_message: List<NestedMessage> = this.ext_rep_nested_message,
    ext_pack_int32: List<Int> = this.ext_pack_int32,
    ext_pack_uint32: List<Int> = this.ext_pack_uint32,
    ext_pack_sint32: List<Int> = this.ext_pack_sint32,
    ext_pack_fixed32: List<Int> = this.ext_pack_fixed32,
    ext_pack_sfixed32: List<Int> = this.ext_pack_sfixed32,
    ext_pack_int64: List<Long> = this.ext_pack_int64,
    ext_pack_uint64: List<Long> = this.ext_pack_uint64,
    ext_pack_sint64: List<Long> = this.ext_pack_sint64,
    ext_pack_fixed64: List<Long> = this.ext_pack_fixed64,
    ext_pack_sfixed64: List<Long> = this.ext_pack_sfixed64,
    ext_pack_bool: List<Boolean> = this.ext_pack_bool,
    ext_pack_float: List<Float> = this.ext_pack_float,
    ext_pack_double: List<Double> = this.ext_pack_double,
    ext_pack_nested_enum: List<NestedEnum> = this.ext_pack_nested_enum,
    oneof_string: String? = this.oneof_string,
    oneof_int32: Int? = this.oneof_int32,
    oneof_nested_message: NestedMessage? = this.oneof_nested_message,
    unknownFields: ByteString = this.unknownFields
  ): AllTypes = AllTypes(opt_int32, opt_uint32, opt_sint32, opt_fixed32, opt_sfixed32, opt_int64,
      opt_uint64, opt_sint64, opt_fixed64, opt_sfixed64, opt_bool, opt_float, opt_double,
      opt_string, opt_bytes, opt_nested_enum, opt_nested_message, req_int32, req_uint32, req_sint32,
      req_fixed32, req_sfixed32, req_int64, req_uint64, req_sint64, req_fixed64, req_sfixed64,
      req_bool, req_float, req_double, req_string, req_bytes, req_nested_enum, req_nested_message,
      rep_int32, rep_uint32, rep_sint32, rep_fixed32, rep_sfixed32, rep_int64, rep_uint64,
      rep_sint64, rep_fixed64, rep_sfixed64, rep_bool, rep_float, rep_double, rep_string, rep_bytes,
      rep_nested_enum, rep_nested_message, pack_int32, pack_uint32, pack_sint32, pack_fixed32,
      pack_sfixed32, pack_int64, pack_uint64, pack_sint64, pack_fixed64, pack_sfixed64, pack_bool,
      pack_float, pack_double, pack_nested_enum, default_int32, default_uint32, default_sint32,
      default_fixed32, default_sfixed32, default_int64, default_uint64, default_sint64,
      default_fixed64, default_sfixed64, default_bool, default_float, default_double,
      default_string, default_bytes, default_nested_enum, map_int32_int32, map_string_string,
      map_string_message, map_string_enum, ext_opt_int32, ext_opt_uint32, ext_opt_sint32,
      ext_opt_fixed32, ext_opt_sfixed32, ext_opt_int64, ext_opt_uint64, ext_opt_sint64,
      ext_opt_fixed64, ext_opt_sfixed64, ext_opt_bool, ext_opt_float, ext_opt_double,
      ext_opt_string, ext_opt_bytes, ext_opt_nested_enum, ext_opt_nested_message, ext_rep_int32,
      ext_rep_uint32, ext_rep_sint32, ext_rep_fixed32, ext_rep_sfixed32, ext_rep_int64,
      ext_rep_uint64, ext_rep_sint64, ext_rep_fixed64, ext_rep_sfixed64, ext_rep_bool,
      ext_rep_float, ext_rep_double, ext_rep_string, ext_rep_bytes, ext_rep_nested_enum,
      ext_rep_nested_message, ext_pack_int32, ext_pack_uint32, ext_pack_sint32, ext_pack_fixed32,
      ext_pack_sfixed32, ext_pack_int64, ext_pack_uint64, ext_pack_sint64, ext_pack_fixed64,
      ext_pack_sfixed64, ext_pack_bool, ext_pack_float, ext_pack_double, ext_pack_nested_enum,
      oneof_string, oneof_int32, oneof_nested_message, unknownFields)

  class Builder : Message.Builder<AllTypes, Builder>() {
    @JvmField
    var opt_int32: Int? = null

    @JvmField
    var opt_uint32: Int? = null

    @JvmField
    var opt_sint32: Int? = null

    @JvmField
    var opt_fixed32: Int? = null

    @JvmField
    var opt_sfixed32: Int? = null

    @JvmField
    var opt_int64: Long? = null

    @JvmField
    var opt_uint64: Long? = null

    @JvmField
    var opt_sint64: Long? = null

    @JvmField
    var opt_fixed64: Long? = null

    @JvmField
    var opt_sfixed64: Long? = null

    @JvmField
    var opt_bool: Boolean? = null

    @JvmField
    var opt_float: Float? = null

    @JvmField
    var opt_double: Double? = null

    @JvmField
    var opt_string: String? = null

    @JvmField
    var opt_bytes: ByteString? = null

    @JvmField
    var opt_nested_enum: NestedEnum? = null

    @JvmField
    var opt_nested_message: NestedMessage? = null

    @JvmField
    var req_int32: Int? = null

    @JvmField
    var req_uint32: Int? = null

    @JvmField
    var req_sint32: Int? = null

    @JvmField
    var req_fixed32: Int? = null

    @JvmField
    var req_sfixed32: Int? = null

    @JvmField
    var req_int64: Long? = null

    @JvmField
    var req_uint64: Long? = null

    @JvmField
    var req_sint64: Long? = null

    @JvmField
    var req_fixed64: Long? = null

    @JvmField
    var req_sfixed64: Long? = null

    @JvmField
    var req_bool: Boolean? = null

    @JvmField
    var req_float: Float? = null

    @JvmField
    var req_double: Double? = null

    @JvmField
    var req_string: String? = null

    @JvmField
    var req_bytes: ByteString? = null

    @JvmField
    var req_nested_enum: NestedEnum? = null

    @JvmField
    var req_nested_message: NestedMessage? = null

    @JvmField
    var rep_int32: List<Int> = emptyList()

    @JvmField
    var rep_uint32: List<Int> = emptyList()

    @JvmField
    var rep_sint32: List<Int> = emptyList()

    @JvmField
    var rep_fixed32: List<Int> = emptyList()

    @JvmField
    var rep_sfixed32: List<Int> = emptyList()

    @JvmField
    var rep_int64: List<Long> = emptyList()

    @JvmField
    var rep_uint64: List<Long> = emptyList()

    @JvmField
    var rep_sint64: List<Long> = emptyList()

    @JvmField
    var rep_fixed64: List<Long> = emptyList()

    @JvmField
    var rep_sfixed64: List<Long> = emptyList()

    @JvmField
    var rep_bool: List<Boolean> = emptyList()

    @JvmField
    var rep_float: List<Float> = emptyList()

    @JvmField
    var rep_double: List<Double> = emptyList()

    @JvmField
    var rep_string: List<String> = emptyList()

    @JvmField
    var rep_bytes: List<ByteString> = emptyList()

    @JvmField
    var rep_nested_enum: List<NestedEnum> = emptyList()

    @JvmField
    var rep_nested_message: List<NestedMessage> = emptyList()

    @JvmField
    var pack_int32: List<Int> = emptyList()

    @JvmField
    var pack_uint32: List<Int> = emptyList()

    @JvmField
    var pack_sint32: List<Int> = emptyList()

    @JvmField
    var pack_fixed32: List<Int> = emptyList()

    @JvmField
    var pack_sfixed32: List<Int> = emptyList()

    @JvmField
    var pack_int64: List<Long> = emptyList()

    @JvmField
    var pack_uint64: List<Long> = emptyList()

    @JvmField
    var pack_sint64: List<Long> = emptyList()

    @JvmField
    var pack_fixed64: List<Long> = emptyList()

    @JvmField
    var pack_sfixed64: List<Long> = emptyList()

    @JvmField
    var pack_bool: List<Boolean> = emptyList()

    @JvmField
    var pack_float: List<Float> = emptyList()

    @JvmField
    var pack_double: List<Double> = emptyList()

    @JvmField
    var pack_nested_enum: List<NestedEnum> = emptyList()

    @JvmField
    var default_int32: Int? = null

    @JvmField
    var default_uint32: Int? = null

    @JvmField
    var default_sint32: Int? = null

    @JvmField
    var default_fixed32: Int? = null

    @JvmField
    var default_sfixed32: Int? = null

    @JvmField
    var default_int64: Long? = null

    @JvmField
    var default_uint64: Long? = null

    @JvmField
    var default_sint64: Long? = null

    @JvmField
    var default_fixed64: Long? = null

    @JvmField
    var default_sfixed64: Long? = null

    @JvmField
    var default_bool: Boolean? = null

    @JvmField
    var default_float: Float? = null

    @JvmField
    var default_double: Double? = null

    @JvmField
    var default_string: String? = null

    @JvmField
    var default_bytes: ByteString? = null

    @JvmField
    var default_nested_enum: NestedEnum? = null

    @JvmField
    var map_int32_int32: Map<Int, Int> = emptyMap()

    @JvmField
    var map_string_string: Map<String, String> = emptyMap()

    @JvmField
    var map_string_message: Map<String, NestedMessage> = emptyMap()

    @JvmField
    var map_string_enum: Map<String, NestedEnum> = emptyMap()

    @JvmField
    var ext_opt_int32: Int? = null

    @JvmField
    var ext_opt_uint32: Int? = null

    @JvmField
    var ext_opt_sint32: Int? = null

    @JvmField
    var ext_opt_fixed32: Int? = null

    @JvmField
    var ext_opt_sfixed32: Int? = null

    @JvmField
    var ext_opt_int64: Long? = null

    @JvmField
    var ext_opt_uint64: Long? = null

    @JvmField
    var ext_opt_sint64: Long? = null

    @JvmField
    var ext_opt_fixed64: Long? = null

    @JvmField
    var ext_opt_sfixed64: Long? = null

    @JvmField
    var ext_opt_bool: Boolean? = null

    @JvmField
    var ext_opt_float: Float? = null

    @JvmField
    var ext_opt_double: Double? = null

    @JvmField
    var ext_opt_string: String? = null

    @JvmField
    var ext_opt_bytes: ByteString? = null

    @JvmField
    var ext_opt_nested_enum: NestedEnum? = null

    @JvmField
    var ext_opt_nested_message: NestedMessage? = null

    @JvmField
    var ext_rep_int32: List<Int> = emptyList()

    @JvmField
    var ext_rep_uint32: List<Int> = emptyList()

    @JvmField
    var ext_rep_sint32: List<Int> = emptyList()

    @JvmField
    var ext_rep_fixed32: List<Int> = emptyList()

    @JvmField
    var ext_rep_sfixed32: List<Int> = emptyList()

    @JvmField
    var ext_rep_int64: List<Long> = emptyList()

    @JvmField
    var ext_rep_uint64: List<Long> = emptyList()

    @JvmField
    var ext_rep_sint64: List<Long> = emptyList()

    @JvmField
    var ext_rep_fixed64: List<Long> = emptyList()

    @JvmField
    var ext_rep_sfixed64: List<Long> = emptyList()

    @JvmField
    var ext_rep_bool: List<Boolean> = emptyList()

    @JvmField
    var ext_rep_float: List<Float> = emptyList()

    @JvmField
    var ext_rep_double: List<Double> = emptyList()

    @JvmField
    var ext_rep_string: List<String> = emptyList()

    @JvmField
    var ext_rep_bytes: List<ByteString> = emptyList()

    @JvmField
    var ext_rep_nested_enum: List<NestedEnum> = emptyList()

    @JvmField
    var ext_rep_nested_message: List<NestedMessage> = emptyList()

    @JvmField
    var ext_pack_int32: List<Int> = emptyList()

    @JvmField
    var ext_pack_uint32: List<Int> = emptyList()

    @JvmField
    var ext_pack_sint32: List<Int> = emptyList()

    @JvmField
    var ext_pack_fixed32: List<Int> = emptyList()

    @JvmField
    var ext_pack_sfixed32: List<Int> = emptyList()

    @JvmField
    var ext_pack_int64: List<Long> = emptyList()

    @JvmField
    var ext_pack_uint64: List<Long> = emptyList()

    @JvmField
    var ext_pack_sint64: List<Long> = emptyList()

    @JvmField
    var ext_pack_fixed64: List<Long> = emptyList()

    @JvmField
    var ext_pack_sfixed64: List<Long> = emptyList()

    @JvmField
    var ext_pack_bool: List<Boolean> = emptyList()

    @JvmField
    var ext_pack_float: List<Float> = emptyList()

    @JvmField
    var ext_pack_double: List<Double> = emptyList()

    @JvmField
    var ext_pack_nested_enum: List<NestedEnum> = emptyList()

    @JvmField
    var oneof_string: String? = null

    @JvmField
    var oneof_int32: Int? = null

    @JvmField
    var oneof_nested_message: NestedMessage? = null

    fun opt_int32(opt_int32: Int?): Builder {
      this.opt_int32 = opt_int32
      return this
    }

    fun opt_uint32(opt_uint32: Int?): Builder {
      this.opt_uint32 = opt_uint32
      return this
    }

    fun opt_sint32(opt_sint32: Int?): Builder {
      this.opt_sint32 = opt_sint32
      return this
    }

    fun opt_fixed32(opt_fixed32: Int?): Builder {
      this.opt_fixed32 = opt_fixed32
      return this
    }

    fun opt_sfixed32(opt_sfixed32: Int?): Builder {
      this.opt_sfixed32 = opt_sfixed32
      return this
    }

    fun opt_int64(opt_int64: Long?): Builder {
      this.opt_int64 = opt_int64
      return this
    }

    fun opt_uint64(opt_uint64: Long?): Builder {
      this.opt_uint64 = opt_uint64
      return this
    }

    fun opt_sint64(opt_sint64: Long?): Builder {
      this.opt_sint64 = opt_sint64
      return this
    }

    fun opt_fixed64(opt_fixed64: Long?): Builder {
      this.opt_fixed64 = opt_fixed64
      return this
    }

    fun opt_sfixed64(opt_sfixed64: Long?): Builder {
      this.opt_sfixed64 = opt_sfixed64
      return this
    }

    fun opt_bool(opt_bool: Boolean?): Builder {
      this.opt_bool = opt_bool
      return this
    }

    fun opt_float(opt_float: Float?): Builder {
      this.opt_float = opt_float
      return this
    }

    fun opt_double(opt_double: Double?): Builder {
      this.opt_double = opt_double
      return this
    }

    fun opt_string(opt_string: String?): Builder {
      this.opt_string = opt_string
      return this
    }

    fun opt_bytes(opt_bytes: ByteString?): Builder {
      this.opt_bytes = opt_bytes
      return this
    }

    fun opt_nested_enum(opt_nested_enum: NestedEnum?): Builder {
      this.opt_nested_enum = opt_nested_enum
      return this
    }

    fun opt_nested_message(opt_nested_message: NestedMessage?): Builder {
      this.opt_nested_message = opt_nested_message
      return this
    }

    fun req_int32(req_int32: Int): Builder {
      this.req_int32 = req_int32
      return this
    }

    fun req_uint32(req_uint32: Int): Builder {
      this.req_uint32 = req_uint32
      return this
    }

    fun req_sint32(req_sint32: Int): Builder {
      this.req_sint32 = req_sint32
      return this
    }

    fun req_fixed32(req_fixed32: Int): Builder {
      this.req_fixed32 = req_fixed32
      return this
    }

    fun req_sfixed32(req_sfixed32: Int): Builder {
      this.req_sfixed32 = req_sfixed32
      return this
    }

    fun req_int64(req_int64: Long): Builder {
      this.req_int64 = req_int64
      return this
    }

    fun req_uint64(req_uint64: Long): Builder {
      this.req_uint64 = req_uint64
      return this
    }

    fun req_sint64(req_sint64: Long): Builder {
      this.req_sint64 = req_sint64
      return this
    }

    fun req_fixed64(req_fixed64: Long): Builder {
      this.req_fixed64 = req_fixed64
      return this
    }

    fun req_sfixed64(req_sfixed64: Long): Builder {
      this.req_sfixed64 = req_sfixed64
      return this
    }

    fun req_bool(req_bool: Boolean): Builder {
      this.req_bool = req_bool
      return this
    }

    fun req_float(req_float: Float): Builder {
      this.req_float = req_float
      return this
    }

    fun req_double(req_double: Double): Builder {
      this.req_double = req_double
      return this
    }

    fun req_string(req_string: String): Builder {
      this.req_string = req_string
      return this
    }

    fun req_bytes(req_bytes: ByteString): Builder {
      this.req_bytes = req_bytes
      return this
    }

    fun req_nested_enum(req_nested_enum: NestedEnum): Builder {
      this.req_nested_enum = req_nested_enum
      return this
    }

    fun req_nested_message(req_nested_message: NestedMessage?): Builder {
      this.req_nested_message = req_nested_message
      return this
    }

    fun rep_int32(rep_int32: List<Int>): Builder {
      checkElementsNotNull(rep_int32)
      this.rep_int32 = rep_int32
      return this
    }

    fun rep_uint32(rep_uint32: List<Int>): Builder {
      checkElementsNotNull(rep_uint32)
      this.rep_uint32 = rep_uint32
      return this
    }

    fun rep_sint32(rep_sint32: List<Int>): Builder {
      checkElementsNotNull(rep_sint32)
      this.rep_sint32 = rep_sint32
      return this
    }

    fun rep_fixed32(rep_fixed32: List<Int>): Builder {
      checkElementsNotNull(rep_fixed32)
      this.rep_fixed32 = rep_fixed32
      return this
    }

    fun rep_sfixed32(rep_sfixed32: List<Int>): Builder {
      checkElementsNotNull(rep_sfixed32)
      this.rep_sfixed32 = rep_sfixed32
      return this
    }

    fun rep_int64(rep_int64: List<Long>): Builder {
      checkElementsNotNull(rep_int64)
      this.rep_int64 = rep_int64
      return this
    }

    fun rep_uint64(rep_uint64: List<Long>): Builder {
      checkElementsNotNull(rep_uint64)
      this.rep_uint64 = rep_uint64
      return this
    }

    fun rep_sint64(rep_sint64: List<Long>): Builder {
      checkElementsNotNull(rep_sint64)
      this.rep_sint64 = rep_sint64
      return this
    }

    fun rep_fixed64(rep_fixed64: List<Long>): Builder {
      checkElementsNotNull(rep_fixed64)
      this.rep_fixed64 = rep_fixed64
      return this
    }

    fun rep_sfixed64(rep_sfixed64: List<Long>): Builder {
      checkElementsNotNull(rep_sfixed64)
      this.rep_sfixed64 = rep_sfixed64
      return this
    }

    fun rep_bool(rep_bool: List<Boolean>): Builder {
      checkElementsNotNull(rep_bool)
      this.rep_bool = rep_bool
      return this
    }

    fun rep_float(rep_float: List<Float>): Builder {
      checkElementsNotNull(rep_float)
      this.rep_float = rep_float
      return this
    }

    fun rep_double(rep_double: List<Double>): Builder {
      checkElementsNotNull(rep_double)
      this.rep_double = rep_double
      return this
    }

    fun rep_string(rep_string: List<String>): Builder {
      checkElementsNotNull(rep_string)
      this.rep_string = rep_string
      return this
    }

    fun rep_bytes(rep_bytes: List<ByteString>): Builder {
      checkElementsNotNull(rep_bytes)
      this.rep_bytes = rep_bytes
      return this
    }

    fun rep_nested_enum(rep_nested_enum: List<NestedEnum>): Builder {
      checkElementsNotNull(rep_nested_enum)
      this.rep_nested_enum = rep_nested_enum
      return this
    }

    fun rep_nested_message(rep_nested_message: List<NestedMessage>): Builder {
      checkElementsNotNull(rep_nested_message)
      this.rep_nested_message = rep_nested_message
      return this
    }

    fun pack_int32(pack_int32: List<Int>): Builder {
      checkElementsNotNull(pack_int32)
      this.pack_int32 = pack_int32
      return this
    }

    fun pack_uint32(pack_uint32: List<Int>): Builder {
      checkElementsNotNull(pack_uint32)
      this.pack_uint32 = pack_uint32
      return this
    }

    fun pack_sint32(pack_sint32: List<Int>): Builder {
      checkElementsNotNull(pack_sint32)
      this.pack_sint32 = pack_sint32
      return this
    }

    fun pack_fixed32(pack_fixed32: List<Int>): Builder {
      checkElementsNotNull(pack_fixed32)
      this.pack_fixed32 = pack_fixed32
      return this
    }

    fun pack_sfixed32(pack_sfixed32: List<Int>): Builder {
      checkElementsNotNull(pack_sfixed32)
      this.pack_sfixed32 = pack_sfixed32
      return this
    }

    fun pack_int64(pack_int64: List<Long>): Builder {
      checkElementsNotNull(pack_int64)
      this.pack_int64 = pack_int64
      return this
    }

    fun pack_uint64(pack_uint64: List<Long>): Builder {
      checkElementsNotNull(pack_uint64)
      this.pack_uint64 = pack_uint64
      return this
    }

    fun pack_sint64(pack_sint64: List<Long>): Builder {
      checkElementsNotNull(pack_sint64)
      this.pack_sint64 = pack_sint64
      return this
    }

    fun pack_fixed64(pack_fixed64: List<Long>): Builder {
      checkElementsNotNull(pack_fixed64)
      this.pack_fixed64 = pack_fixed64
      return this
    }

    fun pack_sfixed64(pack_sfixed64: List<Long>): Builder {
      checkElementsNotNull(pack_sfixed64)
      this.pack_sfixed64 = pack_sfixed64
      return this
    }

    fun pack_bool(pack_bool: List<Boolean>): Builder {
      checkElementsNotNull(pack_bool)
      this.pack_bool = pack_bool
      return this
    }

    fun pack_float(pack_float: List<Float>): Builder {
      checkElementsNotNull(pack_float)
      this.pack_float = pack_float
      return this
    }

    fun pack_double(pack_double: List<Double>): Builder {
      checkElementsNotNull(pack_double)
      this.pack_double = pack_double
      return this
    }

    fun pack_nested_enum(pack_nested_enum: List<NestedEnum>): Builder {
      checkElementsNotNull(pack_nested_enum)
      this.pack_nested_enum = pack_nested_enum
      return this
    }

    fun default_int32(default_int32: Int?): Builder {
      this.default_int32 = default_int32
      return this
    }

    fun default_uint32(default_uint32: Int?): Builder {
      this.default_uint32 = default_uint32
      return this
    }

    fun default_sint32(default_sint32: Int?): Builder {
      this.default_sint32 = default_sint32
      return this
    }

    fun default_fixed32(default_fixed32: Int?): Builder {
      this.default_fixed32 = default_fixed32
      return this
    }

    fun default_sfixed32(default_sfixed32: Int?): Builder {
      this.default_sfixed32 = default_sfixed32
      return this
    }

    fun default_int64(default_int64: Long?): Builder {
      this.default_int64 = default_int64
      return this
    }

    fun default_uint64(default_uint64: Long?): Builder {
      this.default_uint64 = default_uint64
      return this
    }

    fun default_sint64(default_sint64: Long?): Builder {
      this.default_sint64 = default_sint64
      return this
    }

    fun default_fixed64(default_fixed64: Long?): Builder {
      this.default_fixed64 = default_fixed64
      return this
    }

    fun default_sfixed64(default_sfixed64: Long?): Builder {
      this.default_sfixed64 = default_sfixed64
      return this
    }

    fun default_bool(default_bool: Boolean?): Builder {
      this.default_bool = default_bool
      return this
    }

    fun default_float(default_float: Float?): Builder {
      this.default_float = default_float
      return this
    }

    fun default_double(default_double: Double?): Builder {
      this.default_double = default_double
      return this
    }

    fun default_string(default_string: String?): Builder {
      this.default_string = default_string
      return this
    }

    fun default_bytes(default_bytes: ByteString?): Builder {
      this.default_bytes = default_bytes
      return this
    }

    fun default_nested_enum(default_nested_enum: NestedEnum?): Builder {
      this.default_nested_enum = default_nested_enum
      return this
    }

    fun map_int32_int32(map_int32_int32: Map<Int, Int>): Builder {
      this.map_int32_int32 = map_int32_int32
      return this
    }

    fun map_string_string(map_string_string: Map<String, String>): Builder {
      this.map_string_string = map_string_string
      return this
    }

    fun map_string_message(map_string_message: Map<String, NestedMessage>): Builder {
      this.map_string_message = map_string_message
      return this
    }

    fun map_string_enum(map_string_enum: Map<String, NestedEnum>): Builder {
      this.map_string_enum = map_string_enum
      return this
    }

    fun ext_opt_int32(ext_opt_int32: Int?): Builder {
      this.ext_opt_int32 = ext_opt_int32
      return this
    }

    fun ext_opt_uint32(ext_opt_uint32: Int?): Builder {
      this.ext_opt_uint32 = ext_opt_uint32
      return this
    }

    fun ext_opt_sint32(ext_opt_sint32: Int?): Builder {
      this.ext_opt_sint32 = ext_opt_sint32
      return this
    }

    fun ext_opt_fixed32(ext_opt_fixed32: Int?): Builder {
      this.ext_opt_fixed32 = ext_opt_fixed32
      return this
    }

    fun ext_opt_sfixed32(ext_opt_sfixed32: Int?): Builder {
      this.ext_opt_sfixed32 = ext_opt_sfixed32
      return this
    }

    fun ext_opt_int64(ext_opt_int64: Long?): Builder {
      this.ext_opt_int64 = ext_opt_int64
      return this
    }

    fun ext_opt_uint64(ext_opt_uint64: Long?): Builder {
      this.ext_opt_uint64 = ext_opt_uint64
      return this
    }

    fun ext_opt_sint64(ext_opt_sint64: Long?): Builder {
      this.ext_opt_sint64 = ext_opt_sint64
      return this
    }

    fun ext_opt_fixed64(ext_opt_fixed64: Long?): Builder {
      this.ext_opt_fixed64 = ext_opt_fixed64
      return this
    }

    fun ext_opt_sfixed64(ext_opt_sfixed64: Long?): Builder {
      this.ext_opt_sfixed64 = ext_opt_sfixed64
      return this
    }

    fun ext_opt_bool(ext_opt_bool: Boolean?): Builder {
      this.ext_opt_bool = ext_opt_bool
      return this
    }

    fun ext_opt_float(ext_opt_float: Float?): Builder {
      this.ext_opt_float = ext_opt_float
      return this
    }

    fun ext_opt_double(ext_opt_double: Double?): Builder {
      this.ext_opt_double = ext_opt_double
      return this
    }

    fun ext_opt_string(ext_opt_string: String?): Builder {
      this.ext_opt_string = ext_opt_string
      return this
    }

    fun ext_opt_bytes(ext_opt_bytes: ByteString?): Builder {
      this.ext_opt_bytes = ext_opt_bytes
      return this
    }

    fun ext_opt_nested_enum(ext_opt_nested_enum: NestedEnum?): Builder {
      this.ext_opt_nested_enum = ext_opt_nested_enum
      return this
    }

    fun ext_opt_nested_message(ext_opt_nested_message: NestedMessage?): Builder {
      this.ext_opt_nested_message = ext_opt_nested_message
      return this
    }

    fun ext_rep_int32(ext_rep_int32: List<Int>): Builder {
      checkElementsNotNull(ext_rep_int32)
      this.ext_rep_int32 = ext_rep_int32
      return this
    }

    fun ext_rep_uint32(ext_rep_uint32: List<Int>): Builder {
      checkElementsNotNull(ext_rep_uint32)
      this.ext_rep_uint32 = ext_rep_uint32
      return this
    }

    fun ext_rep_sint32(ext_rep_sint32: List<Int>): Builder {
      checkElementsNotNull(ext_rep_sint32)
      this.ext_rep_sint32 = ext_rep_sint32
      return this
    }

    fun ext_rep_fixed32(ext_rep_fixed32: List<Int>): Builder {
      checkElementsNotNull(ext_rep_fixed32)
      this.ext_rep_fixed32 = ext_rep_fixed32
      return this
    }

    fun ext_rep_sfixed32(ext_rep_sfixed32: List<Int>): Builder {
      checkElementsNotNull(ext_rep_sfixed32)
      this.ext_rep_sfixed32 = ext_rep_sfixed32
      return this
    }

    fun ext_rep_int64(ext_rep_int64: List<Long>): Builder {
      checkElementsNotNull(ext_rep_int64)
      this.ext_rep_int64 = ext_rep_int64
      return this
    }

    fun ext_rep_uint64(ext_rep_uint64: List<Long>): Builder {
      checkElementsNotNull(ext_rep_uint64)
      this.ext_rep_uint64 = ext_rep_uint64
      return this
    }

    fun ext_rep_sint64(ext_rep_sint64: List<Long>): Builder {
      checkElementsNotNull(ext_rep_sint64)
      this.ext_rep_sint64 = ext_rep_sint64
      return this
    }

    fun ext_rep_fixed64(ext_rep_fixed64: List<Long>): Builder {
      checkElementsNotNull(ext_rep_fixed64)
      this.ext_rep_fixed64 = ext_rep_fixed64
      return this
    }

    fun ext_rep_sfixed64(ext_rep_sfixed64: List<Long>): Builder {
      checkElementsNotNull(ext_rep_sfixed64)
      this.ext_rep_sfixed64 = ext_rep_sfixed64
      return this
    }

    fun ext_rep_bool(ext_rep_bool: List<Boolean>): Builder {
      checkElementsNotNull(ext_rep_bool)
      this.ext_rep_bool = ext_rep_bool
      return this
    }

    fun ext_rep_float(ext_rep_float: List<Float>): Builder {
      checkElementsNotNull(ext_rep_float)
      this.ext_rep_float = ext_rep_float
      return this
    }

    fun ext_rep_double(ext_rep_double: List<Double>): Builder {
      checkElementsNotNull(ext_rep_double)
      this.ext_rep_double = ext_rep_double
      return this
    }

    fun ext_rep_string(ext_rep_string: List<String>): Builder {
      checkElementsNotNull(ext_rep_string)
      this.ext_rep_string = ext_rep_string
      return this
    }

    fun ext_rep_bytes(ext_rep_bytes: List<ByteString>): Builder {
      checkElementsNotNull(ext_rep_bytes)
      this.ext_rep_bytes = ext_rep_bytes
      return this
    }

    fun ext_rep_nested_enum(ext_rep_nested_enum: List<NestedEnum>): Builder {
      checkElementsNotNull(ext_rep_nested_enum)
      this.ext_rep_nested_enum = ext_rep_nested_enum
      return this
    }

    fun ext_rep_nested_message(ext_rep_nested_message: List<NestedMessage>): Builder {
      checkElementsNotNull(ext_rep_nested_message)
      this.ext_rep_nested_message = ext_rep_nested_message
      return this
    }

    fun ext_pack_int32(ext_pack_int32: List<Int>): Builder {
      checkElementsNotNull(ext_pack_int32)
      this.ext_pack_int32 = ext_pack_int32
      return this
    }

    fun ext_pack_uint32(ext_pack_uint32: List<Int>): Builder {
      checkElementsNotNull(ext_pack_uint32)
      this.ext_pack_uint32 = ext_pack_uint32
      return this
    }

    fun ext_pack_sint32(ext_pack_sint32: List<Int>): Builder {
      checkElementsNotNull(ext_pack_sint32)
      this.ext_pack_sint32 = ext_pack_sint32
      return this
    }

    fun ext_pack_fixed32(ext_pack_fixed32: List<Int>): Builder {
      checkElementsNotNull(ext_pack_fixed32)
      this.ext_pack_fixed32 = ext_pack_fixed32
      return this
    }

    fun ext_pack_sfixed32(ext_pack_sfixed32: List<Int>): Builder {
      checkElementsNotNull(ext_pack_sfixed32)
      this.ext_pack_sfixed32 = ext_pack_sfixed32
      return this
    }

    fun ext_pack_int64(ext_pack_int64: List<Long>): Builder {
      checkElementsNotNull(ext_pack_int64)
      this.ext_pack_int64 = ext_pack_int64
      return this
    }

    fun ext_pack_uint64(ext_pack_uint64: List<Long>): Builder {
      checkElementsNotNull(ext_pack_uint64)
      this.ext_pack_uint64 = ext_pack_uint64
      return this
    }

    fun ext_pack_sint64(ext_pack_sint64: List<Long>): Builder {
      checkElementsNotNull(ext_pack_sint64)
      this.ext_pack_sint64 = ext_pack_sint64
      return this
    }

    fun ext_pack_fixed64(ext_pack_fixed64: List<Long>): Builder {
      checkElementsNotNull(ext_pack_fixed64)
      this.ext_pack_fixed64 = ext_pack_fixed64
      return this
    }

    fun ext_pack_sfixed64(ext_pack_sfixed64: List<Long>): Builder {
      checkElementsNotNull(ext_pack_sfixed64)
      this.ext_pack_sfixed64 = ext_pack_sfixed64
      return this
    }

    fun ext_pack_bool(ext_pack_bool: List<Boolean>): Builder {
      checkElementsNotNull(ext_pack_bool)
      this.ext_pack_bool = ext_pack_bool
      return this
    }

    fun ext_pack_float(ext_pack_float: List<Float>): Builder {
      checkElementsNotNull(ext_pack_float)
      this.ext_pack_float = ext_pack_float
      return this
    }

    fun ext_pack_double(ext_pack_double: List<Double>): Builder {
      checkElementsNotNull(ext_pack_double)
      this.ext_pack_double = ext_pack_double
      return this
    }

    fun ext_pack_nested_enum(ext_pack_nested_enum: List<NestedEnum>): Builder {
      checkElementsNotNull(ext_pack_nested_enum)
      this.ext_pack_nested_enum = ext_pack_nested_enum
      return this
    }

    fun oneof_string(oneof_string: String?): Builder {
      this.oneof_string = oneof_string
      this.oneof_int32 = null
      this.oneof_nested_message = null
      return this
    }

    fun oneof_int32(oneof_int32: Int?): Builder {
      this.oneof_int32 = oneof_int32
      this.oneof_string = null
      this.oneof_nested_message = null
      return this
    }

    fun oneof_nested_message(oneof_nested_message: NestedMessage?): Builder {
      this.oneof_nested_message = oneof_nested_message
      this.oneof_string = null
      this.oneof_int32 = null
      return this
    }

    override fun build(): AllTypes = AllTypes(
      opt_int32 = opt_int32,
      opt_uint32 = opt_uint32,
      opt_sint32 = opt_sint32,
      opt_fixed32 = opt_fixed32,
      opt_sfixed32 = opt_sfixed32,
      opt_int64 = opt_int64,
      opt_uint64 = opt_uint64,
      opt_sint64 = opt_sint64,
      opt_fixed64 = opt_fixed64,
      opt_sfixed64 = opt_sfixed64,
      opt_bool = opt_bool,
      opt_float = opt_float,
      opt_double = opt_double,
      opt_string = opt_string,
      opt_bytes = opt_bytes,
      opt_nested_enum = opt_nested_enum,
      opt_nested_message = opt_nested_message,
      req_int32 = req_int32 ?: throw missingRequiredFields(req_int32, "req_int32"),
      req_uint32 = req_uint32 ?: throw missingRequiredFields(req_uint32, "req_uint32"),
      req_sint32 = req_sint32 ?: throw missingRequiredFields(req_sint32, "req_sint32"),
      req_fixed32 = req_fixed32 ?: throw missingRequiredFields(req_fixed32, "req_fixed32"),
      req_sfixed32 = req_sfixed32 ?: throw missingRequiredFields(req_sfixed32, "req_sfixed32"),
      req_int64 = req_int64 ?: throw missingRequiredFields(req_int64, "req_int64"),
      req_uint64 = req_uint64 ?: throw missingRequiredFields(req_uint64, "req_uint64"),
      req_sint64 = req_sint64 ?: throw missingRequiredFields(req_sint64, "req_sint64"),
      req_fixed64 = req_fixed64 ?: throw missingRequiredFields(req_fixed64, "req_fixed64"),
      req_sfixed64 = req_sfixed64 ?: throw missingRequiredFields(req_sfixed64, "req_sfixed64"),
      req_bool = req_bool ?: throw missingRequiredFields(req_bool, "req_bool"),
      req_float = req_float ?: throw missingRequiredFields(req_float, "req_float"),
      req_double = req_double ?: throw missingRequiredFields(req_double, "req_double"),
      req_string = req_string ?: throw missingRequiredFields(req_string, "req_string"),
      req_bytes = req_bytes ?: throw missingRequiredFields(req_bytes, "req_bytes"),
      req_nested_enum = req_nested_enum ?: throw missingRequiredFields(req_nested_enum,
          "req_nested_enum"),
      req_nested_message = req_nested_message ?: throw missingRequiredFields(req_nested_message,
          "req_nested_message"),
      rep_int32 = rep_int32,
      rep_uint32 = rep_uint32,
      rep_sint32 = rep_sint32,
      rep_fixed32 = rep_fixed32,
      rep_sfixed32 = rep_sfixed32,
      rep_int64 = rep_int64,
      rep_uint64 = rep_uint64,
      rep_sint64 = rep_sint64,
      rep_fixed64 = rep_fixed64,
      rep_sfixed64 = rep_sfixed64,
      rep_bool = rep_bool,
      rep_float = rep_float,
      rep_double = rep_double,
      rep_string = rep_string,
      rep_bytes = rep_bytes,
      rep_nested_enum = rep_nested_enum,
      rep_nested_message = rep_nested_message,
      pack_int32 = pack_int32,
      pack_uint32 = pack_uint32,
      pack_sint32 = pack_sint32,
      pack_fixed32 = pack_fixed32,
      pack_sfixed32 = pack_sfixed32,
      pack_int64 = pack_int64,
      pack_uint64 = pack_uint64,
      pack_sint64 = pack_sint64,
      pack_fixed64 = pack_fixed64,
      pack_sfixed64 = pack_sfixed64,
      pack_bool = pack_bool,
      pack_float = pack_float,
      pack_double = pack_double,
      pack_nested_enum = pack_nested_enum,
      default_int32 = default_int32,
      default_uint32 = default_uint32,
      default_sint32 = default_sint32,
      default_fixed32 = default_fixed32,
      default_sfixed32 = default_sfixed32,
      default_int64 = default_int64,
      default_uint64 = default_uint64,
      default_sint64 = default_sint64,
      default_fixed64 = default_fixed64,
      default_sfixed64 = default_sfixed64,
      default_bool = default_bool,
      default_float = default_float,
      default_double = default_double,
      default_string = default_string,
      default_bytes = default_bytes,
      default_nested_enum = default_nested_enum,
      map_int32_int32 = map_int32_int32,
      map_string_string = map_string_string,
      map_string_message = map_string_message,
      map_string_enum = map_string_enum,
      ext_opt_int32 = ext_opt_int32,
      ext_opt_uint32 = ext_opt_uint32,
      ext_opt_sint32 = ext_opt_sint32,
      ext_opt_fixed32 = ext_opt_fixed32,
      ext_opt_sfixed32 = ext_opt_sfixed32,
      ext_opt_int64 = ext_opt_int64,
      ext_opt_uint64 = ext_opt_uint64,
      ext_opt_sint64 = ext_opt_sint64,
      ext_opt_fixed64 = ext_opt_fixed64,
      ext_opt_sfixed64 = ext_opt_sfixed64,
      ext_opt_bool = ext_opt_bool,
      ext_opt_float = ext_opt_float,
      ext_opt_double = ext_opt_double,
      ext_opt_string = ext_opt_string,
      ext_opt_bytes = ext_opt_bytes,
      ext_opt_nested_enum = ext_opt_nested_enum,
      ext_opt_nested_message = ext_opt_nested_message,
      ext_rep_int32 = ext_rep_int32,
      ext_rep_uint32 = ext_rep_uint32,
      ext_rep_sint32 = ext_rep_sint32,
      ext_rep_fixed32 = ext_rep_fixed32,
      ext_rep_sfixed32 = ext_rep_sfixed32,
      ext_rep_int64 = ext_rep_int64,
      ext_rep_uint64 = ext_rep_uint64,
      ext_rep_sint64 = ext_rep_sint64,
      ext_rep_fixed64 = ext_rep_fixed64,
      ext_rep_sfixed64 = ext_rep_sfixed64,
      ext_rep_bool = ext_rep_bool,
      ext_rep_float = ext_rep_float,
      ext_rep_double = ext_rep_double,
      ext_rep_string = ext_rep_string,
      ext_rep_bytes = ext_rep_bytes,
      ext_rep_nested_enum = ext_rep_nested_enum,
      ext_rep_nested_message = ext_rep_nested_message,
      ext_pack_int32 = ext_pack_int32,
      ext_pack_uint32 = ext_pack_uint32,
      ext_pack_sint32 = ext_pack_sint32,
      ext_pack_fixed32 = ext_pack_fixed32,
      ext_pack_sfixed32 = ext_pack_sfixed32,
      ext_pack_int64 = ext_pack_int64,
      ext_pack_uint64 = ext_pack_uint64,
      ext_pack_sint64 = ext_pack_sint64,
      ext_pack_fixed64 = ext_pack_fixed64,
      ext_pack_sfixed64 = ext_pack_sfixed64,
      ext_pack_bool = ext_pack_bool,
      ext_pack_float = ext_pack_float,
      ext_pack_double = ext_pack_double,
      ext_pack_nested_enum = ext_pack_nested_enum,
      oneof_string = oneof_string,
      oneof_int32 = oneof_int32,
      oneof_nested_message = oneof_nested_message,
      unknownFields = buildUnknownFields()
    )
  }

  companion object {
    const val DEFAULT_DEFAULT_INT32: Int = Int.MAX_VALUE

    const val DEFAULT_DEFAULT_UINT32: Int = -1

    const val DEFAULT_DEFAULT_SINT32: Int = Int.MIN_VALUE

    const val DEFAULT_DEFAULT_FIXED32: Int = -1

    const val DEFAULT_DEFAULT_SFIXED32: Int = Int.MIN_VALUE

    const val DEFAULT_DEFAULT_INT64: Long = Long.MAX_VALUE

    const val DEFAULT_DEFAULT_UINT64: Long = -1L

    const val DEFAULT_DEFAULT_SINT64: Long = Long.MIN_VALUE

    const val DEFAULT_DEFAULT_FIXED64: Long = -1L

    const val DEFAULT_DEFAULT_SFIXED64: Long = Long.MIN_VALUE

    const val DEFAULT_DEFAULT_BOOL: Boolean = true

    const val DEFAULT_DEFAULT_FLOAT: Float = 123.456e7f

    const val DEFAULT_DEFAULT_DOUBLE: Double = 1.23456E80

    const val DEFAULT_DEFAULT_STRING: String =
        "çok\u0007\b\u000c\n\r\t\u000b\u0001\u0001\u0001\u000f\u000f~\u0001\u0001\u0011\u0001\u0001\u0011güzel"

    @JvmField
    val DEFAULT_DEFAULT_BYTES: ByteString = "529rBwgMCg0JCwEBAQ8PfgEBEQEBEWf8emVs".decodeBase64()!!

    @JvmField
    val DEFAULT_DEFAULT_NESTED_ENUM: NestedEnum = NestedEnum.A

    @JvmField
    val ADAPTER: ProtoAdapter<AllTypes> = object : ProtoAdapter<AllTypes>(
      FieldEncoding.LENGTH_DELIMITED, 
      AllTypes::class, 
      "type.googleapis.com/squareup.proto2.AllTypes", 
      PROTO_2, 
      null
    ) {
      private val map_int32_int32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32) }

      private val map_string_stringAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      private val map_string_messageAdapter: ProtoAdapter<Map<String, NestedMessage>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedMessage.ADAPTER) }

      private val map_string_enumAdapter: ProtoAdapter<Map<String, NestedEnum>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedEnum.ADAPTER) }

      override fun encodedSize(value: AllTypes): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.opt_int32)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(2, value.opt_uint32)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(3, value.opt_sint32)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(4, value.opt_fixed32)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(5, value.opt_sfixed32)
        size += ProtoAdapter.INT64.encodedSizeWithTag(6, value.opt_int64)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(7, value.opt_uint64)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(8, value.opt_sint64)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(9, value.opt_fixed64)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(10, value.opt_sfixed64)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(11, value.opt_bool)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(12, value.opt_float)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(13, value.opt_double)
        size += ProtoAdapter.STRING.encodedSizeWithTag(14, value.opt_string)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(15, value.opt_bytes)
        size += NestedEnum.ADAPTER.encodedSizeWithTag(16, value.opt_nested_enum)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(17, value.opt_nested_message)
        size += ProtoAdapter.INT32.encodedSizeWithTag(101, value.req_int32)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(102, value.req_uint32)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(103, value.req_sint32)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(104, value.req_fixed32)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(105, value.req_sfixed32)
        size += ProtoAdapter.INT64.encodedSizeWithTag(106, value.req_int64)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(107, value.req_uint64)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(108, value.req_sint64)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(109, value.req_fixed64)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(110, value.req_sfixed64)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(111, value.req_bool)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(112, value.req_float)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(113, value.req_double)
        size += ProtoAdapter.STRING.encodedSizeWithTag(114, value.req_string)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(115, value.req_bytes)
        size += NestedEnum.ADAPTER.encodedSizeWithTag(116, value.req_nested_enum)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(117, value.req_nested_message)
        size += ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.rep_int32)
        size += ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.rep_uint32)
        size += ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.rep_sint32)
        size += ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.rep_fixed32)
        size += ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.rep_sfixed32)
        size += ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.rep_int64)
        size += ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.rep_uint64)
        size += ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.rep_sint64)
        size += ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.rep_fixed64)
        size += ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.rep_sfixed64)
        size += ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.rep_bool)
        size += ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.rep_float)
        size += ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.rep_double)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.rep_string)
        size += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.rep_bytes)
        size += NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(216, value.rep_nested_enum)
        size += NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(217, value.rep_nested_message)
        size += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(301, value.pack_int32)
        size += ProtoAdapter.UINT32.asPacked().encodedSizeWithTag(302, value.pack_uint32)
        size += ProtoAdapter.SINT32.asPacked().encodedSizeWithTag(303, value.pack_sint32)
        size += ProtoAdapter.FIXED32.asPacked().encodedSizeWithTag(304, value.pack_fixed32)
        size += ProtoAdapter.SFIXED32.asPacked().encodedSizeWithTag(305, value.pack_sfixed32)
        size += ProtoAdapter.INT64.asPacked().encodedSizeWithTag(306, value.pack_int64)
        size += ProtoAdapter.UINT64.asPacked().encodedSizeWithTag(307, value.pack_uint64)
        size += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(308, value.pack_sint64)
        size += ProtoAdapter.FIXED64.asPacked().encodedSizeWithTag(309, value.pack_fixed64)
        size += ProtoAdapter.SFIXED64.asPacked().encodedSizeWithTag(310, value.pack_sfixed64)
        size += ProtoAdapter.BOOL.asPacked().encodedSizeWithTag(311, value.pack_bool)
        size += ProtoAdapter.FLOAT.asPacked().encodedSizeWithTag(312, value.pack_float)
        size += ProtoAdapter.DOUBLE.asPacked().encodedSizeWithTag(313, value.pack_double)
        size += NestedEnum.ADAPTER.asPacked().encodedSizeWithTag(316, value.pack_nested_enum)
        size += ProtoAdapter.INT32.encodedSizeWithTag(401, value.default_int32)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(402, value.default_uint32)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(403, value.default_sint32)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(404, value.default_fixed32)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(405, value.default_sfixed32)
        size += ProtoAdapter.INT64.encodedSizeWithTag(406, value.default_int64)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(407, value.default_uint64)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(408, value.default_sint64)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(409, value.default_fixed64)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(410, value.default_sfixed64)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(411, value.default_bool)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(412, value.default_float)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(413, value.default_double)
        size += ProtoAdapter.STRING.encodedSizeWithTag(414, value.default_string)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(415, value.default_bytes)
        size += NestedEnum.ADAPTER.encodedSizeWithTag(416, value.default_nested_enum)
        size += map_int32_int32Adapter.encodedSizeWithTag(501, value.map_int32_int32)
        size += map_string_stringAdapter.encodedSizeWithTag(502, value.map_string_string)
        size += map_string_messageAdapter.encodedSizeWithTag(503, value.map_string_message)
        size += map_string_enumAdapter.encodedSizeWithTag(504, value.map_string_enum)
        size += ProtoAdapter.INT32.encodedSizeWithTag(1001, value.ext_opt_int32)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(1002, value.ext_opt_uint32)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(1003, value.ext_opt_sint32)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(1004, value.ext_opt_fixed32)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(1005, value.ext_opt_sfixed32)
        size += ProtoAdapter.INT64.encodedSizeWithTag(1006, value.ext_opt_int64)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(1007, value.ext_opt_uint64)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(1008, value.ext_opt_sint64)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(1009, value.ext_opt_fixed64)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(1010, value.ext_opt_sfixed64)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(1011, value.ext_opt_bool)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(1012, value.ext_opt_float)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(1013, value.ext_opt_double)
        size += ProtoAdapter.STRING.encodedSizeWithTag(1014, value.ext_opt_string)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(1015, value.ext_opt_bytes)
        size += NestedEnum.ADAPTER.encodedSizeWithTag(1016, value.ext_opt_nested_enum)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(1017, value.ext_opt_nested_message)
        size += ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(1101, value.ext_rep_int32)
        size += ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(1102, value.ext_rep_uint32)
        size += ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(1103, value.ext_rep_sint32)
        size += ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(1104, value.ext_rep_fixed32)
        size += ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(1105, value.ext_rep_sfixed32)
        size += ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(1106, value.ext_rep_int64)
        size += ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(1107, value.ext_rep_uint64)
        size += ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(1108, value.ext_rep_sint64)
        size += ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(1109, value.ext_rep_fixed64)
        size += ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(1110, value.ext_rep_sfixed64)
        size += ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(1111, value.ext_rep_bool)
        size += ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(1112, value.ext_rep_float)
        size += ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(1113, value.ext_rep_double)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1114, value.ext_rep_string)
        size += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(1115, value.ext_rep_bytes)
        size += NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(1116, value.ext_rep_nested_enum)
        size += NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(1117,
            value.ext_rep_nested_message)
        size += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(1201, value.ext_pack_int32)
        size += ProtoAdapter.UINT32.asPacked().encodedSizeWithTag(1202, value.ext_pack_uint32)
        size += ProtoAdapter.SINT32.asPacked().encodedSizeWithTag(1203, value.ext_pack_sint32)
        size += ProtoAdapter.FIXED32.asPacked().encodedSizeWithTag(1204, value.ext_pack_fixed32)
        size += ProtoAdapter.SFIXED32.asPacked().encodedSizeWithTag(1205, value.ext_pack_sfixed32)
        size += ProtoAdapter.INT64.asPacked().encodedSizeWithTag(1206, value.ext_pack_int64)
        size += ProtoAdapter.UINT64.asPacked().encodedSizeWithTag(1207, value.ext_pack_uint64)
        size += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(1208, value.ext_pack_sint64)
        size += ProtoAdapter.FIXED64.asPacked().encodedSizeWithTag(1209, value.ext_pack_fixed64)
        size += ProtoAdapter.SFIXED64.asPacked().encodedSizeWithTag(1210, value.ext_pack_sfixed64)
        size += ProtoAdapter.BOOL.asPacked().encodedSizeWithTag(1211, value.ext_pack_bool)
        size += ProtoAdapter.FLOAT.asPacked().encodedSizeWithTag(1212, value.ext_pack_float)
        size += ProtoAdapter.DOUBLE.asPacked().encodedSizeWithTag(1213, value.ext_pack_double)
        size += NestedEnum.ADAPTER.asPacked().encodedSizeWithTag(1216, value.ext_pack_nested_enum)
        size += ProtoAdapter.STRING.encodedSizeWithTag(601, value.oneof_string)
        size += ProtoAdapter.INT32.encodedSizeWithTag(602, value.oneof_int32)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(603, value.oneof_nested_message)
        return size
      }

      override fun encode(writer: ProtoWriter, value: AllTypes) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.opt_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.opt_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 3, value.opt_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 4, value.opt_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 5, value.opt_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 6, value.opt_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.opt_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 8, value.opt_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 9, value.opt_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 10, value.opt_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.opt_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 12, value.opt_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 13, value.opt_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 14, value.opt_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 15, value.opt_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 16, value.opt_nested_enum)
        NestedMessage.ADAPTER.encodeWithTag(writer, 17, value.opt_nested_message)
        ProtoAdapter.INT32.encodeWithTag(writer, 101, value.req_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 102, value.req_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 103, value.req_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 104, value.req_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 105, value.req_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 106, value.req_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 107, value.req_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 108, value.req_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 109, value.req_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 110, value.req_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 111, value.req_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 112, value.req_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 113, value.req_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 114, value.req_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 115, value.req_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 116, value.req_nested_enum)
        NestedMessage.ADAPTER.encodeWithTag(writer, 117, value.req_nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.rep_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.rep_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.rep_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.rep_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.rep_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.rep_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.rep_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.rep_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.rep_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.rep_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.rep_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.rep_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.rep_double)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.rep_string)
        ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.rep_bytes)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.rep_nested_enum)
        NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 217, value.rep_nested_message)
        ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 301, value.pack_int32)
        ProtoAdapter.UINT32.asPacked().encodeWithTag(writer, 302, value.pack_uint32)
        ProtoAdapter.SINT32.asPacked().encodeWithTag(writer, 303, value.pack_sint32)
        ProtoAdapter.FIXED32.asPacked().encodeWithTag(writer, 304, value.pack_fixed32)
        ProtoAdapter.SFIXED32.asPacked().encodeWithTag(writer, 305, value.pack_sfixed32)
        ProtoAdapter.INT64.asPacked().encodeWithTag(writer, 306, value.pack_int64)
        ProtoAdapter.UINT64.asPacked().encodeWithTag(writer, 307, value.pack_uint64)
        ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 308, value.pack_sint64)
        ProtoAdapter.FIXED64.asPacked().encodeWithTag(writer, 309, value.pack_fixed64)
        ProtoAdapter.SFIXED64.asPacked().encodeWithTag(writer, 310, value.pack_sfixed64)
        ProtoAdapter.BOOL.asPacked().encodeWithTag(writer, 311, value.pack_bool)
        ProtoAdapter.FLOAT.asPacked().encodeWithTag(writer, 312, value.pack_float)
        ProtoAdapter.DOUBLE.asPacked().encodeWithTag(writer, 313, value.pack_double)
        NestedEnum.ADAPTER.asPacked().encodeWithTag(writer, 316, value.pack_nested_enum)
        ProtoAdapter.INT32.encodeWithTag(writer, 401, value.default_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 402, value.default_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 403, value.default_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 404, value.default_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 405, value.default_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 406, value.default_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 407, value.default_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 408, value.default_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 409, value.default_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 410, value.default_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 411, value.default_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 412, value.default_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 413, value.default_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 414, value.default_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 415, value.default_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 416, value.default_nested_enum)
        map_int32_int32Adapter.encodeWithTag(writer, 501, value.map_int32_int32)
        map_string_stringAdapter.encodeWithTag(writer, 502, value.map_string_string)
        map_string_messageAdapter.encodeWithTag(writer, 503, value.map_string_message)
        map_string_enumAdapter.encodeWithTag(writer, 504, value.map_string_enum)
        ProtoAdapter.INT32.encodeWithTag(writer, 1001, value.ext_opt_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 1002, value.ext_opt_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 1003, value.ext_opt_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 1004, value.ext_opt_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 1005, value.ext_opt_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 1006, value.ext_opt_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 1007, value.ext_opt_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 1008, value.ext_opt_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 1009, value.ext_opt_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 1010, value.ext_opt_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 1011, value.ext_opt_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 1012, value.ext_opt_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 1013, value.ext_opt_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 1014, value.ext_opt_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 1015, value.ext_opt_bytes)
        NestedEnum.ADAPTER.encodeWithTag(writer, 1016, value.ext_opt_nested_enum)
        NestedMessage.ADAPTER.encodeWithTag(writer, 1017, value.ext_opt_nested_message)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 1101, value.ext_rep_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 1102, value.ext_rep_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 1103, value.ext_rep_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 1104, value.ext_rep_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 1105, value.ext_rep_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 1106, value.ext_rep_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 1107, value.ext_rep_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 1108, value.ext_rep_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 1109, value.ext_rep_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 1110, value.ext_rep_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 1111, value.ext_rep_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 1112, value.ext_rep_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 1113, value.ext_rep_double)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1114, value.ext_rep_string)
        ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 1115, value.ext_rep_bytes)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 1116, value.ext_rep_nested_enum)
        NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 1117, value.ext_rep_nested_message)
        ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 1201, value.ext_pack_int32)
        ProtoAdapter.UINT32.asPacked().encodeWithTag(writer, 1202, value.ext_pack_uint32)
        ProtoAdapter.SINT32.asPacked().encodeWithTag(writer, 1203, value.ext_pack_sint32)
        ProtoAdapter.FIXED32.asPacked().encodeWithTag(writer, 1204, value.ext_pack_fixed32)
        ProtoAdapter.SFIXED32.asPacked().encodeWithTag(writer, 1205, value.ext_pack_sfixed32)
        ProtoAdapter.INT64.asPacked().encodeWithTag(writer, 1206, value.ext_pack_int64)
        ProtoAdapter.UINT64.asPacked().encodeWithTag(writer, 1207, value.ext_pack_uint64)
        ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 1208, value.ext_pack_sint64)
        ProtoAdapter.FIXED64.asPacked().encodeWithTag(writer, 1209, value.ext_pack_fixed64)
        ProtoAdapter.SFIXED64.asPacked().encodeWithTag(writer, 1210, value.ext_pack_sfixed64)
        ProtoAdapter.BOOL.asPacked().encodeWithTag(writer, 1211, value.ext_pack_bool)
        ProtoAdapter.FLOAT.asPacked().encodeWithTag(writer, 1212, value.ext_pack_float)
        ProtoAdapter.DOUBLE.asPacked().encodeWithTag(writer, 1213, value.ext_pack_double)
        NestedEnum.ADAPTER.asPacked().encodeWithTag(writer, 1216, value.ext_pack_nested_enum)
        ProtoAdapter.STRING.encodeWithTag(writer, 601, value.oneof_string)
        ProtoAdapter.INT32.encodeWithTag(writer, 602, value.oneof_int32)
        NestedMessage.ADAPTER.encodeWithTag(writer, 603, value.oneof_nested_message)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): AllTypes {
        var opt_int32: Int? = null
        var opt_uint32: Int? = null
        var opt_sint32: Int? = null
        var opt_fixed32: Int? = null
        var opt_sfixed32: Int? = null
        var opt_int64: Long? = null
        var opt_uint64: Long? = null
        var opt_sint64: Long? = null
        var opt_fixed64: Long? = null
        var opt_sfixed64: Long? = null
        var opt_bool: Boolean? = null
        var opt_float: Float? = null
        var opt_double: Double? = null
        var opt_string: String? = null
        var opt_bytes: ByteString? = null
        var opt_nested_enum: NestedEnum? = null
        var opt_nested_message: NestedMessage? = null
        var req_int32: Int? = null
        var req_uint32: Int? = null
        var req_sint32: Int? = null
        var req_fixed32: Int? = null
        var req_sfixed32: Int? = null
        var req_int64: Long? = null
        var req_uint64: Long? = null
        var req_sint64: Long? = null
        var req_fixed64: Long? = null
        var req_sfixed64: Long? = null
        var req_bool: Boolean? = null
        var req_float: Float? = null
        var req_double: Double? = null
        var req_string: String? = null
        var req_bytes: ByteString? = null
        var req_nested_enum: NestedEnum? = null
        var req_nested_message: NestedMessage? = null
        val rep_int32 = mutableListOf<Int>()
        val rep_uint32 = mutableListOf<Int>()
        val rep_sint32 = mutableListOf<Int>()
        val rep_fixed32 = mutableListOf<Int>()
        val rep_sfixed32 = mutableListOf<Int>()
        val rep_int64 = mutableListOf<Long>()
        val rep_uint64 = mutableListOf<Long>()
        val rep_sint64 = mutableListOf<Long>()
        val rep_fixed64 = mutableListOf<Long>()
        val rep_sfixed64 = mutableListOf<Long>()
        val rep_bool = mutableListOf<Boolean>()
        val rep_float = mutableListOf<Float>()
        val rep_double = mutableListOf<Double>()
        val rep_string = mutableListOf<String>()
        val rep_bytes = mutableListOf<ByteString>()
        val rep_nested_enum = mutableListOf<NestedEnum>()
        val rep_nested_message = mutableListOf<NestedMessage>()
        val pack_int32 = mutableListOf<Int>()
        val pack_uint32 = mutableListOf<Int>()
        val pack_sint32 = mutableListOf<Int>()
        val pack_fixed32 = mutableListOf<Int>()
        val pack_sfixed32 = mutableListOf<Int>()
        val pack_int64 = mutableListOf<Long>()
        val pack_uint64 = mutableListOf<Long>()
        val pack_sint64 = mutableListOf<Long>()
        val pack_fixed64 = mutableListOf<Long>()
        val pack_sfixed64 = mutableListOf<Long>()
        val pack_bool = mutableListOf<Boolean>()
        val pack_float = mutableListOf<Float>()
        val pack_double = mutableListOf<Double>()
        val pack_nested_enum = mutableListOf<NestedEnum>()
        var default_int32: Int? = null
        var default_uint32: Int? = null
        var default_sint32: Int? = null
        var default_fixed32: Int? = null
        var default_sfixed32: Int? = null
        var default_int64: Long? = null
        var default_uint64: Long? = null
        var default_sint64: Long? = null
        var default_fixed64: Long? = null
        var default_sfixed64: Long? = null
        var default_bool: Boolean? = null
        var default_float: Float? = null
        var default_double: Double? = null
        var default_string: String? = null
        var default_bytes: ByteString? = null
        var default_nested_enum: NestedEnum? = null
        val map_int32_int32 = mutableMapOf<Int, Int>()
        val map_string_string = mutableMapOf<String, String>()
        val map_string_message = mutableMapOf<String, NestedMessage>()
        val map_string_enum = mutableMapOf<String, NestedEnum>()
        var ext_opt_int32: Int? = null
        var ext_opt_uint32: Int? = null
        var ext_opt_sint32: Int? = null
        var ext_opt_fixed32: Int? = null
        var ext_opt_sfixed32: Int? = null
        var ext_opt_int64: Long? = null
        var ext_opt_uint64: Long? = null
        var ext_opt_sint64: Long? = null
        var ext_opt_fixed64: Long? = null
        var ext_opt_sfixed64: Long? = null
        var ext_opt_bool: Boolean? = null
        var ext_opt_float: Float? = null
        var ext_opt_double: Double? = null
        var ext_opt_string: String? = null
        var ext_opt_bytes: ByteString? = null
        var ext_opt_nested_enum: NestedEnum? = null
        var ext_opt_nested_message: NestedMessage? = null
        val ext_rep_int32 = mutableListOf<Int>()
        val ext_rep_uint32 = mutableListOf<Int>()
        val ext_rep_sint32 = mutableListOf<Int>()
        val ext_rep_fixed32 = mutableListOf<Int>()
        val ext_rep_sfixed32 = mutableListOf<Int>()
        val ext_rep_int64 = mutableListOf<Long>()
        val ext_rep_uint64 = mutableListOf<Long>()
        val ext_rep_sint64 = mutableListOf<Long>()
        val ext_rep_fixed64 = mutableListOf<Long>()
        val ext_rep_sfixed64 = mutableListOf<Long>()
        val ext_rep_bool = mutableListOf<Boolean>()
        val ext_rep_float = mutableListOf<Float>()
        val ext_rep_double = mutableListOf<Double>()
        val ext_rep_string = mutableListOf<String>()
        val ext_rep_bytes = mutableListOf<ByteString>()
        val ext_rep_nested_enum = mutableListOf<NestedEnum>()
        val ext_rep_nested_message = mutableListOf<NestedMessage>()
        val ext_pack_int32 = mutableListOf<Int>()
        val ext_pack_uint32 = mutableListOf<Int>()
        val ext_pack_sint32 = mutableListOf<Int>()
        val ext_pack_fixed32 = mutableListOf<Int>()
        val ext_pack_sfixed32 = mutableListOf<Int>()
        val ext_pack_int64 = mutableListOf<Long>()
        val ext_pack_uint64 = mutableListOf<Long>()
        val ext_pack_sint64 = mutableListOf<Long>()
        val ext_pack_fixed64 = mutableListOf<Long>()
        val ext_pack_sfixed64 = mutableListOf<Long>()
        val ext_pack_bool = mutableListOf<Boolean>()
        val ext_pack_float = mutableListOf<Float>()
        val ext_pack_double = mutableListOf<Double>()
        val ext_pack_nested_enum = mutableListOf<NestedEnum>()
        var oneof_string: String? = null
        var oneof_int32: Int? = null
        var oneof_nested_message: NestedMessage? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> opt_int32 = ProtoAdapter.INT32.decode(reader)
            2 -> opt_uint32 = ProtoAdapter.UINT32.decode(reader)
            3 -> opt_sint32 = ProtoAdapter.SINT32.decode(reader)
            4 -> opt_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            5 -> opt_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            6 -> opt_int64 = ProtoAdapter.INT64.decode(reader)
            7 -> opt_uint64 = ProtoAdapter.UINT64.decode(reader)
            8 -> opt_sint64 = ProtoAdapter.SINT64.decode(reader)
            9 -> opt_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            10 -> opt_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            11 -> opt_bool = ProtoAdapter.BOOL.decode(reader)
            12 -> opt_float = ProtoAdapter.FLOAT.decode(reader)
            13 -> opt_double = ProtoAdapter.DOUBLE.decode(reader)
            14 -> opt_string = ProtoAdapter.STRING.decode(reader)
            15 -> opt_bytes = ProtoAdapter.BYTES.decode(reader)
            16 -> try {
              opt_nested_enum = NestedEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            17 -> opt_nested_message = NestedMessage.ADAPTER.decode(reader)
            101 -> req_int32 = ProtoAdapter.INT32.decode(reader)
            102 -> req_uint32 = ProtoAdapter.UINT32.decode(reader)
            103 -> req_sint32 = ProtoAdapter.SINT32.decode(reader)
            104 -> req_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            105 -> req_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            106 -> req_int64 = ProtoAdapter.INT64.decode(reader)
            107 -> req_uint64 = ProtoAdapter.UINT64.decode(reader)
            108 -> req_sint64 = ProtoAdapter.SINT64.decode(reader)
            109 -> req_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            110 -> req_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            111 -> req_bool = ProtoAdapter.BOOL.decode(reader)
            112 -> req_float = ProtoAdapter.FLOAT.decode(reader)
            113 -> req_double = ProtoAdapter.DOUBLE.decode(reader)
            114 -> req_string = ProtoAdapter.STRING.decode(reader)
            115 -> req_bytes = ProtoAdapter.BYTES.decode(reader)
            116 -> try {
              req_nested_enum = NestedEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            117 -> req_nested_message = NestedMessage.ADAPTER.decode(reader)
            201 -> rep_int32.add(ProtoAdapter.INT32.decode(reader))
            202 -> rep_uint32.add(ProtoAdapter.UINT32.decode(reader))
            203 -> rep_sint32.add(ProtoAdapter.SINT32.decode(reader))
            204 -> rep_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            205 -> rep_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            206 -> rep_int64.add(ProtoAdapter.INT64.decode(reader))
            207 -> rep_uint64.add(ProtoAdapter.UINT64.decode(reader))
            208 -> rep_sint64.add(ProtoAdapter.SINT64.decode(reader))
            209 -> rep_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            210 -> rep_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            211 -> rep_bool.add(ProtoAdapter.BOOL.decode(reader))
            212 -> rep_float.add(ProtoAdapter.FLOAT.decode(reader))
            213 -> rep_double.add(ProtoAdapter.DOUBLE.decode(reader))
            214 -> rep_string.add(ProtoAdapter.STRING.decode(reader))
            215 -> rep_bytes.add(ProtoAdapter.BYTES.decode(reader))
            216 -> try {
              rep_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            217 -> rep_nested_message.add(NestedMessage.ADAPTER.decode(reader))
            301 -> pack_int32.add(ProtoAdapter.INT32.decode(reader))
            302 -> pack_uint32.add(ProtoAdapter.UINT32.decode(reader))
            303 -> pack_sint32.add(ProtoAdapter.SINT32.decode(reader))
            304 -> pack_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            305 -> pack_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            306 -> pack_int64.add(ProtoAdapter.INT64.decode(reader))
            307 -> pack_uint64.add(ProtoAdapter.UINT64.decode(reader))
            308 -> pack_sint64.add(ProtoAdapter.SINT64.decode(reader))
            309 -> pack_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            310 -> pack_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            311 -> pack_bool.add(ProtoAdapter.BOOL.decode(reader))
            312 -> pack_float.add(ProtoAdapter.FLOAT.decode(reader))
            313 -> pack_double.add(ProtoAdapter.DOUBLE.decode(reader))
            316 -> try {
              pack_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            401 -> default_int32 = ProtoAdapter.INT32.decode(reader)
            402 -> default_uint32 = ProtoAdapter.UINT32.decode(reader)
            403 -> default_sint32 = ProtoAdapter.SINT32.decode(reader)
            404 -> default_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            405 -> default_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            406 -> default_int64 = ProtoAdapter.INT64.decode(reader)
            407 -> default_uint64 = ProtoAdapter.UINT64.decode(reader)
            408 -> default_sint64 = ProtoAdapter.SINT64.decode(reader)
            409 -> default_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            410 -> default_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            411 -> default_bool = ProtoAdapter.BOOL.decode(reader)
            412 -> default_float = ProtoAdapter.FLOAT.decode(reader)
            413 -> default_double = ProtoAdapter.DOUBLE.decode(reader)
            414 -> default_string = ProtoAdapter.STRING.decode(reader)
            415 -> default_bytes = ProtoAdapter.BYTES.decode(reader)
            416 -> try {
              default_nested_enum = NestedEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            501 -> map_int32_int32.putAll(map_int32_int32Adapter.decode(reader))
            502 -> map_string_string.putAll(map_string_stringAdapter.decode(reader))
            503 -> map_string_message.putAll(map_string_messageAdapter.decode(reader))
            504 -> map_string_enum.putAll(map_string_enumAdapter.decode(reader))
            1001 -> ext_opt_int32 = ProtoAdapter.INT32.decode(reader)
            1002 -> ext_opt_uint32 = ProtoAdapter.UINT32.decode(reader)
            1003 -> ext_opt_sint32 = ProtoAdapter.SINT32.decode(reader)
            1004 -> ext_opt_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            1005 -> ext_opt_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            1006 -> ext_opt_int64 = ProtoAdapter.INT64.decode(reader)
            1007 -> ext_opt_uint64 = ProtoAdapter.UINT64.decode(reader)
            1008 -> ext_opt_sint64 = ProtoAdapter.SINT64.decode(reader)
            1009 -> ext_opt_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            1010 -> ext_opt_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            1011 -> ext_opt_bool = ProtoAdapter.BOOL.decode(reader)
            1012 -> ext_opt_float = ProtoAdapter.FLOAT.decode(reader)
            1013 -> ext_opt_double = ProtoAdapter.DOUBLE.decode(reader)
            1014 -> ext_opt_string = ProtoAdapter.STRING.decode(reader)
            1015 -> ext_opt_bytes = ProtoAdapter.BYTES.decode(reader)
            1016 -> try {
              ext_opt_nested_enum = NestedEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            1017 -> ext_opt_nested_message = NestedMessage.ADAPTER.decode(reader)
            1101 -> ext_rep_int32.add(ProtoAdapter.INT32.decode(reader))
            1102 -> ext_rep_uint32.add(ProtoAdapter.UINT32.decode(reader))
            1103 -> ext_rep_sint32.add(ProtoAdapter.SINT32.decode(reader))
            1104 -> ext_rep_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            1105 -> ext_rep_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            1106 -> ext_rep_int64.add(ProtoAdapter.INT64.decode(reader))
            1107 -> ext_rep_uint64.add(ProtoAdapter.UINT64.decode(reader))
            1108 -> ext_rep_sint64.add(ProtoAdapter.SINT64.decode(reader))
            1109 -> ext_rep_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            1110 -> ext_rep_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            1111 -> ext_rep_bool.add(ProtoAdapter.BOOL.decode(reader))
            1112 -> ext_rep_float.add(ProtoAdapter.FLOAT.decode(reader))
            1113 -> ext_rep_double.add(ProtoAdapter.DOUBLE.decode(reader))
            1114 -> ext_rep_string.add(ProtoAdapter.STRING.decode(reader))
            1115 -> ext_rep_bytes.add(ProtoAdapter.BYTES.decode(reader))
            1116 -> try {
              ext_rep_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            1117 -> ext_rep_nested_message.add(NestedMessage.ADAPTER.decode(reader))
            1201 -> ext_pack_int32.add(ProtoAdapter.INT32.decode(reader))
            1202 -> ext_pack_uint32.add(ProtoAdapter.UINT32.decode(reader))
            1203 -> ext_pack_sint32.add(ProtoAdapter.SINT32.decode(reader))
            1204 -> ext_pack_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            1205 -> ext_pack_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            1206 -> ext_pack_int64.add(ProtoAdapter.INT64.decode(reader))
            1207 -> ext_pack_uint64.add(ProtoAdapter.UINT64.decode(reader))
            1208 -> ext_pack_sint64.add(ProtoAdapter.SINT64.decode(reader))
            1209 -> ext_pack_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            1210 -> ext_pack_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            1211 -> ext_pack_bool.add(ProtoAdapter.BOOL.decode(reader))
            1212 -> ext_pack_float.add(ProtoAdapter.FLOAT.decode(reader))
            1213 -> ext_pack_double.add(ProtoAdapter.DOUBLE.decode(reader))
            1216 -> try {
              ext_pack_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            601 -> oneof_string = ProtoAdapter.STRING.decode(reader)
            602 -> oneof_int32 = ProtoAdapter.INT32.decode(reader)
            603 -> oneof_nested_message = NestedMessage.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AllTypes(
          opt_int32 = opt_int32,
          opt_uint32 = opt_uint32,
          opt_sint32 = opt_sint32,
          opt_fixed32 = opt_fixed32,
          opt_sfixed32 = opt_sfixed32,
          opt_int64 = opt_int64,
          opt_uint64 = opt_uint64,
          opt_sint64 = opt_sint64,
          opt_fixed64 = opt_fixed64,
          opt_sfixed64 = opt_sfixed64,
          opt_bool = opt_bool,
          opt_float = opt_float,
          opt_double = opt_double,
          opt_string = opt_string,
          opt_bytes = opt_bytes,
          opt_nested_enum = opt_nested_enum,
          opt_nested_message = opt_nested_message,
          req_int32 = req_int32 ?: throw missingRequiredFields(req_int32, "req_int32"),
          req_uint32 = req_uint32 ?: throw missingRequiredFields(req_uint32, "req_uint32"),
          req_sint32 = req_sint32 ?: throw missingRequiredFields(req_sint32, "req_sint32"),
          req_fixed32 = req_fixed32 ?: throw missingRequiredFields(req_fixed32, "req_fixed32"),
          req_sfixed32 = req_sfixed32 ?: throw missingRequiredFields(req_sfixed32, "req_sfixed32"),
          req_int64 = req_int64 ?: throw missingRequiredFields(req_int64, "req_int64"),
          req_uint64 = req_uint64 ?: throw missingRequiredFields(req_uint64, "req_uint64"),
          req_sint64 = req_sint64 ?: throw missingRequiredFields(req_sint64, "req_sint64"),
          req_fixed64 = req_fixed64 ?: throw missingRequiredFields(req_fixed64, "req_fixed64"),
          req_sfixed64 = req_sfixed64 ?: throw missingRequiredFields(req_sfixed64, "req_sfixed64"),
          req_bool = req_bool ?: throw missingRequiredFields(req_bool, "req_bool"),
          req_float = req_float ?: throw missingRequiredFields(req_float, "req_float"),
          req_double = req_double ?: throw missingRequiredFields(req_double, "req_double"),
          req_string = req_string ?: throw missingRequiredFields(req_string, "req_string"),
          req_bytes = req_bytes ?: throw missingRequiredFields(req_bytes, "req_bytes"),
          req_nested_enum = req_nested_enum ?: throw missingRequiredFields(req_nested_enum,
              "req_nested_enum"),
          req_nested_message = req_nested_message ?: throw missingRequiredFields(req_nested_message,
              "req_nested_message"),
          rep_int32 = rep_int32,
          rep_uint32 = rep_uint32,
          rep_sint32 = rep_sint32,
          rep_fixed32 = rep_fixed32,
          rep_sfixed32 = rep_sfixed32,
          rep_int64 = rep_int64,
          rep_uint64 = rep_uint64,
          rep_sint64 = rep_sint64,
          rep_fixed64 = rep_fixed64,
          rep_sfixed64 = rep_sfixed64,
          rep_bool = rep_bool,
          rep_float = rep_float,
          rep_double = rep_double,
          rep_string = rep_string,
          rep_bytes = rep_bytes,
          rep_nested_enum = rep_nested_enum,
          rep_nested_message = rep_nested_message,
          pack_int32 = pack_int32,
          pack_uint32 = pack_uint32,
          pack_sint32 = pack_sint32,
          pack_fixed32 = pack_fixed32,
          pack_sfixed32 = pack_sfixed32,
          pack_int64 = pack_int64,
          pack_uint64 = pack_uint64,
          pack_sint64 = pack_sint64,
          pack_fixed64 = pack_fixed64,
          pack_sfixed64 = pack_sfixed64,
          pack_bool = pack_bool,
          pack_float = pack_float,
          pack_double = pack_double,
          pack_nested_enum = pack_nested_enum,
          default_int32 = default_int32,
          default_uint32 = default_uint32,
          default_sint32 = default_sint32,
          default_fixed32 = default_fixed32,
          default_sfixed32 = default_sfixed32,
          default_int64 = default_int64,
          default_uint64 = default_uint64,
          default_sint64 = default_sint64,
          default_fixed64 = default_fixed64,
          default_sfixed64 = default_sfixed64,
          default_bool = default_bool,
          default_float = default_float,
          default_double = default_double,
          default_string = default_string,
          default_bytes = default_bytes,
          default_nested_enum = default_nested_enum,
          map_int32_int32 = map_int32_int32,
          map_string_string = map_string_string,
          map_string_message = map_string_message,
          map_string_enum = map_string_enum,
          ext_opt_int32 = ext_opt_int32,
          ext_opt_uint32 = ext_opt_uint32,
          ext_opt_sint32 = ext_opt_sint32,
          ext_opt_fixed32 = ext_opt_fixed32,
          ext_opt_sfixed32 = ext_opt_sfixed32,
          ext_opt_int64 = ext_opt_int64,
          ext_opt_uint64 = ext_opt_uint64,
          ext_opt_sint64 = ext_opt_sint64,
          ext_opt_fixed64 = ext_opt_fixed64,
          ext_opt_sfixed64 = ext_opt_sfixed64,
          ext_opt_bool = ext_opt_bool,
          ext_opt_float = ext_opt_float,
          ext_opt_double = ext_opt_double,
          ext_opt_string = ext_opt_string,
          ext_opt_bytes = ext_opt_bytes,
          ext_opt_nested_enum = ext_opt_nested_enum,
          ext_opt_nested_message = ext_opt_nested_message,
          ext_rep_int32 = ext_rep_int32,
          ext_rep_uint32 = ext_rep_uint32,
          ext_rep_sint32 = ext_rep_sint32,
          ext_rep_fixed32 = ext_rep_fixed32,
          ext_rep_sfixed32 = ext_rep_sfixed32,
          ext_rep_int64 = ext_rep_int64,
          ext_rep_uint64 = ext_rep_uint64,
          ext_rep_sint64 = ext_rep_sint64,
          ext_rep_fixed64 = ext_rep_fixed64,
          ext_rep_sfixed64 = ext_rep_sfixed64,
          ext_rep_bool = ext_rep_bool,
          ext_rep_float = ext_rep_float,
          ext_rep_double = ext_rep_double,
          ext_rep_string = ext_rep_string,
          ext_rep_bytes = ext_rep_bytes,
          ext_rep_nested_enum = ext_rep_nested_enum,
          ext_rep_nested_message = ext_rep_nested_message,
          ext_pack_int32 = ext_pack_int32,
          ext_pack_uint32 = ext_pack_uint32,
          ext_pack_sint32 = ext_pack_sint32,
          ext_pack_fixed32 = ext_pack_fixed32,
          ext_pack_sfixed32 = ext_pack_sfixed32,
          ext_pack_int64 = ext_pack_int64,
          ext_pack_uint64 = ext_pack_uint64,
          ext_pack_sint64 = ext_pack_sint64,
          ext_pack_fixed64 = ext_pack_fixed64,
          ext_pack_sfixed64 = ext_pack_sfixed64,
          ext_pack_bool = ext_pack_bool,
          ext_pack_float = ext_pack_float,
          ext_pack_double = ext_pack_double,
          ext_pack_nested_enum = ext_pack_nested_enum,
          oneof_string = oneof_string,
          oneof_int32 = oneof_int32,
          oneof_nested_message = oneof_nested_message,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: AllTypes): AllTypes = value.copy(
        opt_nested_message = value.opt_nested_message?.let(NestedMessage.ADAPTER::redact),
        req_nested_message = NestedMessage.ADAPTER.redact(value.req_nested_message),
        rep_nested_message = value.rep_nested_message.redactElements(NestedMessage.ADAPTER),
        map_string_message = value.map_string_message.redactElements(NestedMessage.ADAPTER),
        ext_opt_nested_message = value.ext_opt_nested_message?.let(NestedMessage.ADAPTER::redact),
        ext_rep_nested_message = value.ext_rep_nested_message.redactElements(NestedMessage.ADAPTER),
        oneof_nested_message = value.oneof_nested_message?.let(NestedMessage.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  enum class NestedEnum(
    override val value: Int
  ) : WireEnum {
    UNKNOWN(0),

    A(1);

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NestedEnum> = object : EnumAdapter<NestedEnum>(
        NestedEnum::class, 
        PROTO_2, 
        NestedEnum.UNKNOWN
      ) {
        override fun fromValue(value: Int): NestedEnum? = NestedEnum.fromValue(value)
      }

      @JvmStatic
      fun fromValue(value: Int): NestedEnum? = when (value) {
        0 -> UNKNOWN
        1 -> A
        else -> null
      }
    }
  }

  class NestedMessage(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    @JvmField
    val a: Int? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<NestedMessage, NestedMessage.Builder>(ADAPTER, unknownFields) {
    override fun newBuilder(): Builder {
      val builder = Builder()
      builder.a = a
      builder.addUnknownFields(unknownFields)
      return builder
    }

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is NestedMessage) return false
      if (unknownFields != other.unknownFields) return false
      if (a != other.a) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + a.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (a != null) result += """a=$a"""
      return result.joinToString(prefix = "NestedMessage{", separator = ", ", postfix = "}")
    }

    fun copy(a: Int? = this.a, unknownFields: ByteString = this.unknownFields): NestedMessage =
        NestedMessage(a, unknownFields)

    class Builder : Message.Builder<NestedMessage, Builder>() {
      @JvmField
      var a: Int? = null

      fun a(a: Int?): Builder {
        this.a = a
        return this
      }

      override fun build(): NestedMessage = NestedMessage(
        a = a,
        unknownFields = buildUnknownFields()
      )
    }

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NestedMessage> = object : ProtoAdapter<NestedMessage>(
        FieldEncoding.LENGTH_DELIMITED, 
        NestedMessage::class, 
        "type.googleapis.com/squareup.proto2.AllTypes.NestedMessage", 
        PROTO_2, 
        null
      ) {
        override fun encodedSize(value: NestedMessage): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.a)
          return size
        }

        override fun encode(writer: ProtoWriter, value: NestedMessage) {
          ProtoAdapter.INT32.encodeWithTag(writer, 1, value.a)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): NestedMessage {
          var a: Int? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> a = ProtoAdapter.INT32.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return NestedMessage(
            a = a,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: NestedMessage): NestedMessage = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
