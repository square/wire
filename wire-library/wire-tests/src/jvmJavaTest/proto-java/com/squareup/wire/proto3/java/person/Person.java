// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos3.java.person.Person in person.proto
package com.squareup.wire.proto3.java.person;

import com.squareup.wire.EnumAdapter;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Objects;
import okio.ByteString;

/**
 * Message representing a person, includes their name, unique ID number, email and phone number.
 */
public final class Person extends Message<Person, Person.Builder> {
  public static final ProtoAdapter<Person> ADAPTER = new ProtoAdapter_Person();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_ID = 0;

  public static final String DEFAULT_EMAIL = "";

  public static final Integer DEFAULT_FOO = 0;

  public static final String DEFAULT_BAR = "";

  /**
   * The customer's full name.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String name;

  /**
   * The customer's ID number.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final Integer id;

  /**
   * Email address for the customer.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String email;

  /**
   * A list of the customer's phone numbers.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.proto3.java.person.Person$PhoneNumber#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PhoneNumber> phones;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> aliases;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer foo;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bar;

  public Person(String name, Integer id, String email, List<PhoneNumber> phones,
      List<String> aliases, Integer foo, String bar) {
    this(name, id, email, phones, aliases, foo, bar, ByteString.EMPTY);
  }

  public Person(String name, Integer id, String email, List<PhoneNumber> phones,
      List<String> aliases, Integer foo, String bar, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (Internal.countNonNull(foo, bar) > 1) {
      throw new IllegalArgumentException("at most one of foo, bar may be non-null");
    }
    this.name = name;
    this.id = id;
    this.email = email;
    this.phones = Internal.immutableCopyOf("phones", phones);
    this.aliases = Internal.immutableCopyOf("aliases", aliases);
    this.foo = foo;
    this.bar = bar;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.id = id;
    builder.email = email;
    builder.phones = Internal.copyOf(phones);
    builder.aliases = Internal.copyOf(aliases);
    builder.foo = foo;
    builder.bar = bar;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Person)) return false;
    Person o = (Person) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(id, o.id)
        && Internal.equals(email, o.email)
        && phones.equals(o.phones)
        && aliases.equals(o.aliases)
        && Internal.equals(foo, o.foo)
        && Internal.equals(bar, o.bar);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (email != null ? email.hashCode() : 0);
      result = result * 37 + phones.hashCode();
      result = result * 37 + aliases.hashCode();
      result = result * 37 + (foo != null ? foo.hashCode() : 0);
      result = result * 37 + (bar != null ? bar.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(Internal.sanitize(name));
    if (id != null) builder.append(", id=").append(id);
    if (email != null) builder.append(", email=").append(Internal.sanitize(email));
    if (!phones.isEmpty()) builder.append(", phones=").append(phones);
    if (!aliases.isEmpty()) builder.append(", aliases=").append(Internal.sanitize(aliases));
    if (foo != null) builder.append(", foo=").append(foo);
    if (bar != null) builder.append(", bar=").append(Internal.sanitize(bar));
    return builder.replace(0, 2, "Person{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Person, Builder> {
    public String name;

    public Integer id;

    public String email;

    public List<PhoneNumber> phones;

    public List<String> aliases;

    public Integer foo;

    public String bar;

    public Builder() {
      phones = Internal.newMutableList();
      aliases = Internal.newMutableList();
    }

    /**
     * The customer's full name.
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * The customer's ID number.
     */
    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    /**
     * Email address for the customer.
     */
    public Builder email(String email) {
      this.email = email;
      return this;
    }

    /**
     * A list of the customer's phone numbers.
     */
    public Builder phones(List<PhoneNumber> phones) {
      Internal.checkElementsNotNull(phones);
      this.phones = phones;
      return this;
    }

    public Builder aliases(List<String> aliases) {
      Internal.checkElementsNotNull(aliases);
      this.aliases = aliases;
      return this;
    }

    public Builder foo(Integer foo) {
      this.foo = foo;
      this.bar = null;
      return this;
    }

    public Builder bar(String bar) {
      this.bar = bar;
      this.foo = null;
      return this;
    }

    @Override
    public Person build() {
      return new Person(name, id, email, phones, aliases, foo, bar, super.buildUnknownFields());
    }
  }

  /**
   * Represents the type of the phone number: mobile, home or work.
   */
  public enum PhoneType implements WireEnum {
    MOBILE(0),

    HOME(1),

    /**
     * Could be phone or fax.
     */
    WORK(2);

    public static final ProtoAdapter<PhoneType> ADAPTER = new ProtoAdapter_PhoneType();

    private final int value;

    PhoneType(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static PhoneType fromValue(int value) {
      switch (value) {
        case 0: return MOBILE;
        case 1: return HOME;
        case 2: return WORK;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }

    private static final class ProtoAdapter_PhoneType extends EnumAdapter<PhoneType> {
      ProtoAdapter_PhoneType() {
        super(PhoneType.class, Syntax.PROTO_3);
      }

      @Override
      protected PhoneType fromValue(int value) {
        return PhoneType.fromValue(value);
      }
    }
  }

  public static final class PhoneNumber extends Message<PhoneNumber, PhoneNumber.Builder> {
    public static final ProtoAdapter<PhoneNumber> ADAPTER = new ProtoAdapter_PhoneNumber();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_NUMBER = "";

    public static final PhoneType DEFAULT_TYPE = PhoneType.MOBILE;

    /**
     * The customer's phone number.
     */
    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.OMIT_IDENTITY
    )
    public final String number;

    /**
     * The type of phone stored here.
     */
    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.proto3.java.person.Person$PhoneType#ADAPTER",
        label = WireField.Label.OMIT_IDENTITY
    )
    public final PhoneType type;

    public PhoneNumber(String number, PhoneType type) {
      this(number, type, ByteString.EMPTY);
    }

    public PhoneNumber(String number, PhoneType type, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.number = number;
      this.type = type;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.number = number;
      builder.type = type;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof PhoneNumber)) return false;
      PhoneNumber o = (PhoneNumber) other;
      return unknownFields().equals(o.unknownFields())
          && Internal.equals(number, o.number)
          && Internal.equals(type, o.type);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (number != null ? number.hashCode() : 0);
        result = result * 37 + (type != null ? type.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (number != null) builder.append(", number=").append(Internal.sanitize(number));
      if (type != null) builder.append(", type=").append(type);
      return builder.replace(0, 2, "PhoneNumber{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<PhoneNumber, Builder> {
      public String number;

      public PhoneType type;

      public Builder() {
      }

      /**
       * The customer's phone number.
       */
      public Builder number(String number) {
        this.number = number;
        return this;
      }

      /**
       * The type of phone stored here.
       */
      public Builder type(PhoneType type) {
        this.type = type;
        return this;
      }

      @Override
      public PhoneNumber build() {
        return new PhoneNumber(number, type, super.buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_PhoneNumber extends ProtoAdapter<PhoneNumber> {
      public ProtoAdapter_PhoneNumber() {
        super(FieldEncoding.LENGTH_DELIMITED, PhoneNumber.class, "type.googleapis.com/squareup.protos3.java.person.Person.PhoneNumber", Syntax.PROTO_3);
      }

      @Override
      public int encodedSize(PhoneNumber value) {
        return (Objects.equals(value.number, "") ? 0
              : ProtoAdapter.STRING.encodedSizeWithTag(1, value.number))
            + (Objects.equals(value.type, PhoneType.MOBILE) ? 0
              : PhoneType.ADAPTER.encodedSizeWithTag(2, value.type))
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, PhoneNumber value) throws IOException {
        if (!Objects.equals(value.number, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.number);
        if (!Objects.equals(value.type, PhoneType.MOBILE)) PhoneType.ADAPTER.encodeWithTag(writer, 2, value.type);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public PhoneNumber decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.number(ProtoAdapter.STRING.decode(reader)); break;
            case 2: {
              try {
                builder.type(PhoneType.ADAPTER.decode(reader));
              } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
              }
              break;
            }
            default: {
              reader.readUnknownField(tag);
            }
          }
        }
        builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
        return builder.build();
      }

      @Override
      public PhoneNumber redact(PhoneNumber value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  private static final class ProtoAdapter_Person extends ProtoAdapter<Person> {
    public ProtoAdapter_Person() {
      super(FieldEncoding.LENGTH_DELIMITED, Person.class, "type.googleapis.com/squareup.protos3.java.person.Person", Syntax.PROTO_3);
    }

    @Override
    public int encodedSize(Person value) {
      return (Objects.equals(value.name, "") ? 0
            : ProtoAdapter.STRING.encodedSizeWithTag(1, value.name))
          + (Objects.equals(value.id, 0) ? 0
            : ProtoAdapter.INT32.encodedSizeWithTag(2, value.id))
          + (Objects.equals(value.email, "") ? 0
            : ProtoAdapter.STRING.encodedSizeWithTag(3, value.email))
          + PhoneNumber.ADAPTER.asRepeated().encodedSizeWithTag(4, value.phones)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(5, value.aliases)
          + ProtoAdapter.INT32.encodedSizeWithTag(6, value.foo)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.bar)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Person value) throws IOException {
      if (!Objects.equals(value.name, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (!Objects.equals(value.id, 0)) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.id);
      if (!Objects.equals(value.email, "")) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.email);
      PhoneNumber.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.phones);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 5, value.aliases);
      ProtoAdapter.INT32.encodeWithTag(writer, 6, value.foo);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.bar);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Person decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.id(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.email(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.phones.add(PhoneNumber.ADAPTER.decode(reader)); break;
          case 5: builder.aliases.add(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.foo(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.bar(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public Person redact(Person value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.phones, PhoneNumber.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
