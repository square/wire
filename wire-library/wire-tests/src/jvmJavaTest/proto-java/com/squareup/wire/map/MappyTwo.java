// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.map.MappyTwo in map.proto
package com.squareup.wire.map;

import com.squareup.wire.EnumAdapter;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Map;
import okio.ByteString;

public final class MappyTwo extends Message<MappyTwo, MappyTwo.Builder> {
  public static final ProtoAdapter<MappyTwo> ADAPTER = new ProtoAdapter_MappyTwo();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.map.MappyTwo$ValueEnum#ADAPTER"
  )
  public final Map<String, ValueEnum> stringEnums;

  @WireField(
      tag = 2,
      keyAdapter = "com.squareup.wire.ProtoAdapter#SINT64",
      adapter = "com.squareup.wire.map.Thing#ADAPTER"
  )
  public final Map<Long, Thing> intThings;

  @WireField(
      tag = 3,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Map<String, Long> stringInts;

  public MappyTwo(Map<String, ValueEnum> stringEnums, Map<Long, Thing> intThings,
      Map<String, Long> stringInts) {
    this(stringEnums, intThings, stringInts, ByteString.EMPTY);
  }

  public MappyTwo(Map<String, ValueEnum> stringEnums, Map<Long, Thing> intThings,
      Map<String, Long> stringInts, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.stringEnums = Internal.immutableCopyOf("stringEnums", stringEnums);
    this.intThings = Internal.immutableCopyOf("intThings", intThings);
    this.stringInts = Internal.immutableCopyOf("stringInts", stringInts);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.stringEnums = Internal.copyOf(stringEnums);
    builder.intThings = Internal.copyOf(intThings);
    builder.stringInts = Internal.copyOf(stringInts);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MappyTwo)) return false;
    MappyTwo o = (MappyTwo) other;
    return unknownFields().equals(o.unknownFields())
        && stringEnums.equals(o.stringEnums)
        && intThings.equals(o.intThings)
        && stringInts.equals(o.stringInts);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + stringEnums.hashCode();
      result = result * 37 + intThings.hashCode();
      result = result * 37 + stringInts.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!stringEnums.isEmpty()) builder.append(", stringEnums=").append(stringEnums);
    if (!intThings.isEmpty()) builder.append(", intThings=").append(intThings);
    if (!stringInts.isEmpty()) builder.append(", stringInts=").append(stringInts);
    return builder.replace(0, 2, "MappyTwo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MappyTwo, Builder> {
    public Map<String, ValueEnum> stringEnums;

    public Map<Long, Thing> intThings;

    public Map<String, Long> stringInts;

    public Builder() {
      stringEnums = Internal.newMutableMap();
      intThings = Internal.newMutableMap();
      stringInts = Internal.newMutableMap();
    }

    public Builder stringEnums(Map<String, ValueEnum> stringEnums) {
      Internal.checkElementsNotNull(stringEnums);
      this.stringEnums = stringEnums;
      return this;
    }

    public Builder intThings(Map<Long, Thing> intThings) {
      Internal.checkElementsNotNull(intThings);
      this.intThings = intThings;
      return this;
    }

    public Builder stringInts(Map<String, Long> stringInts) {
      Internal.checkElementsNotNull(stringInts);
      this.stringInts = stringInts;
      return this;
    }

    @Override
    public MappyTwo build() {
      return new MappyTwo(stringEnums, intThings, stringInts, super.buildUnknownFields());
    }
  }

  public enum ValueEnum implements WireEnum {
    DEFAULT(0),

    FOO(1),

    BAR(2);

    public static final ProtoAdapter<ValueEnum> ADAPTER = new ProtoAdapter_ValueEnum();

    private final int value;

    ValueEnum(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static ValueEnum fromValue(int value) {
      switch (value) {
        case 0: return DEFAULT;
        case 1: return FOO;
        case 2: return BAR;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }

    private static final class ProtoAdapter_ValueEnum extends EnumAdapter<ValueEnum> {
      ProtoAdapter_ValueEnum() {
        super(ValueEnum.class, Syntax.PROTO_2, ValueEnum.DEFAULT);
      }

      @Override
      protected ValueEnum fromValue(int value) {
        return ValueEnum.fromValue(value);
      }
    }
  }

  private static final class ProtoAdapter_MappyTwo extends ProtoAdapter<MappyTwo> {
    private ProtoAdapter<Map<String, ValueEnum>> stringEnums;

    private ProtoAdapter<Map<Long, Thing>> intThings;

    private ProtoAdapter<Map<String, Long>> stringInts;

    public ProtoAdapter_MappyTwo() {
      super(FieldEncoding.LENGTH_DELIMITED, MappyTwo.class, "type.googleapis.com/com.squareup.wire.map.MappyTwo", Syntax.PROTO_2, null, "map.proto");
    }

    @Override
    public int encodedSize(MappyTwo value) {
      int result = 0;
      result += stringEnumsAdapter().encodedSizeWithTag(1, value.stringEnums);
      result += intThingsAdapter().encodedSizeWithTag(2, value.intThings);
      result += stringIntsAdapter().encodedSizeWithTag(3, value.stringInts);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, MappyTwo value) throws IOException {
      stringEnumsAdapter().encodeWithTag(writer, 1, value.stringEnums);
      intThingsAdapter().encodeWithTag(writer, 2, value.intThings);
      stringIntsAdapter().encodeWithTag(writer, 3, value.stringInts);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, MappyTwo value) throws IOException {
      writer.writeBytes(value.unknownFields());
      stringIntsAdapter().encodeWithTag(writer, 3, value.stringInts);
      intThingsAdapter().encodeWithTag(writer, 2, value.intThings);
      stringEnumsAdapter().encodeWithTag(writer, 1, value.stringEnums);
    }

    @Override
    public MappyTwo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.stringEnums.putAll(stringEnumsAdapter().decode(reader)); break;
          case 2: builder.intThings.putAll(intThingsAdapter().decode(reader)); break;
          case 3: builder.stringInts.putAll(stringIntsAdapter().decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public MappyTwo redact(MappyTwo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.intThings, Thing.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }

    private ProtoAdapter<Map<String, ValueEnum>> stringEnumsAdapter() {
      ProtoAdapter<Map<String, ValueEnum>> result = stringEnums;
      if (result == null) {
        result = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ValueEnum.ADAPTER);
        stringEnums = result;
      }
      return result;
    }

    private ProtoAdapter<Map<Long, Thing>> intThingsAdapter() {
      ProtoAdapter<Map<Long, Thing>> result = intThings;
      if (result == null) {
        result = ProtoAdapter.newMapAdapter(ProtoAdapter.SINT64, Thing.ADAPTER);
        intThings = result;
      }
      return result;
    }

    private ProtoAdapter<Map<String, Long>> stringIntsAdapter() {
      ProtoAdapter<Map<String, Long>> result = stringInts;
      if (result == null) {
        result = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.SINT64);
        stringInts = result;
      }
      return result;
    }
  }
}
