// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.protos.kotlin.map.MappyTwo in map.proto
package com.squareup.wire.protos.kotlin.map

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.lazy
import okio.ByteString

public class MappyTwo(
  stringEnums: Map<String, ValueEnum> = emptyMap(),
  intThings: Map<Long, Thing> = emptyMap(),
  stringInts: Map<String, Long> = emptyMap(),
  intThingsTwo: Map<Int, Thing> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<MappyTwo, MappyTwo.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.protos.kotlin.map.MappyTwo${'$'}ValueEnum#ADAPTER",
  )
  @JvmField
  public val stringEnums: Map<String, ValueEnum> = immutableCopyOf("stringEnums", stringEnums)

  @field:WireField(
    tag = 2,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SINT64",
    adapter = "com.squareup.wire.protos.kotlin.map.Thing#ADAPTER",
  )
  @JvmField
  public val intThings: Map<Long, Thing> = immutableCopyOf("intThings", intThings)

  @field:WireField(
    tag = 3,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
  )
  @JvmField
  public val stringInts: Map<String, Long> = immutableCopyOf("stringInts", stringInts)

  @field:WireField(
    tag = 4,
    keyAdapter = "com.squareup.wire.ProtoAdapter#SINT32",
    adapter = "com.squareup.wire.protos.kotlin.map.Thing#ADAPTER",
  )
  @JvmField
  public val intThingsTwo: Map<Int, Thing> = immutableCopyOf("intThingsTwo", intThingsTwo)

  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.stringEnums = stringEnums
    builder.intThings = intThings
    builder.stringInts = stringInts
    builder.intThingsTwo = intThingsTwo
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MappyTwo) return false
    if (unknownFields != other.unknownFields) return false
    if (stringEnums != other.stringEnums) return false
    if (intThings != other.intThings) return false
    if (stringInts != other.stringInts) return false
    if (intThingsTwo != other.intThingsTwo) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + stringEnums.hashCode()
      result = result * 37 + intThings.hashCode()
      result = result * 37 + stringInts.hashCode()
      result = result * 37 + intThingsTwo.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (stringEnums.isNotEmpty()) result += """stringEnums=$stringEnums"""
    if (intThings.isNotEmpty()) result += """intThings=$intThings"""
    if (stringInts.isNotEmpty()) result += """stringInts=$stringInts"""
    if (intThingsTwo.isNotEmpty()) result += """intThingsTwo=$intThingsTwo"""
    return result.joinToString(prefix = "MappyTwo{", separator = ", ", postfix = "}")
  }

  public fun copy(
    stringEnums: Map<String, ValueEnum> = this.stringEnums,
    intThings: Map<Long, Thing> = this.intThings,
    stringInts: Map<String, Long> = this.stringInts,
    intThingsTwo: Map<Int, Thing> = this.intThingsTwo,
    unknownFields: ByteString = this.unknownFields,
  ): MappyTwo = MappyTwo(stringEnums, intThings, stringInts, intThingsTwo, unknownFields)

  public class Builder : Message.Builder<MappyTwo, Builder>() {
    @JvmField
    public var stringEnums: Map<String, ValueEnum> = emptyMap()

    @JvmField
    public var intThings: Map<Long, Thing> = emptyMap()

    @JvmField
    public var stringInts: Map<String, Long> = emptyMap()

    @JvmField
    public var intThingsTwo: Map<Int, Thing> = emptyMap()

    public fun stringEnums(stringEnums: Map<String, ValueEnum>): Builder {
      this.stringEnums = stringEnums
      return this
    }

    public fun intThings(intThings: Map<Long, Thing>): Builder {
      this.intThings = intThings
      return this
    }

    public fun stringInts(stringInts: Map<String, Long>): Builder {
      this.stringInts = stringInts
      return this
    }

    public fun intThingsTwo(intThingsTwo: Map<Int, Thing>): Builder {
      this.intThingsTwo = intThingsTwo
      return this
    }

    public override fun build(): MappyTwo = MappyTwo(
      stringEnums = stringEnums,
      intThings = intThings,
      stringInts = stringInts,
      intThingsTwo = intThingsTwo,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<MappyTwo> = object : ProtoAdapter<MappyTwo>(
      FieldEncoding.LENGTH_DELIMITED, 
      MappyTwo::class, 
      "type.googleapis.com/com.squareup.wire.protos.kotlin.map.MappyTwo", 
      PROTO_2, 
      null, 
      "map.proto"
    ) {
      private val stringEnumsAdapter: ProtoAdapter<Map<String, ValueEnum>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ValueEnum.ADAPTER) }

      private val intThingsAdapter: ProtoAdapter<Map<Long, Thing>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SINT64, Thing.ADAPTER) }

      private val stringIntsAdapter: ProtoAdapter<Map<String, Long>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.SINT64) }

      private val intThingsTwoAdapter: ProtoAdapter<Map<Int, Thing>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.SINT32, Thing.ADAPTER) }

      public override fun encodedSize(`value`: MappyTwo): Int {
        var size = value.unknownFields.size
        size += stringEnumsAdapter.encodedSizeWithTag(1, value.stringEnums)
        size += intThingsAdapter.encodedSizeWithTag(2, value.intThings)
        size += stringIntsAdapter.encodedSizeWithTag(3, value.stringInts)
        size += intThingsTwoAdapter.encodedSizeWithTag(4, value.intThingsTwo)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: MappyTwo): Unit {
        stringEnumsAdapter.encodeWithTag(writer, 1, value.stringEnums)
        intThingsAdapter.encodeWithTag(writer, 2, value.intThings)
        stringIntsAdapter.encodeWithTag(writer, 3, value.stringInts)
        intThingsTwoAdapter.encodeWithTag(writer, 4, value.intThingsTwo)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: MappyTwo): Unit {
        writer.writeBytes(value.unknownFields)
        intThingsTwoAdapter.encodeWithTag(writer, 4, value.intThingsTwo)
        stringIntsAdapter.encodeWithTag(writer, 3, value.stringInts)
        intThingsAdapter.encodeWithTag(writer, 2, value.intThings)
        stringEnumsAdapter.encodeWithTag(writer, 1, value.stringEnums)
      }

      public override fun decode(reader: ProtoReader): MappyTwo {
        val stringEnums = mutableMapOf<String, ValueEnum>()
        val intThings = mutableMapOf<Long, Thing>()
        val stringInts = mutableMapOf<String, Long>()
        val intThingsTwo = mutableMapOf<Int, Thing>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> stringEnums.putAll(stringEnumsAdapter.decode(reader))
            2 -> intThings.putAll(intThingsAdapter.decode(reader))
            3 -> stringInts.putAll(stringIntsAdapter.decode(reader))
            4 -> intThingsTwo.putAll(intThingsTwoAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return MappyTwo(
          stringEnums = stringEnums,
          intThings = intThings,
          stringInts = stringInts,
          intThingsTwo = intThingsTwo,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: MappyTwo): MappyTwo = value.copy(
        intThings = value.intThings.redactElements(Thing.ADAPTER),
        intThingsTwo = value.intThingsTwo.redactElements(Thing.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public enum class ValueEnum(
    public override val `value`: Int,
  ) : WireEnum {
    DEFAULT(0),
    FOO(1),
    BAR(2),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<ValueEnum> = object : EnumAdapter<ValueEnum>(
        ValueEnum::class, 
        PROTO_2, 
        ValueEnum.DEFAULT
      ) {
        public override fun fromValue(`value`: Int): ValueEnum? = ValueEnum.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): ValueEnum? = when (value) {
        0 -> DEFAULT
        1 -> FOO
        2 -> BAR
        else -> null
      }
    }
  }
}
