// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.oneof.Form in form.proto
package com.squareup.wire.protos.kotlin

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class Form(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}ButtonElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val button_element: ButtonElement? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}LocalImageElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val local_image_element: LocalImageElement? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}RemoteImageElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val remote_image_element: RemoteImageElement? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}MoneyElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val money_element: MoneyElement? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}SpacerElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val spacer_element: SpacerElement? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}TextElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val text_element: TextElement? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}CustomizedCardElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val customized_card_element: CustomizedCardElement? = null,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}AddressElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val address_element: AddressElement? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}TextInputElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val text_input_element: TextInputElement? = null,
  @Deprecated(message = "option_picker_element is deprecated")
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}OptionPickerElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val option_picker_element: OptionPickerElement? = null,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}DetailRowElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val detail_row_element: DetailRowElement? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.protos.kotlin.Form${'$'}CurrencyConversionFlagsElement#ADAPTER",
    oneofName = "choice",
  )
  @JvmField
  public val currency_conversion_flags_element: CurrencyConversionFlagsElement? = null,
  @field:WireField(
    tag = 101,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val a: String? = null,
  @field:WireField(
    tag = 102,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val b: String? = null,
  @field:WireField(
    tag = 103,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val c: String? = null,
  @field:WireField(
    tag = 104,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val d: String? = null,
  @field:WireField(
    tag = 105,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    redacted = true,
    oneofName = "decision",
  )
  @JvmField
  public val e: String? = null,
  @field:WireField(
    tag = 106,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val f: String? = null,
  @field:WireField(
    tag = 107,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val g: String? = null,
  @field:WireField(
    tag = 108,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "decision",
  )
  @JvmField
  public val h: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Form, Form.Builder>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(button_element, local_image_element, remote_image_element, money_element,
        spacer_element, text_element, customized_card_element, address_element, text_input_element,
        option_picker_element, detail_row_element, currency_conversion_flags_element) <= 1) {
      "At most one of button_element, local_image_element, remote_image_element, money_element, spacer_element, text_element, customized_card_element, address_element, text_input_element, option_picker_element, detail_row_element, currency_conversion_flags_element may be non-null"
    }
    require(countNonNull(a, b, c, d, e, f, g, h) <= 1) {
      "At most one of a, b, c, d, e, f, g, h may be non-null"
    }
  }

  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.button_element = button_element
    builder.local_image_element = local_image_element
    builder.remote_image_element = remote_image_element
    builder.money_element = money_element
    builder.spacer_element = spacer_element
    builder.text_element = text_element
    builder.customized_card_element = customized_card_element
    builder.address_element = address_element
    builder.text_input_element = text_input_element
    builder.option_picker_element = option_picker_element
    builder.detail_row_element = detail_row_element
    builder.currency_conversion_flags_element = currency_conversion_flags_element
    builder.a = a
    builder.b = b
    builder.c = c
    builder.d = d
    builder.e = e
    builder.f = f
    builder.g = g
    builder.h = h
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Form) return false
    if (unknownFields != other.unknownFields) return false
    if (button_element != other.button_element) return false
    if (local_image_element != other.local_image_element) return false
    if (remote_image_element != other.remote_image_element) return false
    if (money_element != other.money_element) return false
    if (spacer_element != other.spacer_element) return false
    if (text_element != other.text_element) return false
    if (customized_card_element != other.customized_card_element) return false
    if (address_element != other.address_element) return false
    if (text_input_element != other.text_input_element) return false
    if (option_picker_element != other.option_picker_element) return false
    if (detail_row_element != other.detail_row_element) return false
    if (currency_conversion_flags_element != other.currency_conversion_flags_element) return false
    if (a != other.a) return false
    if (b != other.b) return false
    if (c != other.c) return false
    if (d != other.d) return false
    if (e != other.e) return false
    if (f != other.f) return false
    if (g != other.g) return false
    if (h != other.h) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (button_element?.hashCode() ?: 0)
      result = result * 37 + (local_image_element?.hashCode() ?: 0)
      result = result * 37 + (remote_image_element?.hashCode() ?: 0)
      result = result * 37 + (money_element?.hashCode() ?: 0)
      result = result * 37 + (spacer_element?.hashCode() ?: 0)
      result = result * 37 + (text_element?.hashCode() ?: 0)
      result = result * 37 + (customized_card_element?.hashCode() ?: 0)
      result = result * 37 + (address_element?.hashCode() ?: 0)
      result = result * 37 + (text_input_element?.hashCode() ?: 0)
      result = result * 37 + (option_picker_element?.hashCode() ?: 0)
      result = result * 37 + (detail_row_element?.hashCode() ?: 0)
      result = result * 37 + (currency_conversion_flags_element?.hashCode() ?: 0)
      result = result * 37 + (a?.hashCode() ?: 0)
      result = result * 37 + (b?.hashCode() ?: 0)
      result = result * 37 + (c?.hashCode() ?: 0)
      result = result * 37 + (d?.hashCode() ?: 0)
      result = result * 37 + (e?.hashCode() ?: 0)
      result = result * 37 + (f?.hashCode() ?: 0)
      result = result * 37 + (g?.hashCode() ?: 0)
      result = result * 37 + (h?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (button_element != null) result += """button_element=$button_element"""
    if (local_image_element != null) result += """local_image_element=$local_image_element"""
    if (remote_image_element != null) result += """remote_image_element=$remote_image_element"""
    if (money_element != null) result += """money_element=$money_element"""
    if (spacer_element != null) result += """spacer_element=$spacer_element"""
    if (text_element != null) result += """text_element=$text_element"""
    if (customized_card_element != null) result +=
        """customized_card_element=$customized_card_element"""
    if (address_element != null) result += """address_element=$address_element"""
    if (text_input_element != null) result += """text_input_element=$text_input_element"""
    if (option_picker_element != null) result += """option_picker_element=$option_picker_element"""
    if (detail_row_element != null) result += """detail_row_element=$detail_row_element"""
    if (currency_conversion_flags_element != null) result +=
        """currency_conversion_flags_element=$currency_conversion_flags_element"""
    if (a != null) result += """a=${sanitize(a)}"""
    if (b != null) result += """b=${sanitize(b)}"""
    if (c != null) result += """c=${sanitize(c)}"""
    if (d != null) result += """d=${sanitize(d)}"""
    if (e != null) result += """e=██"""
    if (f != null) result += """f=${sanitize(f)}"""
    if (g != null) result += """g=${sanitize(g)}"""
    if (h != null) result += """h=${sanitize(h)}"""
    return result.joinToString(prefix = "Form{", separator = ", ", postfix = "}")
  }

  public fun copy(
    button_element: ButtonElement? = this.button_element,
    local_image_element: LocalImageElement? = this.local_image_element,
    remote_image_element: RemoteImageElement? = this.remote_image_element,
    money_element: MoneyElement? = this.money_element,
    spacer_element: SpacerElement? = this.spacer_element,
    text_element: TextElement? = this.text_element,
    customized_card_element: CustomizedCardElement? = this.customized_card_element,
    address_element: AddressElement? = this.address_element,
    text_input_element: TextInputElement? = this.text_input_element,
    option_picker_element: OptionPickerElement? = this.option_picker_element,
    detail_row_element: DetailRowElement? = this.detail_row_element,
    currency_conversion_flags_element: CurrencyConversionFlagsElement? =
        this.currency_conversion_flags_element,
    a: String? = this.a,
    b: String? = this.b,
    c: String? = this.c,
    d: String? = this.d,
    e: String? = this.e,
    f: String? = this.f,
    g: String? = this.g,
    h: String? = this.h,
    unknownFields: ByteString = this.unknownFields,
  ): Form = Form(button_element, local_image_element, remote_image_element, money_element,
      spacer_element, text_element, customized_card_element, address_element, text_input_element,
      option_picker_element, detail_row_element, currency_conversion_flags_element, a, b, c, d, e,
      f, g, h, unknownFields)

  public class Builder : Message.Builder<Form, Builder>() {
    @JvmField
    public var button_element: ButtonElement? = null

    @JvmField
    public var local_image_element: LocalImageElement? = null

    @JvmField
    public var remote_image_element: RemoteImageElement? = null

    @JvmField
    public var money_element: MoneyElement? = null

    @JvmField
    public var spacer_element: SpacerElement? = null

    @JvmField
    public var text_element: TextElement? = null

    @JvmField
    public var customized_card_element: CustomizedCardElement? = null

    @JvmField
    public var address_element: AddressElement? = null

    @JvmField
    public var text_input_element: TextInputElement? = null

    @JvmField
    public var option_picker_element: OptionPickerElement? = null

    @JvmField
    public var detail_row_element: DetailRowElement? = null

    @JvmField
    public var currency_conversion_flags_element: CurrencyConversionFlagsElement? = null

    @JvmField
    public var a: String? = null

    @JvmField
    public var b: String? = null

    @JvmField
    public var c: String? = null

    @JvmField
    public var d: String? = null

    @JvmField
    public var e: String? = null

    @JvmField
    public var f: String? = null

    @JvmField
    public var g: String? = null

    @JvmField
    public var h: String? = null

    public fun button_element(button_element: ButtonElement?): Builder {
      this.button_element = button_element
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun local_image_element(local_image_element: LocalImageElement?): Builder {
      this.local_image_element = local_image_element
      this.button_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun remote_image_element(remote_image_element: RemoteImageElement?): Builder {
      this.remote_image_element = remote_image_element
      this.button_element = null
      this.local_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun money_element(money_element: MoneyElement?): Builder {
      this.money_element = money_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun spacer_element(spacer_element: SpacerElement?): Builder {
      this.spacer_element = spacer_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun text_element(text_element: TextElement?): Builder {
      this.text_element = text_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun customized_card_element(customized_card_element: CustomizedCardElement?): Builder {
      this.customized_card_element = customized_card_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun address_element(address_element: AddressElement?): Builder {
      this.address_element = address_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun text_input_element(text_input_element: TextInputElement?): Builder {
      this.text_input_element = text_input_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    @Deprecated(message = "option_picker_element is deprecated")
    public fun option_picker_element(option_picker_element: OptionPickerElement?): Builder {
      this.option_picker_element = option_picker_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.detail_row_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public fun detail_row_element(detail_row_element: DetailRowElement?): Builder {
      this.detail_row_element = detail_row_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.currency_conversion_flags_element = null
      return this
    }

    public
        fun currency_conversion_flags_element(currency_conversion_flags_element: CurrencyConversionFlagsElement?):
        Builder {
      this.currency_conversion_flags_element = currency_conversion_flags_element
      this.button_element = null
      this.local_image_element = null
      this.remote_image_element = null
      this.money_element = null
      this.spacer_element = null
      this.text_element = null
      this.customized_card_element = null
      this.address_element = null
      this.text_input_element = null
      this.option_picker_element = null
      this.detail_row_element = null
      return this
    }

    public fun a(a: String?): Builder {
      this.a = a
      this.b = null
      this.c = null
      this.d = null
      this.e = null
      this.f = null
      this.g = null
      this.h = null
      return this
    }

    public fun b(b: String?): Builder {
      this.b = b
      this.a = null
      this.c = null
      this.d = null
      this.e = null
      this.f = null
      this.g = null
      this.h = null
      return this
    }

    public fun c(c: String?): Builder {
      this.c = c
      this.a = null
      this.b = null
      this.d = null
      this.e = null
      this.f = null
      this.g = null
      this.h = null
      return this
    }

    public fun d(d: String?): Builder {
      this.d = d
      this.a = null
      this.b = null
      this.c = null
      this.e = null
      this.f = null
      this.g = null
      this.h = null
      return this
    }

    public fun e(e: String?): Builder {
      this.e = e
      this.a = null
      this.b = null
      this.c = null
      this.d = null
      this.f = null
      this.g = null
      this.h = null
      return this
    }

    public fun f(f: String?): Builder {
      this.f = f
      this.a = null
      this.b = null
      this.c = null
      this.d = null
      this.e = null
      this.g = null
      this.h = null
      return this
    }

    public fun g(g: String?): Builder {
      this.g = g
      this.a = null
      this.b = null
      this.c = null
      this.d = null
      this.e = null
      this.f = null
      this.h = null
      return this
    }

    public fun h(h: String?): Builder {
      this.h = h
      this.a = null
      this.b = null
      this.c = null
      this.d = null
      this.e = null
      this.f = null
      this.g = null
      return this
    }

    public override fun build(): Form = Form(
      button_element = button_element,
      local_image_element = local_image_element,
      remote_image_element = remote_image_element,
      money_element = money_element,
      spacer_element = spacer_element,
      text_element = text_element,
      customized_card_element = customized_card_element,
      address_element = address_element,
      text_input_element = text_input_element,
      option_picker_element = option_picker_element,
      detail_row_element = detail_row_element,
      currency_conversion_flags_element = currency_conversion_flags_element,
      a = a,
      b = b,
      c = c,
      d = d,
      e = e,
      f = f,
      g = g,
      h = h,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Form> = object : ProtoAdapter<Form>(
      FieldEncoding.LENGTH_DELIMITED, 
      Form::class, 
      "type.googleapis.com/squareup.protos.kotlin.oneof.Form", 
      PROTO_2, 
      null, 
      "form.proto"
    ) {
      public override fun encodedSize(`value`: Form): Int {
        var size = value.unknownFields.size
        size += ButtonElement.ADAPTER.encodedSizeWithTag(1, value.button_element)
        size += LocalImageElement.ADAPTER.encodedSizeWithTag(2, value.local_image_element)
        size += RemoteImageElement.ADAPTER.encodedSizeWithTag(3, value.remote_image_element)
        size += MoneyElement.ADAPTER.encodedSizeWithTag(4, value.money_element)
        size += SpacerElement.ADAPTER.encodedSizeWithTag(5, value.spacer_element)
        size += TextElement.ADAPTER.encodedSizeWithTag(6, value.text_element)
        size += CustomizedCardElement.ADAPTER.encodedSizeWithTag(7, value.customized_card_element)
        size += AddressElement.ADAPTER.encodedSizeWithTag(8, value.address_element)
        size += TextInputElement.ADAPTER.encodedSizeWithTag(9, value.text_input_element)
        size += OptionPickerElement.ADAPTER.encodedSizeWithTag(10, value.option_picker_element)
        size += DetailRowElement.ADAPTER.encodedSizeWithTag(11, value.detail_row_element)
        size += CurrencyConversionFlagsElement.ADAPTER.encodedSizeWithTag(12,
            value.currency_conversion_flags_element)
        size += ProtoAdapter.STRING.encodedSizeWithTag(101, value.a)
        size += ProtoAdapter.STRING.encodedSizeWithTag(102, value.b)
        size += ProtoAdapter.STRING.encodedSizeWithTag(103, value.c)
        size += ProtoAdapter.STRING.encodedSizeWithTag(104, value.d)
        size += ProtoAdapter.STRING.encodedSizeWithTag(105, value.e)
        size += ProtoAdapter.STRING.encodedSizeWithTag(106, value.f)
        size += ProtoAdapter.STRING.encodedSizeWithTag(107, value.g)
        size += ProtoAdapter.STRING.encodedSizeWithTag(108, value.h)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Form): Unit {
        ButtonElement.ADAPTER.encodeWithTag(writer, 1, value.button_element)
        LocalImageElement.ADAPTER.encodeWithTag(writer, 2, value.local_image_element)
        RemoteImageElement.ADAPTER.encodeWithTag(writer, 3, value.remote_image_element)
        MoneyElement.ADAPTER.encodeWithTag(writer, 4, value.money_element)
        SpacerElement.ADAPTER.encodeWithTag(writer, 5, value.spacer_element)
        TextElement.ADAPTER.encodeWithTag(writer, 6, value.text_element)
        CustomizedCardElement.ADAPTER.encodeWithTag(writer, 7, value.customized_card_element)
        AddressElement.ADAPTER.encodeWithTag(writer, 8, value.address_element)
        TextInputElement.ADAPTER.encodeWithTag(writer, 9, value.text_input_element)
        OptionPickerElement.ADAPTER.encodeWithTag(writer, 10, value.option_picker_element)
        DetailRowElement.ADAPTER.encodeWithTag(writer, 11, value.detail_row_element)
        CurrencyConversionFlagsElement.ADAPTER.encodeWithTag(writer, 12,
            value.currency_conversion_flags_element)
        ProtoAdapter.STRING.encodeWithTag(writer, 101, value.a)
        ProtoAdapter.STRING.encodeWithTag(writer, 102, value.b)
        ProtoAdapter.STRING.encodeWithTag(writer, 103, value.c)
        ProtoAdapter.STRING.encodeWithTag(writer, 104, value.d)
        ProtoAdapter.STRING.encodeWithTag(writer, 105, value.e)
        ProtoAdapter.STRING.encodeWithTag(writer, 106, value.f)
        ProtoAdapter.STRING.encodeWithTag(writer, 107, value.g)
        ProtoAdapter.STRING.encodeWithTag(writer, 108, value.h)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Form): Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 108, value.h)
        ProtoAdapter.STRING.encodeWithTag(writer, 107, value.g)
        ProtoAdapter.STRING.encodeWithTag(writer, 106, value.f)
        ProtoAdapter.STRING.encodeWithTag(writer, 105, value.e)
        ProtoAdapter.STRING.encodeWithTag(writer, 104, value.d)
        ProtoAdapter.STRING.encodeWithTag(writer, 103, value.c)
        ProtoAdapter.STRING.encodeWithTag(writer, 102, value.b)
        ProtoAdapter.STRING.encodeWithTag(writer, 101, value.a)
        CurrencyConversionFlagsElement.ADAPTER.encodeWithTag(writer, 12,
            value.currency_conversion_flags_element)
        DetailRowElement.ADAPTER.encodeWithTag(writer, 11, value.detail_row_element)
        OptionPickerElement.ADAPTER.encodeWithTag(writer, 10, value.option_picker_element)
        TextInputElement.ADAPTER.encodeWithTag(writer, 9, value.text_input_element)
        AddressElement.ADAPTER.encodeWithTag(writer, 8, value.address_element)
        CustomizedCardElement.ADAPTER.encodeWithTag(writer, 7, value.customized_card_element)
        TextElement.ADAPTER.encodeWithTag(writer, 6, value.text_element)
        SpacerElement.ADAPTER.encodeWithTag(writer, 5, value.spacer_element)
        MoneyElement.ADAPTER.encodeWithTag(writer, 4, value.money_element)
        RemoteImageElement.ADAPTER.encodeWithTag(writer, 3, value.remote_image_element)
        LocalImageElement.ADAPTER.encodeWithTag(writer, 2, value.local_image_element)
        ButtonElement.ADAPTER.encodeWithTag(writer, 1, value.button_element)
      }

      public override fun decode(reader: ProtoReader): Form {
        var button_element: ButtonElement? = null
        var local_image_element: LocalImageElement? = null
        var remote_image_element: RemoteImageElement? = null
        var money_element: MoneyElement? = null
        var spacer_element: SpacerElement? = null
        var text_element: TextElement? = null
        var customized_card_element: CustomizedCardElement? = null
        var address_element: AddressElement? = null
        var text_input_element: TextInputElement? = null
        var option_picker_element: OptionPickerElement? = null
        var detail_row_element: DetailRowElement? = null
        var currency_conversion_flags_element: CurrencyConversionFlagsElement? = null
        var a: String? = null
        var b: String? = null
        var c: String? = null
        var d: String? = null
        var e: String? = null
        var f: String? = null
        var g: String? = null
        var h: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> button_element = ButtonElement.ADAPTER.decode(reader)
            2 -> local_image_element = LocalImageElement.ADAPTER.decode(reader)
            3 -> remote_image_element = RemoteImageElement.ADAPTER.decode(reader)
            4 -> money_element = MoneyElement.ADAPTER.decode(reader)
            5 -> spacer_element = SpacerElement.ADAPTER.decode(reader)
            6 -> text_element = TextElement.ADAPTER.decode(reader)
            7 -> customized_card_element = CustomizedCardElement.ADAPTER.decode(reader)
            8 -> address_element = AddressElement.ADAPTER.decode(reader)
            9 -> text_input_element = TextInputElement.ADAPTER.decode(reader)
            10 -> option_picker_element = OptionPickerElement.ADAPTER.decode(reader)
            11 -> detail_row_element = DetailRowElement.ADAPTER.decode(reader)
            12 -> currency_conversion_flags_element =
                CurrencyConversionFlagsElement.ADAPTER.decode(reader)
            101 -> a = ProtoAdapter.STRING.decode(reader)
            102 -> b = ProtoAdapter.STRING.decode(reader)
            103 -> c = ProtoAdapter.STRING.decode(reader)
            104 -> d = ProtoAdapter.STRING.decode(reader)
            105 -> e = ProtoAdapter.STRING.decode(reader)
            106 -> f = ProtoAdapter.STRING.decode(reader)
            107 -> g = ProtoAdapter.STRING.decode(reader)
            108 -> h = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Form(
          button_element = button_element,
          local_image_element = local_image_element,
          remote_image_element = remote_image_element,
          money_element = money_element,
          spacer_element = spacer_element,
          text_element = text_element,
          customized_card_element = customized_card_element,
          address_element = address_element,
          text_input_element = text_input_element,
          option_picker_element = option_picker_element,
          detail_row_element = detail_row_element,
          currency_conversion_flags_element = currency_conversion_flags_element,
          a = a,
          b = b,
          c = c,
          d = d,
          e = e,
          f = f,
          g = g,
          h = h,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Form): Form = value.copy(
        button_element = value.button_element?.let(ButtonElement.ADAPTER::redact),
        local_image_element = value.local_image_element?.let(LocalImageElement.ADAPTER::redact),
        remote_image_element = value.remote_image_element?.let(RemoteImageElement.ADAPTER::redact),
        money_element = value.money_element?.let(MoneyElement.ADAPTER::redact),
        spacer_element = value.spacer_element?.let(SpacerElement.ADAPTER::redact),
        text_element = value.text_element?.let(TextElement.ADAPTER::redact),
        customized_card_element =
            value.customized_card_element?.let(CustomizedCardElement.ADAPTER::redact),
        address_element = value.address_element?.let(AddressElement.ADAPTER::redact),
        text_input_element = value.text_input_element?.let(TextInputElement.ADAPTER::redact),
        option_picker_element =
            value.option_picker_element?.let(OptionPickerElement.ADAPTER::redact),
        detail_row_element = value.detail_row_element?.let(DetailRowElement.ADAPTER::redact),
        currency_conversion_flags_element =
            value.currency_conversion_flags_element?.let(CurrencyConversionFlagsElement.ADAPTER::redact),
        e = null,
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class ButtonElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<ButtonElement, ButtonElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is ButtonElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "ButtonElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): ButtonElement =
        ButtonElement(unknownFields)

    public class Builder : Message.Builder<ButtonElement, Builder>() {
      public override fun build(): ButtonElement = ButtonElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<ButtonElement> = object : ProtoAdapter<ButtonElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        ButtonElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.ButtonElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: ButtonElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: ButtonElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: ButtonElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): ButtonElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return ButtonElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: ButtonElement): ButtonElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class LocalImageElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<LocalImageElement, LocalImageElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is LocalImageElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "LocalImageElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): LocalImageElement =
        LocalImageElement(unknownFields)

    public class Builder : Message.Builder<LocalImageElement, Builder>() {
      public override fun build(): LocalImageElement = LocalImageElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<LocalImageElement> = object :
          ProtoAdapter<LocalImageElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        LocalImageElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.LocalImageElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: LocalImageElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: LocalImageElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: LocalImageElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): LocalImageElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return LocalImageElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: LocalImageElement): LocalImageElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class RemoteImageElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<RemoteImageElement, RemoteImageElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is RemoteImageElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "RemoteImageElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): RemoteImageElement =
        RemoteImageElement(unknownFields)

    public class Builder : Message.Builder<RemoteImageElement, Builder>() {
      public override fun build(): RemoteImageElement = RemoteImageElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<RemoteImageElement> = object :
          ProtoAdapter<RemoteImageElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        RemoteImageElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.RemoteImageElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: RemoteImageElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: RemoteImageElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: RemoteImageElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): RemoteImageElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return RemoteImageElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: RemoteImageElement): RemoteImageElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class MoneyElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<MoneyElement, MoneyElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is MoneyElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "MoneyElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): MoneyElement =
        MoneyElement(unknownFields)

    public class Builder : Message.Builder<MoneyElement, Builder>() {
      public override fun build(): MoneyElement = MoneyElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<MoneyElement> = object : ProtoAdapter<MoneyElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        MoneyElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.MoneyElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: MoneyElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: MoneyElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: MoneyElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): MoneyElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return MoneyElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: MoneyElement): MoneyElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class SpacerElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<SpacerElement, SpacerElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is SpacerElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "SpacerElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): SpacerElement =
        SpacerElement(unknownFields)

    public class Builder : Message.Builder<SpacerElement, Builder>() {
      public override fun build(): SpacerElement = SpacerElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<SpacerElement> = object : ProtoAdapter<SpacerElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        SpacerElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.SpacerElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: SpacerElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: SpacerElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: SpacerElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): SpacerElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return SpacerElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: SpacerElement): SpacerElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class TextElement(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
    )
    @JvmField
    public val text: String? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<TextElement, TextElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.text = text
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is TextElement) return false
      if (unknownFields != other.unknownFields) return false
      if (text != other.text) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + (text?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      if (text != null) result += """text=${sanitize(text)}"""
      return result.joinToString(prefix = "TextElement{", separator = ", ", postfix = "}")
    }

    public fun copy(text: String? = this.text, unknownFields: ByteString = this.unknownFields):
        TextElement = TextElement(text, unknownFields)

    public class Builder : Message.Builder<TextElement, Builder>() {
      @JvmField
      public var text: String? = null

      public fun text(text: String?): Builder {
        this.text = text
        return this
      }

      public override fun build(): TextElement = TextElement(
        text = text,
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<TextElement> = object : ProtoAdapter<TextElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        TextElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.TextElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: TextElement): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.text)
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: TextElement): Unit {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.text)
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: TextElement): Unit {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.text)
        }

        public override fun decode(reader: ProtoReader): TextElement {
          var text: String? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> text = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return TextElement(
            text = text,
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: TextElement): TextElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class CustomizedCardElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<CustomizedCardElement, CustomizedCardElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is CustomizedCardElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "CustomizedCardElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): CustomizedCardElement =
        CustomizedCardElement(unknownFields)

    public class Builder : Message.Builder<CustomizedCardElement, Builder>() {
      public override fun build(): CustomizedCardElement = CustomizedCardElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<CustomizedCardElement> = object :
          ProtoAdapter<CustomizedCardElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        CustomizedCardElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.CustomizedCardElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: CustomizedCardElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: CustomizedCardElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: CustomizedCardElement):
            Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): CustomizedCardElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return CustomizedCardElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: CustomizedCardElement): CustomizedCardElement =
            value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class AddressElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<AddressElement, AddressElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is AddressElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "AddressElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): AddressElement =
        AddressElement(unknownFields)

    public class Builder : Message.Builder<AddressElement, Builder>() {
      public override fun build(): AddressElement = AddressElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<AddressElement> = object : ProtoAdapter<AddressElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        AddressElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.AddressElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: AddressElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: AddressElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: AddressElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): AddressElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return AddressElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: AddressElement): AddressElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class TextInputElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<TextInputElement, TextInputElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is TextInputElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "TextInputElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): TextInputElement =
        TextInputElement(unknownFields)

    public class Builder : Message.Builder<TextInputElement, Builder>() {
      public override fun build(): TextInputElement = TextInputElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<TextInputElement> = object : ProtoAdapter<TextInputElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        TextInputElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.TextInputElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: TextInputElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: TextInputElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: TextInputElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): TextInputElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return TextInputElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: TextInputElement): TextInputElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class OptionPickerElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<OptionPickerElement, OptionPickerElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is OptionPickerElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "OptionPickerElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): OptionPickerElement =
        OptionPickerElement(unknownFields)

    public class Builder : Message.Builder<OptionPickerElement, Builder>() {
      public override fun build(): OptionPickerElement = OptionPickerElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<OptionPickerElement> = object :
          ProtoAdapter<OptionPickerElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        OptionPickerElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.OptionPickerElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: OptionPickerElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: OptionPickerElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: OptionPickerElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): OptionPickerElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return OptionPickerElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: OptionPickerElement): OptionPickerElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class DetailRowElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<DetailRowElement, DetailRowElement.Builder>(ADAPTER, unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is DetailRowElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "DetailRowElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): DetailRowElement =
        DetailRowElement(unknownFields)

    public class Builder : Message.Builder<DetailRowElement, Builder>() {
      public override fun build(): DetailRowElement = DetailRowElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<DetailRowElement> = object : ProtoAdapter<DetailRowElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        DetailRowElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.DetailRowElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: DetailRowElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: DetailRowElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: DetailRowElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): DetailRowElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return DetailRowElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: DetailRowElement): DetailRowElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class CurrencyConversionFlagsElement(
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<CurrencyConversionFlagsElement, CurrencyConversionFlagsElement.Builder>(ADAPTER,
      unknownFields) {
    public override fun newBuilder(): Builder {
      val builder = Builder()
      builder.addUnknownFields(unknownFields)
      return builder
    }

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is CurrencyConversionFlagsElement) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    public override fun hashCode(): Int = unknownFields.hashCode()

    public override fun toString(): String = "CurrencyConversionFlagsElement{}"

    public fun copy(unknownFields: ByteString = this.unknownFields): CurrencyConversionFlagsElement
        = CurrencyConversionFlagsElement(unknownFields)

    public class Builder : Message.Builder<CurrencyConversionFlagsElement, Builder>() {
      public override fun build(): CurrencyConversionFlagsElement = CurrencyConversionFlagsElement(
        unknownFields = buildUnknownFields()
      )
    }

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<CurrencyConversionFlagsElement> = object :
          ProtoAdapter<CurrencyConversionFlagsElement>(
        FieldEncoding.LENGTH_DELIMITED, 
        CurrencyConversionFlagsElement::class, 
        "type.googleapis.com/squareup.protos.kotlin.oneof.Form.CurrencyConversionFlagsElement", 
        PROTO_2, 
        null, 
        "form.proto"
      ) {
        public override fun encodedSize(`value`: CurrencyConversionFlagsElement): Int {
          var size = value.unknownFields.size
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: CurrencyConversionFlagsElement):
            Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter,
            `value`: CurrencyConversionFlagsElement): Unit {
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): CurrencyConversionFlagsElement {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return CurrencyConversionFlagsElement(
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: CurrencyConversionFlagsElement):
            CurrencyConversionFlagsElement = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
