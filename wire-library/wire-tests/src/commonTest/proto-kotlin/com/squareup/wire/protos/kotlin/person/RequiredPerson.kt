// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.person.RequiredPerson in person.proto
package com.squareup.wire.protos.kotlin.person

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.missingRequiredFields
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class RequiredPerson(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.protos.kotlin.person.Person#ADAPTER",
    label = WireField.Label.REQUIRED,
  )
  public val person: Person,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RequiredPerson, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RequiredPerson) return false
    if (unknownFields != other.unknownFields) return false
    if (person != other.person) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + person.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """person=$person"""
    return result.joinToString(prefix = "RequiredPerson{", separator = ", ", postfix = "}")
  }

  public fun copy(person: Person = this.person, unknownFields: ByteString = this.unknownFields):
      RequiredPerson = RequiredPerson(person, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RequiredPerson> = object : ProtoAdapter<RequiredPerson>(
      FieldEncoding.LENGTH_DELIMITED, 
      RequiredPerson::class, 
      "type.googleapis.com/squareup.protos.kotlin.person.RequiredPerson", 
      PROTO_2, 
      null, 
      "person.proto"
    ) {
      public override fun encodedSize(`value`: RequiredPerson): Int {
        var size = value.unknownFields.size
        size += Person.ADAPTER.encodedSizeWithTag(1, value.person)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: RequiredPerson): Unit {
        Person.ADAPTER.encodeWithTag(writer, 1, value.person)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: RequiredPerson): Unit {
        writer.writeBytes(value.unknownFields)
        Person.ADAPTER.encodeWithTag(writer, 1, value.person)
      }

      public override fun decode(reader: ProtoReader): RequiredPerson {
        var person: Person? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> person = Person.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RequiredPerson(
          person = person ?: throw missingRequiredFields(person, "person"),
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: RequiredPerson): RequiredPerson = value.copy(
        person = Person.ADAPTER.redact(value.person),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
