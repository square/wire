// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.kotlin.AllTypes in all_types.proto
package com.squareup.wire.proto3.kotlin.all_types

import com.squareup.wire.AnyMessage
import com.squareup.wire.Duration
import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Instant
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.immutableCopyOfMapWithStructValues
import com.squareup.wire.`internal`.immutableCopyOfStruct
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.lazy
import okio.ByteString

public class AllTypes(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "int32"
  )
  public val proto3_kotlin_int32: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "uint32"
  )
  public val proto3_kotlin_uint32: Int = 0,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "sint32"
  )
  public val proto3_kotlin_sint32: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "fixed32"
  )
  public val proto3_kotlin_fixed32: Int = 0,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "sfixed32"
  )
  public val proto3_kotlin_sfixed32: Int = 0,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "int64"
  )
  public val proto3_kotlin_int64: Long = 0L,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "uint64"
  )
  public val proto3_kotlin_uint64: Long = 0L,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "sint64"
  )
  public val proto3_kotlin_sint64: Long = 0L,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "fixed64"
  )
  public val proto3_kotlin_fixed64: Long = 0L,
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "sfixed64"
  )
  public val proto3_kotlin_sfixed64: Long = 0L,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "bool"
  )
  public val proto3_kotlin_bool: Boolean = false,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "float"
  )
  public val proto3_kotlin_float: Float = 0f,
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "double"
  )
  public val proto3_kotlin_double: Double = 0.0,
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "string"
  )
  public val proto3_kotlin_string: String = "",
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "bytes"
  )
  public val proto3_kotlin_bytes: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "nestedEnum"
  )
  public val nested_enum: NestedEnum = NestedEnum.UNKNOWN,
  @field:WireField(
    tag = 17,
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "nestedMessage"
  )
  public val nested_message: NestedMessage? = null,
  @field:WireField(
    tag = 18,
    adapter = "com.squareup.wire.AnyMessage#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val any: AnyMessage? = null,
  @field:WireField(
    tag = 19,
    adapter = "com.squareup.wire.ProtoAdapter#DURATION",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val duration: Duration? = null,
  struct: Map<String, *>? = null,
  list_value: List<*>? = null,
  value: Any? = null,
  null_value: Nothing? = null,
  @field:WireField(
    tag = 24,
    adapter = "com.squareup.wire.ProtoAdapter#EMPTY",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val empty: Unit? = null,
  @field:WireField(
    tag = 25,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val timestamp: Instant? = null,
  @field:WireField(
    tag = 101,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    jsonName = "optInt32"
  )
  public val opt_int32: Int? = null,
  @field:WireField(
    tag = 102,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    jsonName = "optUint32"
  )
  public val opt_uint32: Int? = null,
  @field:WireField(
    tag = 103,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    jsonName = "optSint32"
  )
  public val opt_sint32: Int? = null,
  @field:WireField(
    tag = 104,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    jsonName = "optFixed32"
  )
  public val opt_fixed32: Int? = null,
  @field:WireField(
    tag = 105,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    jsonName = "optSfixed32"
  )
  public val opt_sfixed32: Int? = null,
  @field:WireField(
    tag = 106,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    jsonName = "optInt64"
  )
  public val opt_int64: Long? = null,
  @field:WireField(
    tag = 107,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    jsonName = "optUint64"
  )
  public val opt_uint64: Long? = null,
  @field:WireField(
    tag = 108,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    jsonName = "optSint64"
  )
  public val opt_sint64: Long? = null,
  @field:WireField(
    tag = 109,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    jsonName = "optFixed64"
  )
  public val opt_fixed64: Long? = null,
  @field:WireField(
    tag = 110,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    jsonName = "optSfixed64"
  )
  public val opt_sfixed64: Long? = null,
  @field:WireField(
    tag = 111,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    jsonName = "optBool"
  )
  public val opt_bool: Boolean? = null,
  @field:WireField(
    tag = 112,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    jsonName = "optFloat"
  )
  public val opt_float: Float? = null,
  @field:WireField(
    tag = 113,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    jsonName = "optDouble"
  )
  public val opt_double: Double? = null,
  @field:WireField(
    tag = 114,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "optString"
  )
  public val opt_string: String? = null,
  @field:WireField(
    tag = 115,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    jsonName = "optBytes"
  )
  public val opt_bytes: ByteString? = null,
  rep_int32: List<Int> = emptyList(),
  rep_uint32: List<Int> = emptyList(),
  rep_sint32: List<Int> = emptyList(),
  rep_fixed32: List<Int> = emptyList(),
  rep_sfixed32: List<Int> = emptyList(),
  rep_int64: List<Long> = emptyList(),
  rep_uint64: List<Long> = emptyList(),
  rep_sint64: List<Long> = emptyList(),
  rep_fixed64: List<Long> = emptyList(),
  rep_sfixed64: List<Long> = emptyList(),
  rep_bool: List<Boolean> = emptyList(),
  rep_float: List<Float> = emptyList(),
  rep_double: List<Double> = emptyList(),
  rep_string: List<String> = emptyList(),
  rep_bytes: List<ByteString> = emptyList(),
  rep_nested_enum: List<NestedEnum> = emptyList(),
  rep_nested_message: List<NestedMessage> = emptyList(),
  rep_any: List<AnyMessage> = emptyList(),
  rep_duration: List<Duration> = emptyList(),
  rep_struct: List<Map<String, *>?> = emptyList(),
  rep_list_value: List<List<*>?> = emptyList(),
  rep_value: List<Any?> = emptyList(),
  rep_null_value: List<Nothing?> = emptyList(),
  rep_empty: List<Unit> = emptyList(),
  rep_timestamp: List<Instant> = emptyList(),
  pack_int32: List<Int> = emptyList(),
  pack_uint32: List<Int> = emptyList(),
  pack_sint32: List<Int> = emptyList(),
  pack_fixed32: List<Int> = emptyList(),
  pack_sfixed32: List<Int> = emptyList(),
  pack_int64: List<Long> = emptyList(),
  pack_uint64: List<Long> = emptyList(),
  pack_sint64: List<Long> = emptyList(),
  pack_fixed64: List<Long> = emptyList(),
  pack_sfixed64: List<Long> = emptyList(),
  pack_bool: List<Boolean> = emptyList(),
  pack_float: List<Float> = emptyList(),
  pack_double: List<Double> = emptyList(),
  pack_nested_enum: List<NestedEnum> = emptyList(),
  pack_null_value: List<Nothing?> = emptyList(),
  map_int32_int32: Map<Int, Int> = emptyMap(),
  map_string_string: Map<String, String> = emptyMap(),
  map_string_message: Map<String, NestedMessage> = emptyMap(),
  map_string_enum: Map<String, NestedEnum> = emptyMap(),
  map_int32_any: Map<Int, AnyMessage> = emptyMap(),
  map_int32_duration: Map<Int, Duration> = emptyMap(),
  map_int32_struct: Map<Int, Map<String, *>?> = emptyMap(),
  map_int32_list_value: Map<Int, List<*>?> = emptyMap(),
  map_int32_value: Map<Int, Any?> = emptyMap(),
  map_int32_null_value: Map<Int, Nothing?> = emptyMap(),
  map_int32_empty: Map<Int, Unit> = emptyMap(),
  map_int32_timestamp: Map<Int, Instant> = emptyMap(),
  @field:WireField(
    tag = 601,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "oneofString"
  )
  public val oneof_string: String? = null,
  @field:WireField(
    tag = 602,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    jsonName = "oneofInt32"
  )
  public val oneof_int32: Int? = null,
  @field:WireField(
    tag = 603,
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedMessage#ADAPTER",
    jsonName = "oneofNestedMessage"
  )
  public val oneof_nested_message: NestedMessage? = null,
  @field:WireField(
    tag = 618,
    adapter = "com.squareup.wire.AnyMessage#ADAPTER",
    jsonName = "oneofAny"
  )
  public val oneof_any: AnyMessage? = null,
  @field:WireField(
    tag = 619,
    adapter = "com.squareup.wire.ProtoAdapter#DURATION",
    jsonName = "oneofDuration"
  )
  public val oneof_duration: Duration? = null,
  oneof_struct: Map<String, *>? = null,
  oneof_list_value: List<*>? = null,
  /**
   * google.protobuf.Value oneof_value = 622;
   * google.protobuf.NullValue oneof_null_value = 623;
   */
  @field:WireField(
    tag = 624,
    adapter = "com.squareup.wire.ProtoAdapter#EMPTY",
    jsonName = "oneofEmpty"
  )
  public val oneof_empty: Unit? = null,
  @field:WireField(
    tag = 625,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    jsonName = "oneofTimestamp"
  )
  public val oneof_timestamp: Instant? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AllTypes, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 20,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_MAP",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val struct: Map<String, *>? = immutableCopyOfStruct("struct", struct)

  @field:WireField(
    tag = 21,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_LIST",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "listValue"
  )
  public val list_value: List<*>? = immutableCopyOfStruct("list_value", list_value)

  @field:WireField(
    tag = 22,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_VALUE",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val value: Any? = immutableCopyOfStruct("value", value)

  @field:WireField(
    tag = 23,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_NULL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "nullValue"
  )
  public val null_value: Nothing? = immutableCopyOfStruct("null_value", null_value)

  @field:WireField(
    tag = 201,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REPEATED,
    jsonName = "repInt32"
  )
  public val rep_int32: List<Int> = immutableCopyOf("rep_int32", rep_int32)

  @field:WireField(
    tag = 202,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REPEATED,
    jsonName = "repUint32"
  )
  public val rep_uint32: List<Int> = immutableCopyOf("rep_uint32", rep_uint32)

  @field:WireField(
    tag = 203,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REPEATED,
    jsonName = "repSint32"
  )
  public val rep_sint32: List<Int> = immutableCopyOf("rep_sint32", rep_sint32)

  @field:WireField(
    tag = 204,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REPEATED,
    jsonName = "repFixed32"
  )
  public val rep_fixed32: List<Int> = immutableCopyOf("rep_fixed32", rep_fixed32)

  @field:WireField(
    tag = 205,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REPEATED,
    jsonName = "repSfixed32"
  )
  public val rep_sfixed32: List<Int> = immutableCopyOf("rep_sfixed32", rep_sfixed32)

  @field:WireField(
    tag = 206,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REPEATED,
    jsonName = "repInt64"
  )
  public val rep_int64: List<Long> = immutableCopyOf("rep_int64", rep_int64)

  @field:WireField(
    tag = 207,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REPEATED,
    jsonName = "repUint64"
  )
  public val rep_uint64: List<Long> = immutableCopyOf("rep_uint64", rep_uint64)

  @field:WireField(
    tag = 208,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REPEATED,
    jsonName = "repSint64"
  )
  public val rep_sint64: List<Long> = immutableCopyOf("rep_sint64", rep_sint64)

  @field:WireField(
    tag = 209,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REPEATED,
    jsonName = "repFixed64"
  )
  public val rep_fixed64: List<Long> = immutableCopyOf("rep_fixed64", rep_fixed64)

  @field:WireField(
    tag = 210,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REPEATED,
    jsonName = "repSfixed64"
  )
  public val rep_sfixed64: List<Long> = immutableCopyOf("rep_sfixed64", rep_sfixed64)

  @field:WireField(
    tag = 211,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REPEATED,
    jsonName = "repBool"
  )
  public val rep_bool: List<Boolean> = immutableCopyOf("rep_bool", rep_bool)

  @field:WireField(
    tag = 212,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.REPEATED,
    jsonName = "repFloat"
  )
  public val rep_float: List<Float> = immutableCopyOf("rep_float", rep_float)

  @field:WireField(
    tag = 213,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REPEATED,
    jsonName = "repDouble"
  )
  public val rep_double: List<Double> = immutableCopyOf("rep_double", rep_double)

  @field:WireField(
    tag = 214,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "repString"
  )
  public val rep_string: List<String> = immutableCopyOf("rep_string", rep_string)

  @field:WireField(
    tag = 215,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REPEATED,
    jsonName = "repBytes"
  )
  public val rep_bytes: List<ByteString> = immutableCopyOf("rep_bytes", rep_bytes)

  @field:WireField(
    tag = 216,
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "repNestedEnum"
  )
  public val rep_nested_enum: List<NestedEnum> = immutableCopyOf("rep_nested_enum", rep_nested_enum)

  @field:WireField(
    tag = 217,
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedMessage#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "repNestedMessage"
  )
  public val rep_nested_message: List<NestedMessage> = immutableCopyOf("rep_nested_message",
      rep_nested_message)

  @field:WireField(
    tag = 218,
    adapter = "com.squareup.wire.AnyMessage#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "repAny"
  )
  public val rep_any: List<AnyMessage> = immutableCopyOf("rep_any", rep_any)

  @field:WireField(
    tag = 219,
    adapter = "com.squareup.wire.ProtoAdapter#DURATION",
    label = WireField.Label.REPEATED,
    jsonName = "repDuration"
  )
  public val rep_duration: List<Duration> = immutableCopyOf("rep_duration", rep_duration)

  @field:WireField(
    tag = 220,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_MAP",
    label = WireField.Label.REPEATED,
    jsonName = "repStruct"
  )
  public val rep_struct: List<Map<String, *>?> = immutableCopyOfStruct("rep_struct", rep_struct)

  @field:WireField(
    tag = 221,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_LIST",
    label = WireField.Label.REPEATED,
    jsonName = "repListValue"
  )
  public val rep_list_value: List<List<*>?> = immutableCopyOfStruct("rep_list_value",
      rep_list_value)

  @field:WireField(
    tag = 222,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_VALUE",
    label = WireField.Label.REPEATED,
    jsonName = "repValue"
  )
  public val rep_value: List<Any?> = immutableCopyOfStruct("rep_value", rep_value)

  @field:WireField(
    tag = 223,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_NULL",
    label = WireField.Label.REPEATED,
    jsonName = "repNullValue"
  )
  public val rep_null_value: List<Nothing?> = immutableCopyOfStruct("rep_null_value",
      rep_null_value)

  @field:WireField(
    tag = 224,
    adapter = "com.squareup.wire.ProtoAdapter#EMPTY",
    label = WireField.Label.REPEATED,
    jsonName = "repEmpty"
  )
  public val rep_empty: List<Unit> = immutableCopyOf("rep_empty", rep_empty)

  @field:WireField(
    tag = 225,
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    label = WireField.Label.REPEATED,
    jsonName = "repTimestamp"
  )
  public val rep_timestamp: List<Instant> = immutableCopyOf("rep_timestamp", rep_timestamp)

  @field:WireField(
    tag = 301,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED,
    jsonName = "packInt32"
  )
  public val pack_int32: List<Int> = immutableCopyOf("pack_int32", pack_int32)

  @field:WireField(
    tag = 302,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.PACKED,
    jsonName = "packUint32"
  )
  public val pack_uint32: List<Int> = immutableCopyOf("pack_uint32", pack_uint32)

  @field:WireField(
    tag = 303,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.PACKED,
    jsonName = "packSint32"
  )
  public val pack_sint32: List<Int> = immutableCopyOf("pack_sint32", pack_sint32)

  @field:WireField(
    tag = 304,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.PACKED,
    jsonName = "packFixed32"
  )
  public val pack_fixed32: List<Int> = immutableCopyOf("pack_fixed32", pack_fixed32)

  @field:WireField(
    tag = 305,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.PACKED,
    jsonName = "packSfixed32"
  )
  public val pack_sfixed32: List<Int> = immutableCopyOf("pack_sfixed32", pack_sfixed32)

  @field:WireField(
    tag = 306,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.PACKED,
    jsonName = "packInt64"
  )
  public val pack_int64: List<Long> = immutableCopyOf("pack_int64", pack_int64)

  @field:WireField(
    tag = 307,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.PACKED,
    jsonName = "packUint64"
  )
  public val pack_uint64: List<Long> = immutableCopyOf("pack_uint64", pack_uint64)

  @field:WireField(
    tag = 308,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.PACKED,
    jsonName = "packSint64"
  )
  public val pack_sint64: List<Long> = immutableCopyOf("pack_sint64", pack_sint64)

  @field:WireField(
    tag = 309,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.PACKED,
    jsonName = "packFixed64"
  )
  public val pack_fixed64: List<Long> = immutableCopyOf("pack_fixed64", pack_fixed64)

  @field:WireField(
    tag = 310,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.PACKED,
    jsonName = "packSfixed64"
  )
  public val pack_sfixed64: List<Long> = immutableCopyOf("pack_sfixed64", pack_sfixed64)

  @field:WireField(
    tag = 311,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.PACKED,
    jsonName = "packBool"
  )
  public val pack_bool: List<Boolean> = immutableCopyOf("pack_bool", pack_bool)

  @field:WireField(
    tag = 312,
    adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
    label = WireField.Label.PACKED,
    jsonName = "packFloat"
  )
  public val pack_float: List<Float> = immutableCopyOf("pack_float", pack_float)

  @field:WireField(
    tag = 313,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.PACKED,
    jsonName = "packDouble"
  )
  public val pack_double: List<Double> = immutableCopyOf("pack_double", pack_double)

  @field:WireField(
    tag = 316,
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedEnum#ADAPTER",
    label = WireField.Label.PACKED,
    jsonName = "packNestedEnum"
  )
  public val pack_nested_enum: List<NestedEnum> = immutableCopyOf("pack_nested_enum",
      pack_nested_enum)

  @field:WireField(
    tag = 323,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_NULL",
    label = WireField.Label.PACKED,
    jsonName = "packNullValue"
  )
  public val pack_null_value: List<Nothing?> = immutableCopyOfStruct("pack_null_value",
      pack_null_value)

  @field:WireField(
    tag = 501,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    jsonName = "mapInt32Int32"
  )
  public val map_int32_int32: Map<Int, Int> = immutableCopyOf("map_int32_int32", map_int32_int32)

  @field:WireField(
    tag = 502,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "mapStringString"
  )
  public val map_string_string: Map<String, String> = immutableCopyOf("map_string_string",
      map_string_string)

  @field:WireField(
    tag = 503,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedMessage#ADAPTER",
    jsonName = "mapStringMessage"
  )
  public val map_string_message: Map<String, NestedMessage> = immutableCopyOf("map_string_message",
      map_string_message)

  @field:WireField(
    tag = 504,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.proto3.kotlin.all_types.AllTypes${'$'}NestedEnum#ADAPTER",
    jsonName = "mapStringEnum"
  )
  public val map_string_enum: Map<String, NestedEnum> = immutableCopyOf("map_string_enum",
      map_string_enum)

  @field:WireField(
    tag = 518,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.AnyMessage#ADAPTER",
    jsonName = "mapInt32Any"
  )
  public val map_int32_any: Map<Int, AnyMessage> = immutableCopyOf("map_int32_any", map_int32_any)

  @field:WireField(
    tag = 519,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#DURATION",
    jsonName = "mapInt32Duration"
  )
  public val map_int32_duration: Map<Int, Duration> = immutableCopyOf("map_int32_duration",
      map_int32_duration)

  @field:WireField(
    tag = 520,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_MAP",
    jsonName = "mapInt32Struct"
  )
  public val map_int32_struct: Map<Int, Map<String, *>?> =
      immutableCopyOfMapWithStructValues("map_int32_struct", map_int32_struct)

  @field:WireField(
    tag = 521,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_LIST",
    jsonName = "mapInt32ListValue"
  )
  public val map_int32_list_value: Map<Int, List<*>?> =
      immutableCopyOfMapWithStructValues("map_int32_list_value", map_int32_list_value)

  @field:WireField(
    tag = 522,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_VALUE",
    jsonName = "mapInt32Value"
  )
  public val map_int32_value: Map<Int, Any?> = immutableCopyOfMapWithStructValues("map_int32_value",
      map_int32_value)

  @field:WireField(
    tag = 523,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_NULL",
    jsonName = "mapInt32NullValue"
  )
  public val map_int32_null_value: Map<Int, Nothing?> =
      immutableCopyOfMapWithStructValues("map_int32_null_value", map_int32_null_value)

  @field:WireField(
    tag = 524,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#EMPTY",
    jsonName = "mapInt32Empty"
  )
  public val map_int32_empty: Map<Int, Unit> = immutableCopyOf("map_int32_empty", map_int32_empty)

  @field:WireField(
    tag = 525,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
    jsonName = "mapInt32Timestamp"
  )
  public val map_int32_timestamp: Map<Int, Instant> = immutableCopyOf("map_int32_timestamp",
      map_int32_timestamp)

  @field:WireField(
    tag = 620,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_MAP",
    jsonName = "oneofStruct"
  )
  public val oneof_struct: Map<String, *>? = immutableCopyOfStruct("oneof_struct", oneof_struct)

  @field:WireField(
    tag = 621,
    adapter = "com.squareup.wire.ProtoAdapter#STRUCT_LIST",
    jsonName = "oneofListValue"
  )
  public val oneof_list_value: List<*>? = immutableCopyOfStruct("oneof_list_value",
      oneof_list_value)

  init {
    require(countNonNull(oneof_string, oneof_int32, oneof_nested_message, oneof_any, oneof_duration,
        oneof_struct, oneof_list_value, oneof_empty, oneof_timestamp) <= 1) {
      "At most one of oneof_string, oneof_int32, oneof_nested_message, oneof_any, oneof_duration, oneof_struct, oneof_list_value, oneof_empty, oneof_timestamp may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw AssertionError()

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AllTypes) return false
    if (unknownFields != other.unknownFields) return false
    if (proto3_kotlin_int32 != other.proto3_kotlin_int32) return false
    if (proto3_kotlin_uint32 != other.proto3_kotlin_uint32) return false
    if (proto3_kotlin_sint32 != other.proto3_kotlin_sint32) return false
    if (proto3_kotlin_fixed32 != other.proto3_kotlin_fixed32) return false
    if (proto3_kotlin_sfixed32 != other.proto3_kotlin_sfixed32) return false
    if (proto3_kotlin_int64 != other.proto3_kotlin_int64) return false
    if (proto3_kotlin_uint64 != other.proto3_kotlin_uint64) return false
    if (proto3_kotlin_sint64 != other.proto3_kotlin_sint64) return false
    if (proto3_kotlin_fixed64 != other.proto3_kotlin_fixed64) return false
    if (proto3_kotlin_sfixed64 != other.proto3_kotlin_sfixed64) return false
    if (proto3_kotlin_bool != other.proto3_kotlin_bool) return false
    if (proto3_kotlin_float != other.proto3_kotlin_float) return false
    if (proto3_kotlin_double != other.proto3_kotlin_double) return false
    if (proto3_kotlin_string != other.proto3_kotlin_string) return false
    if (proto3_kotlin_bytes != other.proto3_kotlin_bytes) return false
    if (nested_enum != other.nested_enum) return false
    if (nested_message != other.nested_message) return false
    if (any != other.any) return false
    if (duration != other.duration) return false
    if (struct != other.struct) return false
    if (list_value != other.list_value) return false
    if (value != other.value) return false
    if (null_value != other.null_value) return false
    if (empty != other.empty) return false
    if (timestamp != other.timestamp) return false
    if (opt_int32 != other.opt_int32) return false
    if (opt_uint32 != other.opt_uint32) return false
    if (opt_sint32 != other.opt_sint32) return false
    if (opt_fixed32 != other.opt_fixed32) return false
    if (opt_sfixed32 != other.opt_sfixed32) return false
    if (opt_int64 != other.opt_int64) return false
    if (opt_uint64 != other.opt_uint64) return false
    if (opt_sint64 != other.opt_sint64) return false
    if (opt_fixed64 != other.opt_fixed64) return false
    if (opt_sfixed64 != other.opt_sfixed64) return false
    if (opt_bool != other.opt_bool) return false
    if (opt_float != other.opt_float) return false
    if (opt_double != other.opt_double) return false
    if (opt_string != other.opt_string) return false
    if (opt_bytes != other.opt_bytes) return false
    if (rep_int32 != other.rep_int32) return false
    if (rep_uint32 != other.rep_uint32) return false
    if (rep_sint32 != other.rep_sint32) return false
    if (rep_fixed32 != other.rep_fixed32) return false
    if (rep_sfixed32 != other.rep_sfixed32) return false
    if (rep_int64 != other.rep_int64) return false
    if (rep_uint64 != other.rep_uint64) return false
    if (rep_sint64 != other.rep_sint64) return false
    if (rep_fixed64 != other.rep_fixed64) return false
    if (rep_sfixed64 != other.rep_sfixed64) return false
    if (rep_bool != other.rep_bool) return false
    if (rep_float != other.rep_float) return false
    if (rep_double != other.rep_double) return false
    if (rep_string != other.rep_string) return false
    if (rep_bytes != other.rep_bytes) return false
    if (rep_nested_enum != other.rep_nested_enum) return false
    if (rep_nested_message != other.rep_nested_message) return false
    if (rep_any != other.rep_any) return false
    if (rep_duration != other.rep_duration) return false
    if (rep_struct != other.rep_struct) return false
    if (rep_list_value != other.rep_list_value) return false
    if (rep_value != other.rep_value) return false
    if (rep_null_value != other.rep_null_value) return false
    if (rep_empty != other.rep_empty) return false
    if (rep_timestamp != other.rep_timestamp) return false
    if (pack_int32 != other.pack_int32) return false
    if (pack_uint32 != other.pack_uint32) return false
    if (pack_sint32 != other.pack_sint32) return false
    if (pack_fixed32 != other.pack_fixed32) return false
    if (pack_sfixed32 != other.pack_sfixed32) return false
    if (pack_int64 != other.pack_int64) return false
    if (pack_uint64 != other.pack_uint64) return false
    if (pack_sint64 != other.pack_sint64) return false
    if (pack_fixed64 != other.pack_fixed64) return false
    if (pack_sfixed64 != other.pack_sfixed64) return false
    if (pack_bool != other.pack_bool) return false
    if (pack_float != other.pack_float) return false
    if (pack_double != other.pack_double) return false
    if (pack_nested_enum != other.pack_nested_enum) return false
    if (pack_null_value != other.pack_null_value) return false
    if (map_int32_int32 != other.map_int32_int32) return false
    if (map_string_string != other.map_string_string) return false
    if (map_string_message != other.map_string_message) return false
    if (map_string_enum != other.map_string_enum) return false
    if (map_int32_any != other.map_int32_any) return false
    if (map_int32_duration != other.map_int32_duration) return false
    if (map_int32_struct != other.map_int32_struct) return false
    if (map_int32_list_value != other.map_int32_list_value) return false
    if (map_int32_value != other.map_int32_value) return false
    if (map_int32_null_value != other.map_int32_null_value) return false
    if (map_int32_empty != other.map_int32_empty) return false
    if (map_int32_timestamp != other.map_int32_timestamp) return false
    if (oneof_string != other.oneof_string) return false
    if (oneof_int32 != other.oneof_int32) return false
    if (oneof_nested_message != other.oneof_nested_message) return false
    if (oneof_any != other.oneof_any) return false
    if (oneof_duration != other.oneof_duration) return false
    if (oneof_struct != other.oneof_struct) return false
    if (oneof_list_value != other.oneof_list_value) return false
    if (oneof_empty != other.oneof_empty) return false
    if (oneof_timestamp != other.oneof_timestamp) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + proto3_kotlin_int32.hashCode()
      result = result * 37 + proto3_kotlin_uint32.hashCode()
      result = result * 37 + proto3_kotlin_sint32.hashCode()
      result = result * 37 + proto3_kotlin_fixed32.hashCode()
      result = result * 37 + proto3_kotlin_sfixed32.hashCode()
      result = result * 37 + proto3_kotlin_int64.hashCode()
      result = result * 37 + proto3_kotlin_uint64.hashCode()
      result = result * 37 + proto3_kotlin_sint64.hashCode()
      result = result * 37 + proto3_kotlin_fixed64.hashCode()
      result = result * 37 + proto3_kotlin_sfixed64.hashCode()
      result = result * 37 + proto3_kotlin_bool.hashCode()
      result = result * 37 + proto3_kotlin_float.hashCode()
      result = result * 37 + proto3_kotlin_double.hashCode()
      result = result * 37 + proto3_kotlin_string.hashCode()
      result = result * 37 + proto3_kotlin_bytes.hashCode()
      result = result * 37 + nested_enum.hashCode()
      result = result * 37 + nested_message.hashCode()
      result = result * 37 + any.hashCode()
      result = result * 37 + duration.hashCode()
      result = result * 37 + struct.hashCode()
      result = result * 37 + list_value.hashCode()
      result = result * 37 + value.hashCode()
      result = result * 37 + null_value.hashCode()
      result = result * 37 + empty.hashCode()
      result = result * 37 + timestamp.hashCode()
      result = result * 37 + opt_int32.hashCode()
      result = result * 37 + opt_uint32.hashCode()
      result = result * 37 + opt_sint32.hashCode()
      result = result * 37 + opt_fixed32.hashCode()
      result = result * 37 + opt_sfixed32.hashCode()
      result = result * 37 + opt_int64.hashCode()
      result = result * 37 + opt_uint64.hashCode()
      result = result * 37 + opt_sint64.hashCode()
      result = result * 37 + opt_fixed64.hashCode()
      result = result * 37 + opt_sfixed64.hashCode()
      result = result * 37 + opt_bool.hashCode()
      result = result * 37 + opt_float.hashCode()
      result = result * 37 + opt_double.hashCode()
      result = result * 37 + opt_string.hashCode()
      result = result * 37 + opt_bytes.hashCode()
      result = result * 37 + rep_int32.hashCode()
      result = result * 37 + rep_uint32.hashCode()
      result = result * 37 + rep_sint32.hashCode()
      result = result * 37 + rep_fixed32.hashCode()
      result = result * 37 + rep_sfixed32.hashCode()
      result = result * 37 + rep_int64.hashCode()
      result = result * 37 + rep_uint64.hashCode()
      result = result * 37 + rep_sint64.hashCode()
      result = result * 37 + rep_fixed64.hashCode()
      result = result * 37 + rep_sfixed64.hashCode()
      result = result * 37 + rep_bool.hashCode()
      result = result * 37 + rep_float.hashCode()
      result = result * 37 + rep_double.hashCode()
      result = result * 37 + rep_string.hashCode()
      result = result * 37 + rep_bytes.hashCode()
      result = result * 37 + rep_nested_enum.hashCode()
      result = result * 37 + rep_nested_message.hashCode()
      result = result * 37 + rep_any.hashCode()
      result = result * 37 + rep_duration.hashCode()
      result = result * 37 + rep_struct.hashCode()
      result = result * 37 + rep_list_value.hashCode()
      result = result * 37 + rep_value.hashCode()
      result = result * 37 + rep_null_value.hashCode()
      result = result * 37 + rep_empty.hashCode()
      result = result * 37 + rep_timestamp.hashCode()
      result = result * 37 + pack_int32.hashCode()
      result = result * 37 + pack_uint32.hashCode()
      result = result * 37 + pack_sint32.hashCode()
      result = result * 37 + pack_fixed32.hashCode()
      result = result * 37 + pack_sfixed32.hashCode()
      result = result * 37 + pack_int64.hashCode()
      result = result * 37 + pack_uint64.hashCode()
      result = result * 37 + pack_sint64.hashCode()
      result = result * 37 + pack_fixed64.hashCode()
      result = result * 37 + pack_sfixed64.hashCode()
      result = result * 37 + pack_bool.hashCode()
      result = result * 37 + pack_float.hashCode()
      result = result * 37 + pack_double.hashCode()
      result = result * 37 + pack_nested_enum.hashCode()
      result = result * 37 + pack_null_value.hashCode()
      result = result * 37 + map_int32_int32.hashCode()
      result = result * 37 + map_string_string.hashCode()
      result = result * 37 + map_string_message.hashCode()
      result = result * 37 + map_string_enum.hashCode()
      result = result * 37 + map_int32_any.hashCode()
      result = result * 37 + map_int32_duration.hashCode()
      result = result * 37 + map_int32_struct.hashCode()
      result = result * 37 + map_int32_list_value.hashCode()
      result = result * 37 + map_int32_value.hashCode()
      result = result * 37 + map_int32_null_value.hashCode()
      result = result * 37 + map_int32_empty.hashCode()
      result = result * 37 + map_int32_timestamp.hashCode()
      result = result * 37 + oneof_string.hashCode()
      result = result * 37 + oneof_int32.hashCode()
      result = result * 37 + oneof_nested_message.hashCode()
      result = result * 37 + oneof_any.hashCode()
      result = result * 37 + oneof_duration.hashCode()
      result = result * 37 + oneof_struct.hashCode()
      result = result * 37 + oneof_list_value.hashCode()
      result = result * 37 + oneof_empty.hashCode()
      result = result * 37 + oneof_timestamp.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """proto3_kotlin_int32=$proto3_kotlin_int32"""
    result += """proto3_kotlin_uint32=$proto3_kotlin_uint32"""
    result += """proto3_kotlin_sint32=$proto3_kotlin_sint32"""
    result += """proto3_kotlin_fixed32=$proto3_kotlin_fixed32"""
    result += """proto3_kotlin_sfixed32=$proto3_kotlin_sfixed32"""
    result += """proto3_kotlin_int64=$proto3_kotlin_int64"""
    result += """proto3_kotlin_uint64=$proto3_kotlin_uint64"""
    result += """proto3_kotlin_sint64=$proto3_kotlin_sint64"""
    result += """proto3_kotlin_fixed64=$proto3_kotlin_fixed64"""
    result += """proto3_kotlin_sfixed64=$proto3_kotlin_sfixed64"""
    result += """proto3_kotlin_bool=$proto3_kotlin_bool"""
    result += """proto3_kotlin_float=$proto3_kotlin_float"""
    result += """proto3_kotlin_double=$proto3_kotlin_double"""
    result += """proto3_kotlin_string=${sanitize(proto3_kotlin_string)}"""
    result += """proto3_kotlin_bytes=$proto3_kotlin_bytes"""
    result += """nested_enum=$nested_enum"""
    if (nested_message != null) result += """nested_message=$nested_message"""
    if (any != null) result += """any=$any"""
    if (duration != null) result += """duration=$duration"""
    if (struct != null) result += """struct=$struct"""
    if (list_value != null) result += """list_value=$list_value"""
    if (value != null) result += """value=$value"""
    if (null_value != null) result += """null_value=$null_value"""
    if (empty != null) result += """empty=$empty"""
    if (timestamp != null) result += """timestamp=$timestamp"""
    if (opt_int32 != null) result += """opt_int32=$opt_int32"""
    if (opt_uint32 != null) result += """opt_uint32=$opt_uint32"""
    if (opt_sint32 != null) result += """opt_sint32=$opt_sint32"""
    if (opt_fixed32 != null) result += """opt_fixed32=$opt_fixed32"""
    if (opt_sfixed32 != null) result += """opt_sfixed32=$opt_sfixed32"""
    if (opt_int64 != null) result += """opt_int64=$opt_int64"""
    if (opt_uint64 != null) result += """opt_uint64=$opt_uint64"""
    if (opt_sint64 != null) result += """opt_sint64=$opt_sint64"""
    if (opt_fixed64 != null) result += """opt_fixed64=$opt_fixed64"""
    if (opt_sfixed64 != null) result += """opt_sfixed64=$opt_sfixed64"""
    if (opt_bool != null) result += """opt_bool=$opt_bool"""
    if (opt_float != null) result += """opt_float=$opt_float"""
    if (opt_double != null) result += """opt_double=$opt_double"""
    if (opt_string != null) result += """opt_string=${sanitize(opt_string)}"""
    if (opt_bytes != null) result += """opt_bytes=$opt_bytes"""
    if (rep_int32.isNotEmpty()) result += """rep_int32=$rep_int32"""
    if (rep_uint32.isNotEmpty()) result += """rep_uint32=$rep_uint32"""
    if (rep_sint32.isNotEmpty()) result += """rep_sint32=$rep_sint32"""
    if (rep_fixed32.isNotEmpty()) result += """rep_fixed32=$rep_fixed32"""
    if (rep_sfixed32.isNotEmpty()) result += """rep_sfixed32=$rep_sfixed32"""
    if (rep_int64.isNotEmpty()) result += """rep_int64=$rep_int64"""
    if (rep_uint64.isNotEmpty()) result += """rep_uint64=$rep_uint64"""
    if (rep_sint64.isNotEmpty()) result += """rep_sint64=$rep_sint64"""
    if (rep_fixed64.isNotEmpty()) result += """rep_fixed64=$rep_fixed64"""
    if (rep_sfixed64.isNotEmpty()) result += """rep_sfixed64=$rep_sfixed64"""
    if (rep_bool.isNotEmpty()) result += """rep_bool=$rep_bool"""
    if (rep_float.isNotEmpty()) result += """rep_float=$rep_float"""
    if (rep_double.isNotEmpty()) result += """rep_double=$rep_double"""
    if (rep_string.isNotEmpty()) result += """rep_string=${sanitize(rep_string)}"""
    if (rep_bytes.isNotEmpty()) result += """rep_bytes=$rep_bytes"""
    if (rep_nested_enum.isNotEmpty()) result += """rep_nested_enum=$rep_nested_enum"""
    if (rep_nested_message.isNotEmpty()) result += """rep_nested_message=$rep_nested_message"""
    if (rep_any.isNotEmpty()) result += """rep_any=$rep_any"""
    if (rep_duration.isNotEmpty()) result += """rep_duration=$rep_duration"""
    if (rep_struct.isNotEmpty()) result += """rep_struct=$rep_struct"""
    if (rep_list_value.isNotEmpty()) result += """rep_list_value=$rep_list_value"""
    if (rep_value.isNotEmpty()) result += """rep_value=$rep_value"""
    if (rep_null_value.isNotEmpty()) result += """rep_null_value=$rep_null_value"""
    if (rep_empty.isNotEmpty()) result += """rep_empty=$rep_empty"""
    if (rep_timestamp.isNotEmpty()) result += """rep_timestamp=$rep_timestamp"""
    if (pack_int32.isNotEmpty()) result += """pack_int32=$pack_int32"""
    if (pack_uint32.isNotEmpty()) result += """pack_uint32=$pack_uint32"""
    if (pack_sint32.isNotEmpty()) result += """pack_sint32=$pack_sint32"""
    if (pack_fixed32.isNotEmpty()) result += """pack_fixed32=$pack_fixed32"""
    if (pack_sfixed32.isNotEmpty()) result += """pack_sfixed32=$pack_sfixed32"""
    if (pack_int64.isNotEmpty()) result += """pack_int64=$pack_int64"""
    if (pack_uint64.isNotEmpty()) result += """pack_uint64=$pack_uint64"""
    if (pack_sint64.isNotEmpty()) result += """pack_sint64=$pack_sint64"""
    if (pack_fixed64.isNotEmpty()) result += """pack_fixed64=$pack_fixed64"""
    if (pack_sfixed64.isNotEmpty()) result += """pack_sfixed64=$pack_sfixed64"""
    if (pack_bool.isNotEmpty()) result += """pack_bool=$pack_bool"""
    if (pack_float.isNotEmpty()) result += """pack_float=$pack_float"""
    if (pack_double.isNotEmpty()) result += """pack_double=$pack_double"""
    if (pack_nested_enum.isNotEmpty()) result += """pack_nested_enum=$pack_nested_enum"""
    if (pack_null_value.isNotEmpty()) result += """pack_null_value=$pack_null_value"""
    if (map_int32_int32.isNotEmpty()) result += """map_int32_int32=$map_int32_int32"""
    if (map_string_string.isNotEmpty()) result += """map_string_string=$map_string_string"""
    if (map_string_message.isNotEmpty()) result += """map_string_message=$map_string_message"""
    if (map_string_enum.isNotEmpty()) result += """map_string_enum=$map_string_enum"""
    if (map_int32_any.isNotEmpty()) result += """map_int32_any=$map_int32_any"""
    if (map_int32_duration.isNotEmpty()) result += """map_int32_duration=$map_int32_duration"""
    if (map_int32_struct.isNotEmpty()) result += """map_int32_struct=$map_int32_struct"""
    if (map_int32_list_value.isNotEmpty()) result +=
        """map_int32_list_value=$map_int32_list_value"""
    if (map_int32_value.isNotEmpty()) result += """map_int32_value=$map_int32_value"""
    if (map_int32_null_value.isNotEmpty()) result +=
        """map_int32_null_value=$map_int32_null_value"""
    if (map_int32_empty.isNotEmpty()) result += """map_int32_empty=$map_int32_empty"""
    if (map_int32_timestamp.isNotEmpty()) result += """map_int32_timestamp=$map_int32_timestamp"""
    if (oneof_string != null) result += """oneof_string=${sanitize(oneof_string)}"""
    if (oneof_int32 != null) result += """oneof_int32=$oneof_int32"""
    if (oneof_nested_message != null) result += """oneof_nested_message=$oneof_nested_message"""
    if (oneof_any != null) result += """oneof_any=$oneof_any"""
    if (oneof_duration != null) result += """oneof_duration=$oneof_duration"""
    if (oneof_struct != null) result += """oneof_struct=$oneof_struct"""
    if (oneof_list_value != null) result += """oneof_list_value=$oneof_list_value"""
    if (oneof_empty != null) result += """oneof_empty=$oneof_empty"""
    if (oneof_timestamp != null) result += """oneof_timestamp=$oneof_timestamp"""
    return result.joinToString(prefix = "AllTypes{", separator = ", ", postfix = "}")
  }

  public fun copy(
    proto3_kotlin_int32: Int = this.proto3_kotlin_int32,
    proto3_kotlin_uint32: Int = this.proto3_kotlin_uint32,
    proto3_kotlin_sint32: Int = this.proto3_kotlin_sint32,
    proto3_kotlin_fixed32: Int = this.proto3_kotlin_fixed32,
    proto3_kotlin_sfixed32: Int = this.proto3_kotlin_sfixed32,
    proto3_kotlin_int64: Long = this.proto3_kotlin_int64,
    proto3_kotlin_uint64: Long = this.proto3_kotlin_uint64,
    proto3_kotlin_sint64: Long = this.proto3_kotlin_sint64,
    proto3_kotlin_fixed64: Long = this.proto3_kotlin_fixed64,
    proto3_kotlin_sfixed64: Long = this.proto3_kotlin_sfixed64,
    proto3_kotlin_bool: Boolean = this.proto3_kotlin_bool,
    proto3_kotlin_float: Float = this.proto3_kotlin_float,
    proto3_kotlin_double: Double = this.proto3_kotlin_double,
    proto3_kotlin_string: String = this.proto3_kotlin_string,
    proto3_kotlin_bytes: ByteString = this.proto3_kotlin_bytes,
    nested_enum: NestedEnum = this.nested_enum,
    nested_message: NestedMessage? = this.nested_message,
    any: AnyMessage? = this.any,
    duration: Duration? = this.duration,
    struct: Map<String, *>? = this.struct,
    list_value: List<*>? = this.list_value,
    value: Any? = this.value,
    null_value: Nothing? = this.null_value,
    empty: Unit? = this.empty,
    timestamp: Instant? = this.timestamp,
    opt_int32: Int? = this.opt_int32,
    opt_uint32: Int? = this.opt_uint32,
    opt_sint32: Int? = this.opt_sint32,
    opt_fixed32: Int? = this.opt_fixed32,
    opt_sfixed32: Int? = this.opt_sfixed32,
    opt_int64: Long? = this.opt_int64,
    opt_uint64: Long? = this.opt_uint64,
    opt_sint64: Long? = this.opt_sint64,
    opt_fixed64: Long? = this.opt_fixed64,
    opt_sfixed64: Long? = this.opt_sfixed64,
    opt_bool: Boolean? = this.opt_bool,
    opt_float: Float? = this.opt_float,
    opt_double: Double? = this.opt_double,
    opt_string: String? = this.opt_string,
    opt_bytes: ByteString? = this.opt_bytes,
    rep_int32: List<Int> = this.rep_int32,
    rep_uint32: List<Int> = this.rep_uint32,
    rep_sint32: List<Int> = this.rep_sint32,
    rep_fixed32: List<Int> = this.rep_fixed32,
    rep_sfixed32: List<Int> = this.rep_sfixed32,
    rep_int64: List<Long> = this.rep_int64,
    rep_uint64: List<Long> = this.rep_uint64,
    rep_sint64: List<Long> = this.rep_sint64,
    rep_fixed64: List<Long> = this.rep_fixed64,
    rep_sfixed64: List<Long> = this.rep_sfixed64,
    rep_bool: List<Boolean> = this.rep_bool,
    rep_float: List<Float> = this.rep_float,
    rep_double: List<Double> = this.rep_double,
    rep_string: List<String> = this.rep_string,
    rep_bytes: List<ByteString> = this.rep_bytes,
    rep_nested_enum: List<NestedEnum> = this.rep_nested_enum,
    rep_nested_message: List<NestedMessage> = this.rep_nested_message,
    rep_any: List<AnyMessage> = this.rep_any,
    rep_duration: List<Duration> = this.rep_duration,
    rep_struct: List<Map<String, *>?> = this.rep_struct,
    rep_list_value: List<List<*>?> = this.rep_list_value,
    rep_value: List<Any?> = this.rep_value,
    rep_null_value: List<Nothing?> = this.rep_null_value,
    rep_empty: List<Unit> = this.rep_empty,
    rep_timestamp: List<Instant> = this.rep_timestamp,
    pack_int32: List<Int> = this.pack_int32,
    pack_uint32: List<Int> = this.pack_uint32,
    pack_sint32: List<Int> = this.pack_sint32,
    pack_fixed32: List<Int> = this.pack_fixed32,
    pack_sfixed32: List<Int> = this.pack_sfixed32,
    pack_int64: List<Long> = this.pack_int64,
    pack_uint64: List<Long> = this.pack_uint64,
    pack_sint64: List<Long> = this.pack_sint64,
    pack_fixed64: List<Long> = this.pack_fixed64,
    pack_sfixed64: List<Long> = this.pack_sfixed64,
    pack_bool: List<Boolean> = this.pack_bool,
    pack_float: List<Float> = this.pack_float,
    pack_double: List<Double> = this.pack_double,
    pack_nested_enum: List<NestedEnum> = this.pack_nested_enum,
    pack_null_value: List<Nothing?> = this.pack_null_value,
    map_int32_int32: Map<Int, Int> = this.map_int32_int32,
    map_string_string: Map<String, String> = this.map_string_string,
    map_string_message: Map<String, NestedMessage> = this.map_string_message,
    map_string_enum: Map<String, NestedEnum> = this.map_string_enum,
    map_int32_any: Map<Int, AnyMessage> = this.map_int32_any,
    map_int32_duration: Map<Int, Duration> = this.map_int32_duration,
    map_int32_struct: Map<Int, Map<String, *>?> = this.map_int32_struct,
    map_int32_list_value: Map<Int, List<*>?> = this.map_int32_list_value,
    map_int32_value: Map<Int, Any?> = this.map_int32_value,
    map_int32_null_value: Map<Int, Nothing?> = this.map_int32_null_value,
    map_int32_empty: Map<Int, Unit> = this.map_int32_empty,
    map_int32_timestamp: Map<Int, Instant> = this.map_int32_timestamp,
    oneof_string: String? = this.oneof_string,
    oneof_int32: Int? = this.oneof_int32,
    oneof_nested_message: NestedMessage? = this.oneof_nested_message,
    oneof_any: AnyMessage? = this.oneof_any,
    oneof_duration: Duration? = this.oneof_duration,
    oneof_struct: Map<String, *>? = this.oneof_struct,
    oneof_list_value: List<*>? = this.oneof_list_value,
    oneof_empty: Unit? = this.oneof_empty,
    oneof_timestamp: Instant? = this.oneof_timestamp,
    unknownFields: ByteString = this.unknownFields
  ): AllTypes = AllTypes(proto3_kotlin_int32, proto3_kotlin_uint32, proto3_kotlin_sint32,
      proto3_kotlin_fixed32, proto3_kotlin_sfixed32, proto3_kotlin_int64, proto3_kotlin_uint64,
      proto3_kotlin_sint64, proto3_kotlin_fixed64, proto3_kotlin_sfixed64, proto3_kotlin_bool,
      proto3_kotlin_float, proto3_kotlin_double, proto3_kotlin_string, proto3_kotlin_bytes,
      nested_enum, nested_message, any, duration, struct, list_value, value, null_value, empty,
      timestamp, opt_int32, opt_uint32, opt_sint32, opt_fixed32, opt_sfixed32, opt_int64,
      opt_uint64, opt_sint64, opt_fixed64, opt_sfixed64, opt_bool, opt_float, opt_double,
      opt_string, opt_bytes, rep_int32, rep_uint32, rep_sint32, rep_fixed32, rep_sfixed32,
      rep_int64, rep_uint64, rep_sint64, rep_fixed64, rep_sfixed64, rep_bool, rep_float, rep_double,
      rep_string, rep_bytes, rep_nested_enum, rep_nested_message, rep_any, rep_duration, rep_struct,
      rep_list_value, rep_value, rep_null_value, rep_empty, rep_timestamp, pack_int32, pack_uint32,
      pack_sint32, pack_fixed32, pack_sfixed32, pack_int64, pack_uint64, pack_sint64, pack_fixed64,
      pack_sfixed64, pack_bool, pack_float, pack_double, pack_nested_enum, pack_null_value,
      map_int32_int32, map_string_string, map_string_message, map_string_enum, map_int32_any,
      map_int32_duration, map_int32_struct, map_int32_list_value, map_int32_value,
      map_int32_null_value, map_int32_empty, map_int32_timestamp, oneof_string, oneof_int32,
      oneof_nested_message, oneof_any, oneof_duration, oneof_struct, oneof_list_value, oneof_empty,
      oneof_timestamp, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<AllTypes> = object : ProtoAdapter<AllTypes>(
      FieldEncoding.LENGTH_DELIMITED, 
      AllTypes::class, 
      "type.googleapis.com/proto3.kotlin.AllTypes", 
      PROTO_3, 
      null
    ) {
      private val map_int32_int32Adapter: ProtoAdapter<Map<Int, Int>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INT32) }

      private val map_string_stringAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      private val map_string_messageAdapter: ProtoAdapter<Map<String, NestedMessage>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedMessage.ADAPTER) }

      private val map_string_enumAdapter: ProtoAdapter<Map<String, NestedEnum>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedEnum.ADAPTER) }

      private val map_int32_anyAdapter: ProtoAdapter<Map<Int, AnyMessage>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, AnyMessage.ADAPTER) }

      private val map_int32_durationAdapter: ProtoAdapter<Map<Int, Duration>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.DURATION) }

      private val map_int32_structAdapter: ProtoAdapter<Map<Int, Map<String, *>?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.STRUCT_MAP) }

      private val map_int32_list_valueAdapter: ProtoAdapter<Map<Int, List<*>?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.STRUCT_LIST) }

      private val map_int32_valueAdapter: ProtoAdapter<Map<Int, Any?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.STRUCT_VALUE) }

      private val map_int32_null_valueAdapter: ProtoAdapter<Map<Int, Nothing?>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.STRUCT_NULL) }

      private val map_int32_emptyAdapter: ProtoAdapter<Map<Int, Unit>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.EMPTY) }

      private val map_int32_timestampAdapter: ProtoAdapter<Map<Int, Instant>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, ProtoAdapter.INSTANT) }

      public override fun encodedSize(value: AllTypes): Int {
        var size = value.unknownFields.size
        if (value.proto3_kotlin_int32 != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1,
            value.proto3_kotlin_int32)
        if (value.proto3_kotlin_uint32 != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(2,
            value.proto3_kotlin_uint32)
        if (value.proto3_kotlin_sint32 != 0) size += ProtoAdapter.SINT32.encodedSizeWithTag(3,
            value.proto3_kotlin_sint32)
        if (value.proto3_kotlin_fixed32 != 0) size += ProtoAdapter.FIXED32.encodedSizeWithTag(4,
            value.proto3_kotlin_fixed32)
        if (value.proto3_kotlin_sfixed32 != 0) size += ProtoAdapter.SFIXED32.encodedSizeWithTag(5,
            value.proto3_kotlin_sfixed32)
        if (value.proto3_kotlin_int64 != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(6,
            value.proto3_kotlin_int64)
        if (value.proto3_kotlin_uint64 != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(7,
            value.proto3_kotlin_uint64)
        if (value.proto3_kotlin_sint64 != 0L) size += ProtoAdapter.SINT64.encodedSizeWithTag(8,
            value.proto3_kotlin_sint64)
        if (value.proto3_kotlin_fixed64 != 0L) size += ProtoAdapter.FIXED64.encodedSizeWithTag(9,
            value.proto3_kotlin_fixed64)
        if (value.proto3_kotlin_sfixed64 != 0L) size += ProtoAdapter.SFIXED64.encodedSizeWithTag(10,
            value.proto3_kotlin_sfixed64)
        if (value.proto3_kotlin_bool != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(11,
            value.proto3_kotlin_bool)
        if (value.proto3_kotlin_float != 0f) size += ProtoAdapter.FLOAT.encodedSizeWithTag(12,
            value.proto3_kotlin_float)
        if (value.proto3_kotlin_double != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(13,
            value.proto3_kotlin_double)
        if (value.proto3_kotlin_string != "") size += ProtoAdapter.STRING.encodedSizeWithTag(14,
            value.proto3_kotlin_string)
        if (value.proto3_kotlin_bytes != ByteString.EMPTY) size +=
            ProtoAdapter.BYTES.encodedSizeWithTag(15, value.proto3_kotlin_bytes)
        if (value.nested_enum != NestedEnum.UNKNOWN) size +=
            NestedEnum.ADAPTER.encodedSizeWithTag(16, value.nested_enum)
        if (value.nested_message != null) size += NestedMessage.ADAPTER.encodedSizeWithTag(17,
            value.nested_message)
        if (value.any != null) size += AnyMessage.ADAPTER.encodedSizeWithTag(18, value.any)
        if (value.duration != null) size += ProtoAdapter.DURATION.encodedSizeWithTag(19,
            value.duration)
        if (value.struct != null) size += ProtoAdapter.STRUCT_MAP.encodedSizeWithTag(20,
            value.struct)
        if (value.list_value != null) size += ProtoAdapter.STRUCT_LIST.encodedSizeWithTag(21,
            value.list_value)
        if (value.value != null) size += ProtoAdapter.STRUCT_VALUE.encodedSizeWithTag(22,
            value.value)
        if (value.null_value != null) size += ProtoAdapter.STRUCT_NULL.encodedSizeWithTag(23,
            value.null_value)
        if (value.empty != null) size += ProtoAdapter.EMPTY.encodedSizeWithTag(24, value.empty)
        if (value.timestamp != null) size += ProtoAdapter.INSTANT.encodedSizeWithTag(25,
            value.timestamp)
        size += ProtoAdapter.INT32.encodedSizeWithTag(101, value.opt_int32)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(102, value.opt_uint32)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(103, value.opt_sint32)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(104, value.opt_fixed32)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(105, value.opt_sfixed32)
        size += ProtoAdapter.INT64.encodedSizeWithTag(106, value.opt_int64)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(107, value.opt_uint64)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(108, value.opt_sint64)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(109, value.opt_fixed64)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(110, value.opt_sfixed64)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(111, value.opt_bool)
        size += ProtoAdapter.FLOAT.encodedSizeWithTag(112, value.opt_float)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(113, value.opt_double)
        size += ProtoAdapter.STRING.encodedSizeWithTag(114, value.opt_string)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(115, value.opt_bytes)
        size += ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(201, value.rep_int32)
        size += ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(202, value.rep_uint32)
        size += ProtoAdapter.SINT32.asRepeated().encodedSizeWithTag(203, value.rep_sint32)
        size += ProtoAdapter.FIXED32.asRepeated().encodedSizeWithTag(204, value.rep_fixed32)
        size += ProtoAdapter.SFIXED32.asRepeated().encodedSizeWithTag(205, value.rep_sfixed32)
        size += ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(206, value.rep_int64)
        size += ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(207, value.rep_uint64)
        size += ProtoAdapter.SINT64.asRepeated().encodedSizeWithTag(208, value.rep_sint64)
        size += ProtoAdapter.FIXED64.asRepeated().encodedSizeWithTag(209, value.rep_fixed64)
        size += ProtoAdapter.SFIXED64.asRepeated().encodedSizeWithTag(210, value.rep_sfixed64)
        size += ProtoAdapter.BOOL.asRepeated().encodedSizeWithTag(211, value.rep_bool)
        size += ProtoAdapter.FLOAT.asRepeated().encodedSizeWithTag(212, value.rep_float)
        size += ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(213, value.rep_double)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(214, value.rep_string)
        size += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(215, value.rep_bytes)
        size += NestedEnum.ADAPTER.asRepeated().encodedSizeWithTag(216, value.rep_nested_enum)
        size += NestedMessage.ADAPTER.asRepeated().encodedSizeWithTag(217, value.rep_nested_message)
        size += AnyMessage.ADAPTER.asRepeated().encodedSizeWithTag(218, value.rep_any)
        size += ProtoAdapter.DURATION.asRepeated().encodedSizeWithTag(219, value.rep_duration)
        size += ProtoAdapter.STRUCT_MAP.asRepeated().encodedSizeWithTag(220, value.rep_struct)
        size += ProtoAdapter.STRUCT_LIST.asRepeated().encodedSizeWithTag(221, value.rep_list_value)
        size += ProtoAdapter.STRUCT_VALUE.asRepeated().encodedSizeWithTag(222, value.rep_value)
        size += ProtoAdapter.STRUCT_NULL.asRepeated().encodedSizeWithTag(223, value.rep_null_value)
        size += ProtoAdapter.EMPTY.asRepeated().encodedSizeWithTag(224, value.rep_empty)
        size += ProtoAdapter.INSTANT.asRepeated().encodedSizeWithTag(225, value.rep_timestamp)
        size += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(301, value.pack_int32)
        size += ProtoAdapter.UINT32.asPacked().encodedSizeWithTag(302, value.pack_uint32)
        size += ProtoAdapter.SINT32.asPacked().encodedSizeWithTag(303, value.pack_sint32)
        size += ProtoAdapter.FIXED32.asPacked().encodedSizeWithTag(304, value.pack_fixed32)
        size += ProtoAdapter.SFIXED32.asPacked().encodedSizeWithTag(305, value.pack_sfixed32)
        size += ProtoAdapter.INT64.asPacked().encodedSizeWithTag(306, value.pack_int64)
        size += ProtoAdapter.UINT64.asPacked().encodedSizeWithTag(307, value.pack_uint64)
        size += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(308, value.pack_sint64)
        size += ProtoAdapter.FIXED64.asPacked().encodedSizeWithTag(309, value.pack_fixed64)
        size += ProtoAdapter.SFIXED64.asPacked().encodedSizeWithTag(310, value.pack_sfixed64)
        size += ProtoAdapter.BOOL.asPacked().encodedSizeWithTag(311, value.pack_bool)
        size += ProtoAdapter.FLOAT.asPacked().encodedSizeWithTag(312, value.pack_float)
        size += ProtoAdapter.DOUBLE.asPacked().encodedSizeWithTag(313, value.pack_double)
        size += NestedEnum.ADAPTER.asPacked().encodedSizeWithTag(316, value.pack_nested_enum)
        size += ProtoAdapter.STRUCT_NULL.asPacked().encodedSizeWithTag(323, value.pack_null_value)
        size += map_int32_int32Adapter.encodedSizeWithTag(501, value.map_int32_int32)
        size += map_string_stringAdapter.encodedSizeWithTag(502, value.map_string_string)
        size += map_string_messageAdapter.encodedSizeWithTag(503, value.map_string_message)
        size += map_string_enumAdapter.encodedSizeWithTag(504, value.map_string_enum)
        size += map_int32_anyAdapter.encodedSizeWithTag(518, value.map_int32_any)
        size += map_int32_durationAdapter.encodedSizeWithTag(519, value.map_int32_duration)
        size += map_int32_structAdapter.encodedSizeWithTag(520, value.map_int32_struct)
        size += map_int32_list_valueAdapter.encodedSizeWithTag(521, value.map_int32_list_value)
        size += map_int32_valueAdapter.encodedSizeWithTag(522, value.map_int32_value)
        size += map_int32_null_valueAdapter.encodedSizeWithTag(523, value.map_int32_null_value)
        size += map_int32_emptyAdapter.encodedSizeWithTag(524, value.map_int32_empty)
        size += map_int32_timestampAdapter.encodedSizeWithTag(525, value.map_int32_timestamp)
        size += ProtoAdapter.STRING.encodedSizeWithTag(601, value.oneof_string)
        size += ProtoAdapter.INT32.encodedSizeWithTag(602, value.oneof_int32)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(603, value.oneof_nested_message)
        size += AnyMessage.ADAPTER.encodedSizeWithTag(618, value.oneof_any)
        size += ProtoAdapter.DURATION.encodedSizeWithTag(619, value.oneof_duration)
        size += ProtoAdapter.STRUCT_MAP.encodedSizeWithTag(620, value.oneof_struct)
        size += ProtoAdapter.STRUCT_LIST.encodedSizeWithTag(621, value.oneof_list_value)
        size += ProtoAdapter.EMPTY.encodedSizeWithTag(624, value.oneof_empty)
        size += ProtoAdapter.INSTANT.encodedSizeWithTag(625, value.oneof_timestamp)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: AllTypes): Unit {
        if (value.proto3_kotlin_int32 != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1,
            value.proto3_kotlin_int32)
        if (value.proto3_kotlin_uint32 != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 2,
            value.proto3_kotlin_uint32)
        if (value.proto3_kotlin_sint32 != 0) ProtoAdapter.SINT32.encodeWithTag(writer, 3,
            value.proto3_kotlin_sint32)
        if (value.proto3_kotlin_fixed32 != 0) ProtoAdapter.FIXED32.encodeWithTag(writer, 4,
            value.proto3_kotlin_fixed32)
        if (value.proto3_kotlin_sfixed32 != 0) ProtoAdapter.SFIXED32.encodeWithTag(writer, 5,
            value.proto3_kotlin_sfixed32)
        if (value.proto3_kotlin_int64 != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6,
            value.proto3_kotlin_int64)
        if (value.proto3_kotlin_uint64 != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 7,
            value.proto3_kotlin_uint64)
        if (value.proto3_kotlin_sint64 != 0L) ProtoAdapter.SINT64.encodeWithTag(writer, 8,
            value.proto3_kotlin_sint64)
        if (value.proto3_kotlin_fixed64 != 0L) ProtoAdapter.FIXED64.encodeWithTag(writer, 9,
            value.proto3_kotlin_fixed64)
        if (value.proto3_kotlin_sfixed64 != 0L) ProtoAdapter.SFIXED64.encodeWithTag(writer, 10,
            value.proto3_kotlin_sfixed64)
        if (value.proto3_kotlin_bool != false) ProtoAdapter.BOOL.encodeWithTag(writer, 11,
            value.proto3_kotlin_bool)
        if (value.proto3_kotlin_float != 0f) ProtoAdapter.FLOAT.encodeWithTag(writer, 12,
            value.proto3_kotlin_float)
        if (value.proto3_kotlin_double != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 13,
            value.proto3_kotlin_double)
        if (value.proto3_kotlin_string != "") ProtoAdapter.STRING.encodeWithTag(writer, 14,
            value.proto3_kotlin_string)
        if (value.proto3_kotlin_bytes != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer,
            15, value.proto3_kotlin_bytes)
        if (value.nested_enum != NestedEnum.UNKNOWN) NestedEnum.ADAPTER.encodeWithTag(writer, 16,
            value.nested_enum)
        if (value.nested_message != null) NestedMessage.ADAPTER.encodeWithTag(writer, 17,
            value.nested_message)
        if (value.any != null) AnyMessage.ADAPTER.encodeWithTag(writer, 18, value.any)
        if (value.duration != null) ProtoAdapter.DURATION.encodeWithTag(writer, 19, value.duration)
        if (value.struct != null) ProtoAdapter.STRUCT_MAP.encodeWithTag(writer, 20, value.struct)
        if (value.list_value != null) ProtoAdapter.STRUCT_LIST.encodeWithTag(writer, 21,
            value.list_value)
        if (value.value != null) ProtoAdapter.STRUCT_VALUE.encodeWithTag(writer, 22, value.value)
        if (value.null_value != null) ProtoAdapter.STRUCT_NULL.encodeWithTag(writer, 23,
            value.null_value)
        if (value.empty != null) ProtoAdapter.EMPTY.encodeWithTag(writer, 24, value.empty)
        if (value.timestamp != null) ProtoAdapter.INSTANT.encodeWithTag(writer, 25, value.timestamp)
        ProtoAdapter.INT32.encodeWithTag(writer, 101, value.opt_int32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 102, value.opt_uint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 103, value.opt_sint32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 104, value.opt_fixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 105, value.opt_sfixed32)
        ProtoAdapter.INT64.encodeWithTag(writer, 106, value.opt_int64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 107, value.opt_uint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 108, value.opt_sint64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 109, value.opt_fixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 110, value.opt_sfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 111, value.opt_bool)
        ProtoAdapter.FLOAT.encodeWithTag(writer, 112, value.opt_float)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 113, value.opt_double)
        ProtoAdapter.STRING.encodeWithTag(writer, 114, value.opt_string)
        ProtoAdapter.BYTES.encodeWithTag(writer, 115, value.opt_bytes)
        ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 201, value.rep_int32)
        ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 202, value.rep_uint32)
        ProtoAdapter.SINT32.asRepeated().encodeWithTag(writer, 203, value.rep_sint32)
        ProtoAdapter.FIXED32.asRepeated().encodeWithTag(writer, 204, value.rep_fixed32)
        ProtoAdapter.SFIXED32.asRepeated().encodeWithTag(writer, 205, value.rep_sfixed32)
        ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 206, value.rep_int64)
        ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 207, value.rep_uint64)
        ProtoAdapter.SINT64.asRepeated().encodeWithTag(writer, 208, value.rep_sint64)
        ProtoAdapter.FIXED64.asRepeated().encodeWithTag(writer, 209, value.rep_fixed64)
        ProtoAdapter.SFIXED64.asRepeated().encodeWithTag(writer, 210, value.rep_sfixed64)
        ProtoAdapter.BOOL.asRepeated().encodeWithTag(writer, 211, value.rep_bool)
        ProtoAdapter.FLOAT.asRepeated().encodeWithTag(writer, 212, value.rep_float)
        ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 213, value.rep_double)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 214, value.rep_string)
        ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 215, value.rep_bytes)
        NestedEnum.ADAPTER.asRepeated().encodeWithTag(writer, 216, value.rep_nested_enum)
        NestedMessage.ADAPTER.asRepeated().encodeWithTag(writer, 217, value.rep_nested_message)
        AnyMessage.ADAPTER.asRepeated().encodeWithTag(writer, 218, value.rep_any)
        ProtoAdapter.DURATION.asRepeated().encodeWithTag(writer, 219, value.rep_duration)
        ProtoAdapter.STRUCT_MAP.asRepeated().encodeWithTag(writer, 220, value.rep_struct)
        ProtoAdapter.STRUCT_LIST.asRepeated().encodeWithTag(writer, 221, value.rep_list_value)
        ProtoAdapter.STRUCT_VALUE.asRepeated().encodeWithTag(writer, 222, value.rep_value)
        ProtoAdapter.STRUCT_NULL.asRepeated().encodeWithTag(writer, 223, value.rep_null_value)
        ProtoAdapter.EMPTY.asRepeated().encodeWithTag(writer, 224, value.rep_empty)
        ProtoAdapter.INSTANT.asRepeated().encodeWithTag(writer, 225, value.rep_timestamp)
        ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 301, value.pack_int32)
        ProtoAdapter.UINT32.asPacked().encodeWithTag(writer, 302, value.pack_uint32)
        ProtoAdapter.SINT32.asPacked().encodeWithTag(writer, 303, value.pack_sint32)
        ProtoAdapter.FIXED32.asPacked().encodeWithTag(writer, 304, value.pack_fixed32)
        ProtoAdapter.SFIXED32.asPacked().encodeWithTag(writer, 305, value.pack_sfixed32)
        ProtoAdapter.INT64.asPacked().encodeWithTag(writer, 306, value.pack_int64)
        ProtoAdapter.UINT64.asPacked().encodeWithTag(writer, 307, value.pack_uint64)
        ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 308, value.pack_sint64)
        ProtoAdapter.FIXED64.asPacked().encodeWithTag(writer, 309, value.pack_fixed64)
        ProtoAdapter.SFIXED64.asPacked().encodeWithTag(writer, 310, value.pack_sfixed64)
        ProtoAdapter.BOOL.asPacked().encodeWithTag(writer, 311, value.pack_bool)
        ProtoAdapter.FLOAT.asPacked().encodeWithTag(writer, 312, value.pack_float)
        ProtoAdapter.DOUBLE.asPacked().encodeWithTag(writer, 313, value.pack_double)
        NestedEnum.ADAPTER.asPacked().encodeWithTag(writer, 316, value.pack_nested_enum)
        ProtoAdapter.STRUCT_NULL.asPacked().encodeWithTag(writer, 323, value.pack_null_value)
        map_int32_int32Adapter.encodeWithTag(writer, 501, value.map_int32_int32)
        map_string_stringAdapter.encodeWithTag(writer, 502, value.map_string_string)
        map_string_messageAdapter.encodeWithTag(writer, 503, value.map_string_message)
        map_string_enumAdapter.encodeWithTag(writer, 504, value.map_string_enum)
        map_int32_anyAdapter.encodeWithTag(writer, 518, value.map_int32_any)
        map_int32_durationAdapter.encodeWithTag(writer, 519, value.map_int32_duration)
        map_int32_structAdapter.encodeWithTag(writer, 520, value.map_int32_struct)
        map_int32_list_valueAdapter.encodeWithTag(writer, 521, value.map_int32_list_value)
        map_int32_valueAdapter.encodeWithTag(writer, 522, value.map_int32_value)
        map_int32_null_valueAdapter.encodeWithTag(writer, 523, value.map_int32_null_value)
        map_int32_emptyAdapter.encodeWithTag(writer, 524, value.map_int32_empty)
        map_int32_timestampAdapter.encodeWithTag(writer, 525, value.map_int32_timestamp)
        ProtoAdapter.STRING.encodeWithTag(writer, 601, value.oneof_string)
        ProtoAdapter.INT32.encodeWithTag(writer, 602, value.oneof_int32)
        NestedMessage.ADAPTER.encodeWithTag(writer, 603, value.oneof_nested_message)
        AnyMessage.ADAPTER.encodeWithTag(writer, 618, value.oneof_any)
        ProtoAdapter.DURATION.encodeWithTag(writer, 619, value.oneof_duration)
        ProtoAdapter.STRUCT_MAP.encodeWithTag(writer, 620, value.oneof_struct)
        ProtoAdapter.STRUCT_LIST.encodeWithTag(writer, 621, value.oneof_list_value)
        ProtoAdapter.EMPTY.encodeWithTag(writer, 624, value.oneof_empty)
        ProtoAdapter.INSTANT.encodeWithTag(writer, 625, value.oneof_timestamp)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): AllTypes {
        var proto3_kotlin_int32: Int = 0
        var proto3_kotlin_uint32: Int = 0
        var proto3_kotlin_sint32: Int = 0
        var proto3_kotlin_fixed32: Int = 0
        var proto3_kotlin_sfixed32: Int = 0
        var proto3_kotlin_int64: Long = 0L
        var proto3_kotlin_uint64: Long = 0L
        var proto3_kotlin_sint64: Long = 0L
        var proto3_kotlin_fixed64: Long = 0L
        var proto3_kotlin_sfixed64: Long = 0L
        var proto3_kotlin_bool: Boolean = false
        var proto3_kotlin_float: Float = 0f
        var proto3_kotlin_double: Double = 0.0
        var proto3_kotlin_string: String = ""
        var proto3_kotlin_bytes: ByteString = ByteString.EMPTY
        var nested_enum: NestedEnum = NestedEnum.UNKNOWN
        var nested_message: NestedMessage? = null
        var any: AnyMessage? = null
        var duration: Duration? = null
        var struct: Map<String, *>? = null
        var list_value: List<*>? = null
        var value: Any? = null
        var null_value: Nothing? = null
        var empty: Unit? = null
        var timestamp: Instant? = null
        var opt_int32: Int? = null
        var opt_uint32: Int? = null
        var opt_sint32: Int? = null
        var opt_fixed32: Int? = null
        var opt_sfixed32: Int? = null
        var opt_int64: Long? = null
        var opt_uint64: Long? = null
        var opt_sint64: Long? = null
        var opt_fixed64: Long? = null
        var opt_sfixed64: Long? = null
        var opt_bool: Boolean? = null
        var opt_float: Float? = null
        var opt_double: Double? = null
        var opt_string: String? = null
        var opt_bytes: ByteString? = null
        val rep_int32 = mutableListOf<Int>()
        val rep_uint32 = mutableListOf<Int>()
        val rep_sint32 = mutableListOf<Int>()
        val rep_fixed32 = mutableListOf<Int>()
        val rep_sfixed32 = mutableListOf<Int>()
        val rep_int64 = mutableListOf<Long>()
        val rep_uint64 = mutableListOf<Long>()
        val rep_sint64 = mutableListOf<Long>()
        val rep_fixed64 = mutableListOf<Long>()
        val rep_sfixed64 = mutableListOf<Long>()
        val rep_bool = mutableListOf<Boolean>()
        val rep_float = mutableListOf<Float>()
        val rep_double = mutableListOf<Double>()
        val rep_string = mutableListOf<String>()
        val rep_bytes = mutableListOf<ByteString>()
        val rep_nested_enum = mutableListOf<NestedEnum>()
        val rep_nested_message = mutableListOf<NestedMessage>()
        val rep_any = mutableListOf<AnyMessage>()
        val rep_duration = mutableListOf<Duration>()
        val rep_struct = mutableListOf<Map<String, *>?>()
        val rep_list_value = mutableListOf<List<*>?>()
        val rep_value = mutableListOf<Any?>()
        val rep_null_value = mutableListOf<Nothing?>()
        val rep_empty = mutableListOf<Unit>()
        val rep_timestamp = mutableListOf<Instant>()
        val pack_int32 = mutableListOf<Int>()
        val pack_uint32 = mutableListOf<Int>()
        val pack_sint32 = mutableListOf<Int>()
        val pack_fixed32 = mutableListOf<Int>()
        val pack_sfixed32 = mutableListOf<Int>()
        val pack_int64 = mutableListOf<Long>()
        val pack_uint64 = mutableListOf<Long>()
        val pack_sint64 = mutableListOf<Long>()
        val pack_fixed64 = mutableListOf<Long>()
        val pack_sfixed64 = mutableListOf<Long>()
        val pack_bool = mutableListOf<Boolean>()
        val pack_float = mutableListOf<Float>()
        val pack_double = mutableListOf<Double>()
        val pack_nested_enum = mutableListOf<NestedEnum>()
        val pack_null_value = mutableListOf<Nothing?>()
        val map_int32_int32 = mutableMapOf<Int, Int>()
        val map_string_string = mutableMapOf<String, String>()
        val map_string_message = mutableMapOf<String, NestedMessage>()
        val map_string_enum = mutableMapOf<String, NestedEnum>()
        val map_int32_any = mutableMapOf<Int, AnyMessage>()
        val map_int32_duration = mutableMapOf<Int, Duration>()
        val map_int32_struct = mutableMapOf<Int, Map<String, *>?>()
        val map_int32_list_value = mutableMapOf<Int, List<*>?>()
        val map_int32_value = mutableMapOf<Int, Any?>()
        val map_int32_null_value = mutableMapOf<Int, Nothing?>()
        val map_int32_empty = mutableMapOf<Int, Unit>()
        val map_int32_timestamp = mutableMapOf<Int, Instant>()
        var oneof_string: String? = null
        var oneof_int32: Int? = null
        var oneof_nested_message: NestedMessage? = null
        var oneof_any: AnyMessage? = null
        var oneof_duration: Duration? = null
        var oneof_struct: Map<String, *>? = null
        var oneof_list_value: List<*>? = null
        var oneof_empty: Unit? = null
        var oneof_timestamp: Instant? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> proto3_kotlin_int32 = ProtoAdapter.INT32.decode(reader)
            2 -> proto3_kotlin_uint32 = ProtoAdapter.UINT32.decode(reader)
            3 -> proto3_kotlin_sint32 = ProtoAdapter.SINT32.decode(reader)
            4 -> proto3_kotlin_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            5 -> proto3_kotlin_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            6 -> proto3_kotlin_int64 = ProtoAdapter.INT64.decode(reader)
            7 -> proto3_kotlin_uint64 = ProtoAdapter.UINT64.decode(reader)
            8 -> proto3_kotlin_sint64 = ProtoAdapter.SINT64.decode(reader)
            9 -> proto3_kotlin_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            10 -> proto3_kotlin_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            11 -> proto3_kotlin_bool = ProtoAdapter.BOOL.decode(reader)
            12 -> proto3_kotlin_float = ProtoAdapter.FLOAT.decode(reader)
            13 -> proto3_kotlin_double = ProtoAdapter.DOUBLE.decode(reader)
            14 -> proto3_kotlin_string = ProtoAdapter.STRING.decode(reader)
            15 -> proto3_kotlin_bytes = ProtoAdapter.BYTES.decode(reader)
            16 -> try {
              nested_enum = NestedEnum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            17 -> nested_message = NestedMessage.ADAPTER.decode(reader)
            18 -> any = AnyMessage.ADAPTER.decode(reader)
            19 -> duration = ProtoAdapter.DURATION.decode(reader)
            20 -> struct = ProtoAdapter.STRUCT_MAP.decode(reader)
            21 -> list_value = ProtoAdapter.STRUCT_LIST.decode(reader)
            22 -> value = ProtoAdapter.STRUCT_VALUE.decode(reader)
            23 -> try {
              null_value = ProtoAdapter.STRUCT_NULL.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            24 -> empty = ProtoAdapter.EMPTY.decode(reader)
            25 -> timestamp = ProtoAdapter.INSTANT.decode(reader)
            101 -> opt_int32 = ProtoAdapter.INT32.decode(reader)
            102 -> opt_uint32 = ProtoAdapter.UINT32.decode(reader)
            103 -> opt_sint32 = ProtoAdapter.SINT32.decode(reader)
            104 -> opt_fixed32 = ProtoAdapter.FIXED32.decode(reader)
            105 -> opt_sfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            106 -> opt_int64 = ProtoAdapter.INT64.decode(reader)
            107 -> opt_uint64 = ProtoAdapter.UINT64.decode(reader)
            108 -> opt_sint64 = ProtoAdapter.SINT64.decode(reader)
            109 -> opt_fixed64 = ProtoAdapter.FIXED64.decode(reader)
            110 -> opt_sfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            111 -> opt_bool = ProtoAdapter.BOOL.decode(reader)
            112 -> opt_float = ProtoAdapter.FLOAT.decode(reader)
            113 -> opt_double = ProtoAdapter.DOUBLE.decode(reader)
            114 -> opt_string = ProtoAdapter.STRING.decode(reader)
            115 -> opt_bytes = ProtoAdapter.BYTES.decode(reader)
            201 -> rep_int32.add(ProtoAdapter.INT32.decode(reader))
            202 -> rep_uint32.add(ProtoAdapter.UINT32.decode(reader))
            203 -> rep_sint32.add(ProtoAdapter.SINT32.decode(reader))
            204 -> rep_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            205 -> rep_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            206 -> rep_int64.add(ProtoAdapter.INT64.decode(reader))
            207 -> rep_uint64.add(ProtoAdapter.UINT64.decode(reader))
            208 -> rep_sint64.add(ProtoAdapter.SINT64.decode(reader))
            209 -> rep_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            210 -> rep_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            211 -> rep_bool.add(ProtoAdapter.BOOL.decode(reader))
            212 -> rep_float.add(ProtoAdapter.FLOAT.decode(reader))
            213 -> rep_double.add(ProtoAdapter.DOUBLE.decode(reader))
            214 -> rep_string.add(ProtoAdapter.STRING.decode(reader))
            215 -> rep_bytes.add(ProtoAdapter.BYTES.decode(reader))
            216 -> try {
              rep_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            217 -> rep_nested_message.add(NestedMessage.ADAPTER.decode(reader))
            218 -> rep_any.add(AnyMessage.ADAPTER.decode(reader))
            219 -> rep_duration.add(ProtoAdapter.DURATION.decode(reader))
            220 -> rep_struct.add(ProtoAdapter.STRUCT_MAP.decode(reader))
            221 -> rep_list_value.add(ProtoAdapter.STRUCT_LIST.decode(reader))
            222 -> rep_value.add(ProtoAdapter.STRUCT_VALUE.decode(reader))
            223 -> try {
              rep_null_value.add(ProtoAdapter.STRUCT_NULL.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            224 -> rep_empty.add(ProtoAdapter.EMPTY.decode(reader))
            225 -> rep_timestamp.add(ProtoAdapter.INSTANT.decode(reader))
            301 -> pack_int32.add(ProtoAdapter.INT32.decode(reader))
            302 -> pack_uint32.add(ProtoAdapter.UINT32.decode(reader))
            303 -> pack_sint32.add(ProtoAdapter.SINT32.decode(reader))
            304 -> pack_fixed32.add(ProtoAdapter.FIXED32.decode(reader))
            305 -> pack_sfixed32.add(ProtoAdapter.SFIXED32.decode(reader))
            306 -> pack_int64.add(ProtoAdapter.INT64.decode(reader))
            307 -> pack_uint64.add(ProtoAdapter.UINT64.decode(reader))
            308 -> pack_sint64.add(ProtoAdapter.SINT64.decode(reader))
            309 -> pack_fixed64.add(ProtoAdapter.FIXED64.decode(reader))
            310 -> pack_sfixed64.add(ProtoAdapter.SFIXED64.decode(reader))
            311 -> pack_bool.add(ProtoAdapter.BOOL.decode(reader))
            312 -> pack_float.add(ProtoAdapter.FLOAT.decode(reader))
            313 -> pack_double.add(ProtoAdapter.DOUBLE.decode(reader))
            316 -> try {
              pack_nested_enum.add(NestedEnum.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            323 -> try {
              pack_null_value.add(ProtoAdapter.STRUCT_NULL.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            501 -> map_int32_int32.putAll(map_int32_int32Adapter.decode(reader))
            502 -> map_string_string.putAll(map_string_stringAdapter.decode(reader))
            503 -> map_string_message.putAll(map_string_messageAdapter.decode(reader))
            504 -> map_string_enum.putAll(map_string_enumAdapter.decode(reader))
            518 -> map_int32_any.putAll(map_int32_anyAdapter.decode(reader))
            519 -> map_int32_duration.putAll(map_int32_durationAdapter.decode(reader))
            520 -> map_int32_struct.putAll(map_int32_structAdapter.decode(reader))
            521 -> map_int32_list_value.putAll(map_int32_list_valueAdapter.decode(reader))
            522 -> map_int32_value.putAll(map_int32_valueAdapter.decode(reader))
            523 -> map_int32_null_value.putAll(map_int32_null_valueAdapter.decode(reader))
            524 -> map_int32_empty.putAll(map_int32_emptyAdapter.decode(reader))
            525 -> map_int32_timestamp.putAll(map_int32_timestampAdapter.decode(reader))
            601 -> oneof_string = ProtoAdapter.STRING.decode(reader)
            602 -> oneof_int32 = ProtoAdapter.INT32.decode(reader)
            603 -> oneof_nested_message = NestedMessage.ADAPTER.decode(reader)
            618 -> oneof_any = AnyMessage.ADAPTER.decode(reader)
            619 -> oneof_duration = ProtoAdapter.DURATION.decode(reader)
            620 -> oneof_struct = ProtoAdapter.STRUCT_MAP.decode(reader)
            621 -> oneof_list_value = ProtoAdapter.STRUCT_LIST.decode(reader)
            624 -> oneof_empty = ProtoAdapter.EMPTY.decode(reader)
            625 -> oneof_timestamp = ProtoAdapter.INSTANT.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AllTypes(
          proto3_kotlin_int32 = proto3_kotlin_int32,
          proto3_kotlin_uint32 = proto3_kotlin_uint32,
          proto3_kotlin_sint32 = proto3_kotlin_sint32,
          proto3_kotlin_fixed32 = proto3_kotlin_fixed32,
          proto3_kotlin_sfixed32 = proto3_kotlin_sfixed32,
          proto3_kotlin_int64 = proto3_kotlin_int64,
          proto3_kotlin_uint64 = proto3_kotlin_uint64,
          proto3_kotlin_sint64 = proto3_kotlin_sint64,
          proto3_kotlin_fixed64 = proto3_kotlin_fixed64,
          proto3_kotlin_sfixed64 = proto3_kotlin_sfixed64,
          proto3_kotlin_bool = proto3_kotlin_bool,
          proto3_kotlin_float = proto3_kotlin_float,
          proto3_kotlin_double = proto3_kotlin_double,
          proto3_kotlin_string = proto3_kotlin_string,
          proto3_kotlin_bytes = proto3_kotlin_bytes,
          nested_enum = nested_enum,
          nested_message = nested_message,
          any = any,
          duration = duration,
          struct = struct,
          list_value = list_value,
          value = value,
          null_value = null_value,
          empty = empty,
          timestamp = timestamp,
          opt_int32 = opt_int32,
          opt_uint32 = opt_uint32,
          opt_sint32 = opt_sint32,
          opt_fixed32 = opt_fixed32,
          opt_sfixed32 = opt_sfixed32,
          opt_int64 = opt_int64,
          opt_uint64 = opt_uint64,
          opt_sint64 = opt_sint64,
          opt_fixed64 = opt_fixed64,
          opt_sfixed64 = opt_sfixed64,
          opt_bool = opt_bool,
          opt_float = opt_float,
          opt_double = opt_double,
          opt_string = opt_string,
          opt_bytes = opt_bytes,
          rep_int32 = rep_int32,
          rep_uint32 = rep_uint32,
          rep_sint32 = rep_sint32,
          rep_fixed32 = rep_fixed32,
          rep_sfixed32 = rep_sfixed32,
          rep_int64 = rep_int64,
          rep_uint64 = rep_uint64,
          rep_sint64 = rep_sint64,
          rep_fixed64 = rep_fixed64,
          rep_sfixed64 = rep_sfixed64,
          rep_bool = rep_bool,
          rep_float = rep_float,
          rep_double = rep_double,
          rep_string = rep_string,
          rep_bytes = rep_bytes,
          rep_nested_enum = rep_nested_enum,
          rep_nested_message = rep_nested_message,
          rep_any = rep_any,
          rep_duration = rep_duration,
          rep_struct = rep_struct,
          rep_list_value = rep_list_value,
          rep_value = rep_value,
          rep_null_value = rep_null_value,
          rep_empty = rep_empty,
          rep_timestamp = rep_timestamp,
          pack_int32 = pack_int32,
          pack_uint32 = pack_uint32,
          pack_sint32 = pack_sint32,
          pack_fixed32 = pack_fixed32,
          pack_sfixed32 = pack_sfixed32,
          pack_int64 = pack_int64,
          pack_uint64 = pack_uint64,
          pack_sint64 = pack_sint64,
          pack_fixed64 = pack_fixed64,
          pack_sfixed64 = pack_sfixed64,
          pack_bool = pack_bool,
          pack_float = pack_float,
          pack_double = pack_double,
          pack_nested_enum = pack_nested_enum,
          pack_null_value = pack_null_value,
          map_int32_int32 = map_int32_int32,
          map_string_string = map_string_string,
          map_string_message = map_string_message,
          map_string_enum = map_string_enum,
          map_int32_any = map_int32_any,
          map_int32_duration = map_int32_duration,
          map_int32_struct = map_int32_struct,
          map_int32_list_value = map_int32_list_value,
          map_int32_value = map_int32_value,
          map_int32_null_value = map_int32_null_value,
          map_int32_empty = map_int32_empty,
          map_int32_timestamp = map_int32_timestamp,
          oneof_string = oneof_string,
          oneof_int32 = oneof_int32,
          oneof_nested_message = oneof_nested_message,
          oneof_any = oneof_any,
          oneof_duration = oneof_duration,
          oneof_struct = oneof_struct,
          oneof_list_value = oneof_list_value,
          oneof_empty = oneof_empty,
          oneof_timestamp = oneof_timestamp,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: AllTypes): AllTypes = value.copy(
        nested_message = value.nested_message?.let(NestedMessage.ADAPTER::redact),
        any = value.any?.let(AnyMessage.ADAPTER::redact),
        duration = value.duration?.let(ProtoAdapter.DURATION::redact),
        struct = value.struct?.let(ProtoAdapter.STRUCT_MAP::redact),
        list_value = value.list_value?.let(ProtoAdapter.STRUCT_LIST::redact),
        value = value.value?.let(ProtoAdapter.STRUCT_VALUE::redact),
        empty = value.empty?.let(ProtoAdapter.EMPTY::redact),
        timestamp = value.timestamp?.let(ProtoAdapter.INSTANT::redact),
        rep_nested_message = value.rep_nested_message.redactElements(NestedMessage.ADAPTER),
        rep_any = value.rep_any.redactElements(AnyMessage.ADAPTER),
        rep_duration = value.rep_duration.redactElements(ProtoAdapter.DURATION),
        rep_struct = value.rep_struct.redactElements(ProtoAdapter.STRUCT_MAP),
        rep_list_value = value.rep_list_value.redactElements(ProtoAdapter.STRUCT_LIST),
        rep_value = value.rep_value.redactElements(ProtoAdapter.STRUCT_VALUE),
        rep_empty = value.rep_empty.redactElements(ProtoAdapter.EMPTY),
        rep_timestamp = value.rep_timestamp.redactElements(ProtoAdapter.INSTANT),
        map_string_message = value.map_string_message.redactElements(NestedMessage.ADAPTER),
        map_int32_any = value.map_int32_any.redactElements(AnyMessage.ADAPTER),
        map_int32_duration = value.map_int32_duration.redactElements(ProtoAdapter.DURATION),
        map_int32_struct = value.map_int32_struct.redactElements(ProtoAdapter.STRUCT_MAP),
        map_int32_list_value = value.map_int32_list_value.redactElements(ProtoAdapter.STRUCT_LIST),
        map_int32_value = value.map_int32_value.redactElements(ProtoAdapter.STRUCT_VALUE),
        map_int32_empty = value.map_int32_empty.redactElements(ProtoAdapter.EMPTY),
        map_int32_timestamp = value.map_int32_timestamp.redactElements(ProtoAdapter.INSTANT),
        oneof_nested_message = value.oneof_nested_message?.let(NestedMessage.ADAPTER::redact),
        oneof_any = value.oneof_any?.let(AnyMessage.ADAPTER::redact),
        oneof_duration = value.oneof_duration?.let(ProtoAdapter.DURATION::redact),
        oneof_struct = value.oneof_struct?.let(ProtoAdapter.STRUCT_MAP::redact),
        oneof_list_value = value.oneof_list_value?.let(ProtoAdapter.STRUCT_LIST::redact),
        oneof_empty = value.oneof_empty?.let(ProtoAdapter.EMPTY::redact),
        oneof_timestamp = value.oneof_timestamp?.let(ProtoAdapter.INSTANT::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public enum class NestedEnum(
    public override val value: Int
  ) : WireEnum {
    UNKNOWN(0),
    A(1),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<NestedEnum> = object : EnumAdapter<NestedEnum>(
        NestedEnum::class, 
        PROTO_3, 
        NestedEnum.UNKNOWN
      ) {
        public override fun fromValue(value: Int): NestedEnum? = NestedEnum.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(value: Int): NestedEnum? = when (value) {
        0 -> UNKNOWN
        1 -> A
        else -> null
      }
    }
  }

  public class NestedMessage(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.OMIT_IDENTITY
    )
    public val a: Int = 0,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<NestedMessage, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    public override fun newBuilder(): Nothing = throw AssertionError()

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is NestedMessage) return false
      if (unknownFields != other.unknownFields) return false
      if (a != other.a) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + a.hashCode()
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      result += """a=$a"""
      return result.joinToString(prefix = "NestedMessage{", separator = ", ", postfix = "}")
    }

    public fun copy(a: Int = this.a, unknownFields: ByteString = this.unknownFields): NestedMessage
        = NestedMessage(a, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<NestedMessage> = object : ProtoAdapter<NestedMessage>(
        FieldEncoding.LENGTH_DELIMITED, 
        NestedMessage::class, 
        "type.googleapis.com/proto3.kotlin.AllTypes.NestedMessage", 
        PROTO_3, 
        null
      ) {
        public override fun encodedSize(value: NestedMessage): Int {
          var size = value.unknownFields.size
          if (value.a != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.a)
          return size
        }

        public override fun encode(writer: ProtoWriter, value: NestedMessage): Unit {
          if (value.a != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.a)
          writer.writeBytes(value.unknownFields)
        }

        public override fun decode(reader: ProtoReader): NestedMessage {
          var a: Int = 0
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> a = ProtoAdapter.INT32.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return NestedMessage(
            a = a,
            unknownFields = unknownFields
          )
        }

        public override fun redact(value: NestedMessage): NestedMessage = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
