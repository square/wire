// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.serialization.cdn.CdnResource in cdn_resource.proto
@file:UseSerializers(ByteStringSerializer::class)

package com.squareup.wire.protos.kotlin.serialization.cdn

import com.squareup.wire.ByteStringSerializer
import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.UseSerializers
import okio.ByteString

@Serializable
public class CdnResource(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val url: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "byteCount"
  )
  @SerialName("byteCount")
  public val byte_count: Long = 0L,
  @field:WireField(
    tag = 3,
    adapter =
        "com.squareup.wire.protos.kotlin.serialization.cdn.CdnResource${'$'}ContentType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "contentType"
  )
  @SerialName("contentType")
  public val content_type: ContentType = ContentType.BINARY,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "data"
  )
  @SerialName("data")
  public val data_: ByteString = ByteString.EMPTY,
  public val unknownFields: ByteString = ByteString.EMPTY
) {
  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CdnResource) return false
    if (unknownFields != other.unknownFields) return false
    if (url != other.url) return false
    if (byte_count != other.byte_count) return false
    if (content_type != other.content_type) return false
    if (data_ != other.data_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = 0
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + url.hashCode()
      result = result * 37 + byte_count.hashCode()
      result = result * 37 + content_type.hashCode()
      result = result * 37 + data_.hashCode()
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """url=${sanitize(url)}"""
    result += """byte_count=$byte_count"""
    result += """content_type=$content_type"""
    result += """data_=$data_"""
    return result.joinToString(prefix = "CdnResource{", separator = ", ", postfix = "}")
  }

  public fun copy(
    url: String = this.url,
    byte_count: Long = this.byte_count,
    content_type: ContentType = this.content_type,
    data_: ByteString = this.data_,
    unknownFields: ByteString = this.unknownFields
  ): CdnResource = CdnResource(url, byte_count, content_type, data_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CdnResource> = object : ProtoAdapter<CdnResource>(
      FieldEncoding.LENGTH_DELIMITED, 
      CdnResource::class, 
      "type.googleapis.com/squareup.protos.kotlin.serialization.cdn.CdnResource", 
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(value: CdnResource): Int {
        var size = value.unknownFields.size
        if (value.url != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.url)
        if (value.byte_count != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(2,
            value.byte_count)
        if (value.content_type != ContentType.BINARY) size +=
            ContentType.ADAPTER.encodedSizeWithTag(3, value.content_type)
        if (value.data_ != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(4,
            value.data_)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: CdnResource): Unit {
        if (value.url != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.url)
        if (value.byte_count != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.byte_count)
        if (value.content_type != ContentType.BINARY) ContentType.ADAPTER.encodeWithTag(writer, 3,
            value.content_type)
        if (value.data_ != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4,
            value.data_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): CdnResource {
        var url: String = ""
        var byte_count: Long = 0L
        var content_type: ContentType = ContentType.BINARY
        var data_: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> url = ProtoAdapter.STRING.decode(reader)
            2 -> byte_count = ProtoAdapter.INT64.decode(reader)
            3 -> try {
              content_type = ContentType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            4 -> data_ = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CdnResource(
          url = url,
          byte_count = byte_count,
          content_type = content_type,
          data_ = data_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: CdnResource): CdnResource = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }
  }

  public enum class ContentType(
    public override val value: Int
  ) : WireEnum {
    BINARY(0),
    IMAGE(1),
    VIDEO(2),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<ContentType> = object : EnumAdapter<ContentType>(
        ContentType::class, 
        PROTO_3, 
        ContentType.BINARY
      ) {
        public override fun fromValue(value: Int): ContentType? = ContentType.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(value: Int): ContentType? = when (value) {
        0 -> BINARY
        1 -> IMAGE
        2 -> VIDEO
        else -> null
      }
    }
  }
}
