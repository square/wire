import com.squareup.wire.schema.SchemaHandler
import org.jetbrains.annotations.NotNull

buildscript {
  repositories {
    maven {
      url "file://${projectDir.absolutePath}/../../../../../build/localMaven"
    }
    mavenCentral()
  }

  dependencies {
    classpath("com.squareup.wire:wire-schema:${VERSION_NAME}")
  }
}

plugins {
  id("java-library")
  id("org.jetbrains.kotlin.jvm")
  id('com.squareup.wire')
}

class MyCustomHandlerFactory implements SchemaHandler.Factory {
  @Override public SchemaHandler create() {
    throw new RuntimeException("boom");
  }

  @NotNull @Override
  public SchemaHandler create(@NotNull List<String> includes, @NotNull List<String> excludes,
      boolean exclusive, @NotNull String outDirectory, @NotNull Map<String, String> options) {
    throw new RuntimeException("custom handler is running!! " +
        includes.join(", ") + ", " + excludes.join(", ") + ", " + exclusive + ", " +
        options.entrySet().toArray().join(", "));
  }

  static final long serialVersionUID = 0L;
}

wire {
  sourcePath 'src/main/proto'

  custom {
    includes = ['squareup.dinosaurs.Dinosaur']
    excludes = ['squareup.geology.Period']
    options = [a: "one", b: "two", c: "three"]
    schemaHandlerFactory = new MyCustomHandlerFactory()
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach {
  compilerOptions {
    jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17)
  }
}
