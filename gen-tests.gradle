import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors

def PROTOS = Files.find(
      Paths.get("${rootProject.rootDir}/wire-tests/src/test/proto"),
      Integer.MAX_VALUE,
      { path, attrs -> attrs.isRegularFile() }
    )
    .map { path -> Paths.get("${rootProject.rootDir}/wire-tests/src/test/proto").relativize(path) }
    .filter { path -> !path.startsWith("kotlin") }
    .map { path -> path.toString() }
    .filter { path -> path.endsWith(".proto") }
    .sorted()
    .collect(Collectors.toList())

configurations {
  wire
}

dependencies {
  wire project(':wire-compiler')
}

// JAVA

task generateJavaTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Java classes from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto',
      '--java_out=wire-tests/src/test/proto-java',
      'google/protobuf/descriptor.proto'
  ] + PROTOS
}

// NO OPTIONS

task generateNoOptionsTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Java classes with no options from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto',
      '--java_out=wire-tests/src/test/proto-java.noOptions',
      '--excludes=google.protobuf.*'
  ] + PROTOS
}
task copyNoOptionsFiles(type: Copy) {
  from 'wire-tests/src/test/proto-java.noOptions/com/squareup/wire/protos/custom_options'
  into 'wire-tests/src/test/proto-java/com/squareup/wire/protos/custom_options'
  rename '(.+)', '$1.noOptions'
}
generateNoOptionsTests.finalizedBy copyNoOptionsFiles

// COMPACT

task generateCompactTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates compact Java classes from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto',
      '--java_out=wire-tests/src/test/proto-java.compact',
      '--compact',
      'all_types.proto'
  ]
}
task copyCompactFiles(type: Copy) {
  from 'wire-tests/src/test/proto-java.compact/com/squareup/wire/protos/alltypes/AllTypes.java'
  into 'wire-tests/src/test/proto-java/com/squareup/wire/protos/alltypes'
  rename '(.+)', '$1.compact'
}
generateCompactTests.finalizedBy copyCompactFiles

// GSON (uses COMPACT)

task copyAllTypesTest(type: Copy) {
  from 'wire-tests/src/test/proto-java.compact/com/squareup/wire/protos/alltypes/AllTypes.java'
  into 'wire-gson-support/src/test/java/com/squareup/wire/protos/alltypes'
}
task copyRepeatedPackedAndMapTest(type: Copy) {
  from 'wire-tests/src/test/proto-java.compact/com/squareup/wire/protos/RepeatedPackedAndMap.java'
  into 'wire-gson-support/src/test/java/com/squareup/wire/protos'
}
task generateGsonTests(dependsOn: [copyAllTypesTest, copyRepeatedPackedAndMapTest]) {
  group = 'Generate Tests'
  description = 'Generates Java classes that use Gson from the test protos'
}

// INCLUDES / EXCLUDES

task generateIncludesExcludesTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Java classes with included and excluded protos from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto',
      '--java_out=wire-tests/src/test/proto-java.pruned',
      '--includes=squareup.protos.roots.A,squareup.protos.roots.H',
      '--excludes=squareup.protos.roots.B',
      'roots.proto'
  ]
}
task copyIncludesExcludesFiles(type: Copy) {
  from 'wire-tests/src/test/proto-java.pruned/com/squareup/wire/protos/roots'
  into 'wire-tests/src/test/proto-java/com/squareup/wire/protos/roots'
  rename '(.+)', '$1.pruned'
}
generateIncludesExcludesTests.finalizedBy copyIncludesExcludesFiles

// ANDROID

task generateAndroidTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Java classes for Android from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto',
      '--java_out=wire-tests/src/test/proto-java.android',
      '--android',
      'person.proto'
  ]
}
task copyAndroidFiles(type: Copy) {
  from 'wire-tests/src/test/proto-java.android/com/squareup/wire/protos/person/Person.java'
  into 'wire-tests/src/test/proto-java/com/squareup/wire/protos/person'
  rename '(.+)', '$1.android'
}
generateAndroidTests.finalizedBy copyAndroidFiles

// ANDROID COMPACT

task generateAndroidCompactTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates compact Java classes for Android from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto',
      '--java_out=wire-tests/src/test/proto-java.android.compact',
      '--android',
      '--compact',
      'person.proto'
  ]
}
task copyAndroidCompactFiles(type: Copy) {
  from 'wire-tests/src/test/proto-java.android.compact/com/squareup/wire/protos/person/Person.java'
  into 'wire-tests/src/test/proto-java/com/squareup/wire/protos/person'
  rename '(.+)', '$1.android.compact'
}
generateAndroidCompactTests.finalizedBy copyAndroidCompactFiles

// KOTLIN

task generateKotlinTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Kotlin classes from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto/kotlin',
      '--kotlin_out=wire-tests/src/test/proto-kotlin',
      'person.proto',
      'optional_enum.proto',
      'map.proto',
      'one_of.proto',
      'same_name_enum.proto',
      'service_kotlin.proto',
      'redacted_test.proto',
      'redacted_one_of.proto',
      'deprecated_enum.proto',
      'deprecated.proto'
  ]
}

// KOTLIN ANDROID

task generateKotlinAndroidTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Kotlin classes for Android from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
      '--proto_path=wire-tests/src/test/proto/kotlin',
      '--kotlin_out=wire-tests/src/test/proto-kotlin.android',
      '--android',
      'person.proto'
  ]
}
task copyKotlinAndroidFiles(type: Copy) {
  from 'wire-tests/src/test/proto-kotlin.android/com/squareup/wire/protos/kotlin/person/Person.kt'
  into 'wire-tests/src/test/proto-kotlin/com/squareup/wire/protos/kotlin/person'
  rename '(.+)', '$1.android'
}
generateKotlinAndroidTests.finalizedBy copyKotlinAndroidFiles


// KOTLIN JAVA INTEROP

task generateKotlinJavaInteropTests(type: JavaExec) {
  group = 'Generate Tests'
  description = 'Generates Kotlin classes with Java interop from the test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
          '--proto_path=wire-tests/src/test/proto/kotlin',
          '--kotlin_out=wire-tests/src/test/proto-kotlin.java.interop',
          '--java_interop',
          'person.proto',
          'deprecated.proto',
          'one_of.proto',
          'percents_in_kdoc.proto',
          'same_name_enum.proto',
          'redacted_one_of.proto',
          'map.proto'
  ]
}
task copyKotlinJavaInteropFiles(type: Copy) {
  from 'wire-tests/src/test/proto-kotlin.java.interop/com/squareup/wire/protos/kotlin'
  into 'wire-tests/src/test/proto-kotlin/com/squareup/wire/protos/kotlin'
  rename '(.+)', '$1.java.interop'
}
generateKotlinJavaInteropTests.finalizedBy copyKotlinJavaInteropFiles

// GRPC

def GRPC_PROTOS = Files.find(
      Paths.get("${rootProject.rootDir}/wire-grpc-tests/src/test/proto"),
      Integer.MAX_VALUE,
      { path, attrs -> attrs.isRegularFile() }
    )
    .map { path -> Paths.get("${rootProject.rootDir}/wire-grpc-tests/src/test/proto").relativize(path) }
    .filter { path -> !path.startsWith("kotlin") }
    .map { path -> path.toString() }
    .filter { path -> path.endsWith(".proto") }
    .sorted()
    .collect(Collectors.toList())

task generateGrpcTests(type: JavaExec) {
  group = 'Generate gRPC Tests'
  description = 'Generates Kotlin classes from the gRPC test protos'
  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
          '--proto_path=wire-grpc-tests/src/test/proto',
          '--kotlin_out=wire-grpc-tests/src/test/proto-grpc',
          'routeguide/RouteGuideProto.proto'
  ] + GRPC_PROTOS
}

task removeTempDirs(type: Delete) {
  delete 'wire-tests/src/test/proto-java.noOptions',
      'wire-tests/src/test/proto-java.compact',
      'wire-tests/src/test/proto-java.pruned',
      'wire-tests/src/test/proto-java.android',
      'wire-tests/src/test/proto-java.android.compact',
      'wire-tests/src/test/proto-kotlin.android',
      'wire-tests/src/test/proto-kotlin.java.interop'
}

task generateTests(dependsOn: [generateJavaTests, generateCompactTests, generateNoOptionsTests, 
    generateGsonTests, generateIncludesExcludesTests, generateAndroidTests, 
    generateAndroidCompactTests, generateKotlinTests, generateKotlinAndroidTests, 
    generateKotlinJavaInteropTests, generateGrpcTests]) {
  group = 'Generate Tests'
  description = 'Generates all test classes'
}
generateTests.finalizedBy removeTempDirs
