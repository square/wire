// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos3.kotlin.contains_timestamp.ContainsTimestamp in contains_timestamp.proto
import Foundation
import Wire

public struct ContainsTimestamp {

    public var timestamp: Timestamp?
    public var unknownFields: Foundation.Data = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ContainsTimestamp : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ContainsTimestamp : Hashable {
}
#endif

extension ContainsTimestamp : Sendable {
}

extension ContainsTimestamp : ProtoDefaultedValue {

    public static var defaultedValue: ContainsTimestamp {
        ContainsTimestamp()
    }
}

extension ContainsTimestamp : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos3.kotlin.contains_timestamp.ContainsTimestamp"
    }

}

extension ContainsTimestamp : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var timestamp: Timestamp? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: timestamp = try protoReader.decode(Timestamp.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.timestamp = timestamp
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.timestamp)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension ContainsTimestamp : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.timestamp = try container.decodeIfPresent(Timestamp.self, forKey: "timestamp")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.timestamp, forKey: "timestamp")
    }

}
#endif
