// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/differentpackage/bar.proto at 5:1
package com.squareup.differentpackage.protos.bar;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;

public final class Bar extends Message<Bar> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<Bar> ADAPTER = new TypeAdapter.MessageAdapter<Bar>() {
    @Override
    public Bar read(ProtoReader reader) throws IOException {
      return Bar.read(reader);
    }
  };

  public Bar() {
    super("Bar");
  }

  private Bar(Builder builder) {
    this();
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.unknowns(this);
  }

  public static Bar read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Bar> {
    public Builder() {
    }

    public Builder(Bar message) {
      super(message);
    }

    @Override
    public Bar build() {
      return new Bar(this);
    }
  }

  public static final class Baz extends Message<Baz> {
    private static final long serialVersionUID = 0L;

    public static final TypeAdapter<Baz> ADAPTER = new TypeAdapter.MessageAdapter<Baz>() {
      @Override
      public Baz read(ProtoReader reader) throws IOException {
        return Baz.read(reader);
      }
    };

    public Baz() {
      super("Baz");
    }

    private Baz(Builder builder) {
      this();
      setBuilder(builder);
    }

    @Override
    protected void visitFields(Message.Visitor visitor) {
      visitor.unknowns(this);
    }

    public static Baz read(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      while (reader.hasNext()) {
        int tag = reader.nextTag();
        switch (tag) {
          default: builder.readUnknown(tag, reader); break;
        }
      }
      return builder.build();
    }

    public static final class Builder extends com.squareup.wire.Message.Builder<Baz> {
      public Builder() {
      }

      public Builder(Baz message) {
        super(message);
      }

      @Override
      public Baz build() {
        return new Baz(this);
      }
    }

    public static final class Moo extends Message<Moo> {
      private static final long serialVersionUID = 0L;

      public static final TypeAdapter<Moo> ADAPTER = new TypeAdapter.MessageAdapter<Moo>() {
        @Override
        public Moo read(ProtoReader reader) throws IOException {
          return Moo.read(reader);
        }
      };

      public static final String DEFAULT_BOO = "";

      public final String boo;

      public Moo(String boo) {
        super("Moo");
        this.boo = boo;
      }

      private Moo(Builder builder) {
        this(builder.boo);
        setBuilder(builder);
      }

      @Override
      protected void visitFields(Message.Visitor visitor) {
        visitor.value(1, "boo", boo, TypeAdapter.STRING, false);
        visitor.unknowns(this);
      }

      public static Moo read(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        while (reader.hasNext()) {
          int tag = reader.nextTag();
          switch (tag) {
            case 1: builder.boo = reader.value(TypeAdapter.STRING); break;
            default: builder.readUnknown(tag, reader); break;
          }
        }
        return builder.build();
      }

      public static final class Builder extends com.squareup.wire.Message.Builder<Moo> {
        public String boo;

        public Builder() {
        }

        public Builder(Moo message) {
          super(message);
          if (message == null) return;
          this.boo = message.boo;
        }

        public Builder boo(String boo) {
          this.boo = boo;
          return this;
        }

        @Override
        public Moo build() {
          return new Moo(this);
        }
      }
    }
  }
}
