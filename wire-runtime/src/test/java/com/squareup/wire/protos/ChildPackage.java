// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/child_pkg.proto at 22:1
package com.squareup.wire.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import com.squareup.wire.protos.foreign.ForeignEnum;
import java.io.IOException;
import java.lang.Override;

public final class ChildPackage extends Message<ChildPackage> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<ChildPackage> ADAPTER = new TypeAdapter.MessageAdapter<ChildPackage>() {
    @Override
    public ChildPackage read(ProtoReader reader) throws IOException {
      return ChildPackage.read(reader);
    }
  };

  public static final ForeignEnum DEFAULT_INNER_FOREIGN_ENUM = ForeignEnum.BAV;

  public final ForeignEnum inner_foreign_enum;

  public ChildPackage(ForeignEnum inner_foreign_enum) {
    super("ChildPackage");
    this.inner_foreign_enum = inner_foreign_enum;
  }

  private ChildPackage(Builder builder) {
    this(builder.inner_foreign_enum);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "inner_foreign_enum", inner_foreign_enum, ForeignEnum.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static ChildPackage read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.inner_foreign_enum = enumOrUnknown(1, reader, ForeignEnum.ADAPTER, builder); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<ChildPackage> {
    public ForeignEnum inner_foreign_enum;

    public Builder() {
    }

    public Builder(ChildPackage message) {
      super(message);
      if (message == null) return;
      this.inner_foreign_enum = message.inner_foreign_enum;
    }

    public Builder inner_foreign_enum(ForeignEnum inner_foreign_enum) {
      this.inner_foreign_enum = inner_foreign_enum;
      return this;
    }

    @Override
    public ChildPackage build() {
      return new ChildPackage(this);
    }
  }
}
