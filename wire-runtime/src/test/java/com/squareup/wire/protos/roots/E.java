// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/roots.proto
package com.squareup.wire.protos.roots;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;

public final class E extends Message {

  public static final G DEFAULT_G = G.FOO;

  @ProtoField(tag = 1)
  public final F f;

  @ProtoField(tag = 2, type = ENUM)
  public final G g;

  private E(Builder builder) {
    super(builder);
    this.f = builder.f;
    this.g = builder.g;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof E)) return false;
    E o = (E) other;
    return equals(f, o.f)
        && equals(g, o.g);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = f != null ? f.hashCode() : 0;
      result = result * 37 + (g != null ? g.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<E> {

    public F f;
    public G g;

    public Builder() {
    }

    public Builder(E message) {
      super(message);
      if (message == null) return;
      this.f = message.f;
      this.g = message.g;
    }

    public Builder f(F f) {
      this.f = f;
      return this;
    }

    public Builder g(G g) {
      this.g = g;
      return this;
    }

    @Override
    public E build() {
      return new E(this);
    }
  }

  public static final class F extends Message {

    public static final Integer DEFAULT_I = 0;

    @ProtoField(tag = 1, type = INT32)
    public final Integer i;

    private F(Builder builder) {
      super(builder);
      this.i = builder.i;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof F)) return false;
      return equals(i, ((F) other).i);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      return result != 0 ? result : (hashCode = i != null ? i.hashCode() : 0);
    }

    public static final class Builder extends Message.Builder<F> {

      public Integer i;

      public Builder() {
      }

      public Builder(F message) {
        super(message);
        if (message == null) return;
        this.i = message.i;
      }

      public Builder i(Integer i) {
        this.i = i;
        return this;
      }

      @Override
      public F build() {
        return new F(this);
      }
    }
  }
}
