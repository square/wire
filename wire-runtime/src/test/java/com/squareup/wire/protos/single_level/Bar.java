// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/samebasename/single_level.proto at 20:1
package com.squareup.wire.protos.single_level;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;

public final class Bar extends Message<Bar> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<Bar> ADAPTER = new TypeAdapter.MessageAdapter<Bar>() {
    @Override
    public Bar read(ProtoReader reader) throws IOException {
      return Bar.read(reader);
    }
  };

  public static final Integer DEFAULT_BAZ = 0;

  public final Integer baz;

  public Bar(Integer baz) {
    super("Bar");
    this.baz = baz;
  }

  private Bar(Builder builder) {
    this(builder.baz);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "baz", baz, TypeAdapter.INT32, false);
    visitor.unknowns(this);
  }

  public static Bar read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.baz = reader.value(TypeAdapter.INT32); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Bar> {
    public Integer baz;

    public Builder() {
    }

    public Builder(Bar message) {
      super(message);
      if (message == null) return;
      this.baz = message.baz;
    }

    public Builder baz(Integer baz) {
      this.baz = baz;
      return this;
    }

    @Override
    public Bar build() {
      return new Bar(this);
    }
  }
}
