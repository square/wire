// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/all_types.proto
package com.squareup.wire.protos.alltypes;

import com.squareup.wire.ByteString;
import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Extension;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FIXED32;
import static com.squareup.wire.Message.Datatype.FIXED64;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.SFIXED32;
import static com.squareup.wire.Message.Datatype.SFIXED64;
import static com.squareup.wire.Message.Datatype.SINT32;
import static com.squareup.wire.Message.Datatype.SINT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.PACKED;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class AllTypes extends ExtendableMessage<AllTypes> {

  public static final Integer DEFAULT_OPT_INT32 = 0;
  public static final Integer DEFAULT_OPT_UINT32 = 0;
  public static final Integer DEFAULT_OPT_SINT32 = 0;
  public static final Integer DEFAULT_OPT_FIXED32 = 0;
  public static final Integer DEFAULT_OPT_SFIXED32 = 0;
  public static final Long DEFAULT_OPT_INT64 = 0L;
  public static final Long DEFAULT_OPT_UINT64 = 0L;
  public static final Long DEFAULT_OPT_SINT64 = 0L;
  public static final Long DEFAULT_OPT_FIXED64 = 0L;
  public static final Long DEFAULT_OPT_SFIXED64 = 0L;
  public static final Boolean DEFAULT_OPT_BOOL = false;
  public static final Float DEFAULT_OPT_FLOAT = 0F;
  public static final Double DEFAULT_OPT_DOUBLE = 0D;
  public static final String DEFAULT_OPT_STRING = "";
  public static final ByteString DEFAULT_OPT_BYTES = ByteString.EMPTY;
  public static final NestedEnum DEFAULT_OPT_NESTED_ENUM = NestedEnum.A;
  public static final NestedMessage DEFAULT_OPT_NESTED_MESSAGE = getDefaultInstance(NestedMessage.class);
  public static final Integer DEFAULT_REQ_INT32 = 0;
  public static final Integer DEFAULT_REQ_UINT32 = 0;
  public static final Integer DEFAULT_REQ_SINT32 = 0;
  public static final Integer DEFAULT_REQ_FIXED32 = 0;
  public static final Integer DEFAULT_REQ_SFIXED32 = 0;
  public static final Long DEFAULT_REQ_INT64 = 0L;
  public static final Long DEFAULT_REQ_UINT64 = 0L;
  public static final Long DEFAULT_REQ_SINT64 = 0L;
  public static final Long DEFAULT_REQ_FIXED64 = 0L;
  public static final Long DEFAULT_REQ_SFIXED64 = 0L;
  public static final Boolean DEFAULT_REQ_BOOL = false;
  public static final Float DEFAULT_REQ_FLOAT = 0F;
  public static final Double DEFAULT_REQ_DOUBLE = 0D;
  public static final String DEFAULT_REQ_STRING = "";
  public static final ByteString DEFAULT_REQ_BYTES = ByteString.EMPTY;
  public static final NestedEnum DEFAULT_REQ_NESTED_ENUM = NestedEnum.A;
  public static final NestedMessage DEFAULT_REQ_NESTED_MESSAGE = getDefaultInstance(NestedMessage.class);
  public static final List<Integer> DEFAULT_REP_INT32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_REP_UINT32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_REP_SINT32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_REP_FIXED32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_REP_SFIXED32 = Collections.emptyList();
  public static final List<Long> DEFAULT_REP_INT64 = Collections.emptyList();
  public static final List<Long> DEFAULT_REP_UINT64 = Collections.emptyList();
  public static final List<Long> DEFAULT_REP_SINT64 = Collections.emptyList();
  public static final List<Long> DEFAULT_REP_FIXED64 = Collections.emptyList();
  public static final List<Long> DEFAULT_REP_SFIXED64 = Collections.emptyList();
  public static final List<Boolean> DEFAULT_REP_BOOL = Collections.emptyList();
  public static final List<Float> DEFAULT_REP_FLOAT = Collections.emptyList();
  public static final List<Double> DEFAULT_REP_DOUBLE = Collections.emptyList();
  public static final List<String> DEFAULT_REP_STRING = Collections.emptyList();
  public static final List<ByteString> DEFAULT_REP_BYTES = Collections.emptyList();
  public static final List<NestedEnum> DEFAULT_REP_NESTED_ENUM = Collections.emptyList();
  public static final List<NestedMessage> DEFAULT_REP_NESTED_MESSAGE = Collections.emptyList();
  public static final List<Integer> DEFAULT_PACK_INT32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_PACK_UINT32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_PACK_SINT32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_PACK_FIXED32 = Collections.emptyList();
  public static final List<Integer> DEFAULT_PACK_SFIXED32 = Collections.emptyList();
  public static final List<Long> DEFAULT_PACK_INT64 = Collections.emptyList();
  public static final List<Long> DEFAULT_PACK_UINT64 = Collections.emptyList();
  public static final List<Long> DEFAULT_PACK_SINT64 = Collections.emptyList();
  public static final List<Long> DEFAULT_PACK_FIXED64 = Collections.emptyList();
  public static final List<Long> DEFAULT_PACK_SFIXED64 = Collections.emptyList();
  public static final List<Boolean> DEFAULT_PACK_BOOL = Collections.emptyList();
  public static final List<Float> DEFAULT_PACK_FLOAT = Collections.emptyList();
  public static final List<Double> DEFAULT_PACK_DOUBLE = Collections.emptyList();
  public static final List<NestedEnum> DEFAULT_PACK_NESTED_ENUM = Collections.emptyList();
  public static final Integer DEFAULT_DEFAULT_INT32 = 2147483647;
  public static final Integer DEFAULT_DEFAULT_UINT32 = -1;
  public static final Integer DEFAULT_DEFAULT_SINT32 = -2147483648;
  public static final Integer DEFAULT_DEFAULT_FIXED32 = -1;
  public static final Integer DEFAULT_DEFAULT_SFIXED32 = -2147483648;
  public static final Long DEFAULT_DEFAULT_INT64 = 9223372036854775807L;
  public static final Long DEFAULT_DEFAULT_UINT64 = -1L;
  public static final Long DEFAULT_DEFAULT_SINT64 = -9223372036854775808L;
  public static final Long DEFAULT_DEFAULT_FIXED64 = -1L;
  public static final Long DEFAULT_DEFAULT_SFIXED64 = -9223372036854775808L;
  public static final Boolean DEFAULT_DEFAULT_BOOL = true;
  public static final Float DEFAULT_DEFAULT_FLOAT = 123.456e7F;
  public static final Double DEFAULT_DEFAULT_DOUBLE = 123.456e78D;
  public static final String DEFAULT_DEFAULT_STRING = "çok\u0007\b\f\n\r\t\u000b\u0001\u0001\u0001\u000f\u000f~\u0001\u0001\u0011\u0001\u0001\u0011güzel";
  public static final ByteString DEFAULT_DEFAULT_BYTES = ByteString.of("529rBwgMCg0JCwEBAQ8PfgEBEQEBEWf8emVs");
  public static final NestedEnum DEFAULT_DEFAULT_NESTED_ENUM = NestedEnum.A;

  @ProtoField(
    tag = 1,
    type = INT32
  )
  public final Integer opt_int32;

  @ProtoField(
    tag = 2,
    type = UINT32
  )
  public final Integer opt_uint32;

  @ProtoField(
    tag = 3,
    type = SINT32
  )
  public final Integer opt_sint32;

  @ProtoField(
    tag = 4,
    type = FIXED32
  )
  public final Integer opt_fixed32;

  @ProtoField(
    tag = 5,
    type = SFIXED32
  )
  public final Integer opt_sfixed32;

  @ProtoField(
    tag = 6,
    type = INT64
  )
  public final Long opt_int64;

  @ProtoField(
    tag = 7,
    type = UINT64
  )
  public final Long opt_uint64;

  @ProtoField(
    tag = 8,
    type = SINT64
  )
  public final Long opt_sint64;

  @ProtoField(
    tag = 9,
    type = FIXED64
  )
  public final Long opt_fixed64;

  @ProtoField(
    tag = 10,
    type = SFIXED64
  )
  public final Long opt_sfixed64;

  @ProtoField(
    tag = 11,
    type = BOOL
  )
  public final Boolean opt_bool;

  @ProtoField(
    tag = 12,
    type = FLOAT
  )
  public final Float opt_float;

  @ProtoField(
    tag = 13,
    type = DOUBLE
  )
  public final Double opt_double;

  @ProtoField(
    tag = 14,
    type = STRING
  )
  public final String opt_string;

  @ProtoField(
    tag = 15,
    type = BYTES
  )
  public final ByteString opt_bytes;

  @ProtoField(
    tag = 16,
    type = ENUM
  )
  public final NestedEnum opt_nested_enum;

  @ProtoField(
    tag = 17
  )
  public final NestedMessage opt_nested_message;

  @ProtoField(
    tag = 101,
    type = INT32,
    label = REQUIRED
  )
  public final Integer req_int32;

  @ProtoField(
    tag = 102,
    type = UINT32,
    label = REQUIRED
  )
  public final Integer req_uint32;

  @ProtoField(
    tag = 103,
    type = SINT32,
    label = REQUIRED
  )
  public final Integer req_sint32;

  @ProtoField(
    tag = 104,
    type = FIXED32,
    label = REQUIRED
  )
  public final Integer req_fixed32;

  @ProtoField(
    tag = 105,
    type = SFIXED32,
    label = REQUIRED
  )
  public final Integer req_sfixed32;

  @ProtoField(
    tag = 106,
    type = INT64,
    label = REQUIRED
  )
  public final Long req_int64;

  @ProtoField(
    tag = 107,
    type = UINT64,
    label = REQUIRED
  )
  public final Long req_uint64;

  @ProtoField(
    tag = 108,
    type = SINT64,
    label = REQUIRED
  )
  public final Long req_sint64;

  @ProtoField(
    tag = 109,
    type = FIXED64,
    label = REQUIRED
  )
  public final Long req_fixed64;

  @ProtoField(
    tag = 110,
    type = SFIXED64,
    label = REQUIRED
  )
  public final Long req_sfixed64;

  @ProtoField(
    tag = 111,
    type = BOOL,
    label = REQUIRED
  )
  public final Boolean req_bool;

  @ProtoField(
    tag = 112,
    type = FLOAT,
    label = REQUIRED
  )
  public final Float req_float;

  @ProtoField(
    tag = 113,
    type = DOUBLE,
    label = REQUIRED
  )
  public final Double req_double;

  @ProtoField(
    tag = 114,
    type = STRING,
    label = REQUIRED
  )
  public final String req_string;

  @ProtoField(
    tag = 115,
    type = BYTES,
    label = REQUIRED
  )
  public final ByteString req_bytes;

  @ProtoField(
    tag = 116,
    type = ENUM,
    label = REQUIRED
  )
  public final NestedEnum req_nested_enum;

  @ProtoField(
    tag = 117,
    label = REQUIRED
  )
  public final NestedMessage req_nested_message;

  @ProtoField(
    tag = 201,
    type = INT32,
    label = REPEATED
  )
  public final List<Integer> rep_int32;

  @ProtoField(
    tag = 202,
    type = UINT32,
    label = REPEATED
  )
  public final List<Integer> rep_uint32;

  @ProtoField(
    tag = 203,
    type = SINT32,
    label = REPEATED
  )
  public final List<Integer> rep_sint32;

  @ProtoField(
    tag = 204,
    type = FIXED32,
    label = REPEATED
  )
  public final List<Integer> rep_fixed32;

  @ProtoField(
    tag = 205,
    type = SFIXED32,
    label = REPEATED
  )
  public final List<Integer> rep_sfixed32;

  @ProtoField(
    tag = 206,
    type = INT64,
    label = REPEATED
  )
  public final List<Long> rep_int64;

  @ProtoField(
    tag = 207,
    type = UINT64,
    label = REPEATED
  )
  public final List<Long> rep_uint64;

  @ProtoField(
    tag = 208,
    type = SINT64,
    label = REPEATED
  )
  public final List<Long> rep_sint64;

  @ProtoField(
    tag = 209,
    type = FIXED64,
    label = REPEATED
  )
  public final List<Long> rep_fixed64;

  @ProtoField(
    tag = 210,
    type = SFIXED64,
    label = REPEATED
  )
  public final List<Long> rep_sfixed64;

  @ProtoField(
    tag = 211,
    type = BOOL,
    label = REPEATED
  )
  public final List<Boolean> rep_bool;

  @ProtoField(
    tag = 212,
    type = FLOAT,
    label = REPEATED
  )
  public final List<Float> rep_float;

  @ProtoField(
    tag = 213,
    type = DOUBLE,
    label = REPEATED
  )
  public final List<Double> rep_double;

  @ProtoField(
    tag = 214,
    type = STRING,
    label = REPEATED
  )
  public final List<String> rep_string;

  @ProtoField(
    tag = 215,
    type = BYTES,
    label = REPEATED
  )
  public final List<ByteString> rep_bytes;

  @ProtoField(
    tag = 216,
    type = ENUM,
    label = REPEATED
  )
  public final List<NestedEnum> rep_nested_enum;

  @ProtoField(
    tag = 217,
    label = REPEATED
  )
  public final List<NestedMessage> rep_nested_message;

  @ProtoField(
    tag = 301,
    type = INT32,
    label = PACKED
  )
  public final List<Integer> pack_int32;

  @ProtoField(
    tag = 302,
    type = UINT32,
    label = PACKED
  )
  public final List<Integer> pack_uint32;

  @ProtoField(
    tag = 303,
    type = SINT32,
    label = PACKED
  )
  public final List<Integer> pack_sint32;

  @ProtoField(
    tag = 304,
    type = FIXED32,
    label = PACKED
  )
  public final List<Integer> pack_fixed32;

  @ProtoField(
    tag = 305,
    type = SFIXED32,
    label = PACKED
  )
  public final List<Integer> pack_sfixed32;

  @ProtoField(
    tag = 306,
    type = INT64,
    label = PACKED
  )
  public final List<Long> pack_int64;

  @ProtoField(
    tag = 307,
    type = UINT64,
    label = PACKED
  )
  public final List<Long> pack_uint64;

  @ProtoField(
    tag = 308,
    type = SINT64,
    label = PACKED
  )
  public final List<Long> pack_sint64;

  @ProtoField(
    tag = 309,
    type = FIXED64,
    label = PACKED
  )
  public final List<Long> pack_fixed64;

  @ProtoField(
    tag = 310,
    type = SFIXED64,
    label = PACKED
  )
  public final List<Long> pack_sfixed64;

  @ProtoField(
    tag = 311,
    type = BOOL,
    label = PACKED
  )
  public final List<Boolean> pack_bool;

  @ProtoField(
    tag = 312,
    type = FLOAT,
    label = PACKED
  )
  public final List<Float> pack_float;

  @ProtoField(
    tag = 313,
    type = DOUBLE,
    label = PACKED
  )
  public final List<Double> pack_double;

  @ProtoField(
    tag = 316,
    type = ENUM,
    label = PACKED
  )
  public final List<NestedEnum> pack_nested_enum;

  @ProtoField(
    tag = 401,
    type = INT32
  )
  public final Integer default_int32;

  @ProtoField(
    tag = 402,
    type = UINT32
  )
  public final Integer default_uint32;

  @ProtoField(
    tag = 403,
    type = SINT32
  )
  public final Integer default_sint32;

  @ProtoField(
    tag = 404,
    type = FIXED32
  )
  public final Integer default_fixed32;

  @ProtoField(
    tag = 405,
    type = SFIXED32
  )
  public final Integer default_sfixed32;

  @ProtoField(
    tag = 406,
    type = INT64
  )
  public final Long default_int64;

  @ProtoField(
    tag = 407,
    type = UINT64
  )
  public final Long default_uint64;

  @ProtoField(
    tag = 408,
    type = SINT64
  )
  public final Long default_sint64;

  @ProtoField(
    tag = 409,
    type = FIXED64
  )
  public final Long default_fixed64;

  @ProtoField(
    tag = 410,
    type = SFIXED64
  )
  public final Long default_sfixed64;

  @ProtoField(
    tag = 411,
    type = BOOL
  )
  public final Boolean default_bool;

  @ProtoField(
    tag = 412,
    type = FLOAT
  )
  public final Float default_float;

  @ProtoField(
    tag = 413,
    type = DOUBLE
  )
  public final Double default_double;

  @ProtoField(
    tag = 414,
    type = STRING
  )
  public final String default_string;

  @ProtoField(
    tag = 415,
    type = BYTES
  )
  public final ByteString default_bytes;

  @ProtoField(
    tag = 416,
    type = ENUM
  )
  public final NestedEnum default_nested_enum;

  private AllTypes(Builder builder) {
    super(builder);
    this.opt_int32 = builder.opt_int32;
    this.opt_uint32 = builder.opt_uint32;
    this.opt_sint32 = builder.opt_sint32;
    this.opt_fixed32 = builder.opt_fixed32;
    this.opt_sfixed32 = builder.opt_sfixed32;
    this.opt_int64 = builder.opt_int64;
    this.opt_uint64 = builder.opt_uint64;
    this.opt_sint64 = builder.opt_sint64;
    this.opt_fixed64 = builder.opt_fixed64;
    this.opt_sfixed64 = builder.opt_sfixed64;
    this.opt_bool = builder.opt_bool;
    this.opt_float = builder.opt_float;
    this.opt_double = builder.opt_double;
    this.opt_string = builder.opt_string;
    this.opt_bytes = builder.opt_bytes;
    this.opt_nested_enum = builder.opt_nested_enum;
    this.opt_nested_message = builder.opt_nested_message;
    this.req_int32 = builder.req_int32;
    this.req_uint32 = builder.req_uint32;
    this.req_sint32 = builder.req_sint32;
    this.req_fixed32 = builder.req_fixed32;
    this.req_sfixed32 = builder.req_sfixed32;
    this.req_int64 = builder.req_int64;
    this.req_uint64 = builder.req_uint64;
    this.req_sint64 = builder.req_sint64;
    this.req_fixed64 = builder.req_fixed64;
    this.req_sfixed64 = builder.req_sfixed64;
    this.req_bool = builder.req_bool;
    this.req_float = builder.req_float;
    this.req_double = builder.req_double;
    this.req_string = builder.req_string;
    this.req_bytes = builder.req_bytes;
    this.req_nested_enum = builder.req_nested_enum;
    this.req_nested_message = builder.req_nested_message;
    this.rep_int32 = immutableCopyOf(builder.rep_int32);
    this.rep_uint32 = immutableCopyOf(builder.rep_uint32);
    this.rep_sint32 = immutableCopyOf(builder.rep_sint32);
    this.rep_fixed32 = immutableCopyOf(builder.rep_fixed32);
    this.rep_sfixed32 = immutableCopyOf(builder.rep_sfixed32);
    this.rep_int64 = immutableCopyOf(builder.rep_int64);
    this.rep_uint64 = immutableCopyOf(builder.rep_uint64);
    this.rep_sint64 = immutableCopyOf(builder.rep_sint64);
    this.rep_fixed64 = immutableCopyOf(builder.rep_fixed64);
    this.rep_sfixed64 = immutableCopyOf(builder.rep_sfixed64);
    this.rep_bool = immutableCopyOf(builder.rep_bool);
    this.rep_float = immutableCopyOf(builder.rep_float);
    this.rep_double = immutableCopyOf(builder.rep_double);
    this.rep_string = immutableCopyOf(builder.rep_string);
    this.rep_bytes = immutableCopyOf(builder.rep_bytes);
    this.rep_nested_enum = immutableCopyOf(builder.rep_nested_enum);
    this.rep_nested_message = immutableCopyOf(builder.rep_nested_message);
    this.pack_int32 = immutableCopyOf(builder.pack_int32);
    this.pack_uint32 = immutableCopyOf(builder.pack_uint32);
    this.pack_sint32 = immutableCopyOf(builder.pack_sint32);
    this.pack_fixed32 = immutableCopyOf(builder.pack_fixed32);
    this.pack_sfixed32 = immutableCopyOf(builder.pack_sfixed32);
    this.pack_int64 = immutableCopyOf(builder.pack_int64);
    this.pack_uint64 = immutableCopyOf(builder.pack_uint64);
    this.pack_sint64 = immutableCopyOf(builder.pack_sint64);
    this.pack_fixed64 = immutableCopyOf(builder.pack_fixed64);
    this.pack_sfixed64 = immutableCopyOf(builder.pack_sfixed64);
    this.pack_bool = immutableCopyOf(builder.pack_bool);
    this.pack_float = immutableCopyOf(builder.pack_float);
    this.pack_double = immutableCopyOf(builder.pack_double);
    this.pack_nested_enum = immutableCopyOf(builder.pack_nested_enum);
    this.default_int32 = builder.default_int32;
    this.default_uint32 = builder.default_uint32;
    this.default_sint32 = builder.default_sint32;
    this.default_fixed32 = builder.default_fixed32;
    this.default_sfixed32 = builder.default_sfixed32;
    this.default_int64 = builder.default_int64;
    this.default_uint64 = builder.default_uint64;
    this.default_sint64 = builder.default_sint64;
    this.default_fixed64 = builder.default_fixed64;
    this.default_sfixed64 = builder.default_sfixed64;
    this.default_bool = builder.default_bool;
    this.default_float = builder.default_float;
    this.default_double = builder.default_double;
    this.default_string = builder.default_string;
    this.default_bytes = builder.default_bytes;
    this.default_nested_enum = builder.default_nested_enum;
  }

  @Override
  public boolean equals(Object other) {
    if (!(other instanceof AllTypes)) return false;
    AllTypes o = (AllTypes) other;
    if (!extensionsEqual(o)) return false;
    return equals(opt_int32, o.opt_int32)
        && equals(opt_uint32, o.opt_uint32)
        && equals(opt_sint32, o.opt_sint32)
        && equals(opt_fixed32, o.opt_fixed32)
        && equals(opt_sfixed32, o.opt_sfixed32)
        && equals(opt_int64, o.opt_int64)
        && equals(opt_uint64, o.opt_uint64)
        && equals(opt_sint64, o.opt_sint64)
        && equals(opt_fixed64, o.opt_fixed64)
        && equals(opt_sfixed64, o.opt_sfixed64)
        && equals(opt_bool, o.opt_bool)
        && equals(opt_float, o.opt_float)
        && equals(opt_double, o.opt_double)
        && equals(opt_string, o.opt_string)
        && equals(opt_bytes, o.opt_bytes)
        && equals(opt_nested_enum, o.opt_nested_enum)
        && equals(opt_nested_message, o.opt_nested_message)
        && equals(req_int32, o.req_int32)
        && equals(req_uint32, o.req_uint32)
        && equals(req_sint32, o.req_sint32)
        && equals(req_fixed32, o.req_fixed32)
        && equals(req_sfixed32, o.req_sfixed32)
        && equals(req_int64, o.req_int64)
        && equals(req_uint64, o.req_uint64)
        && equals(req_sint64, o.req_sint64)
        && equals(req_fixed64, o.req_fixed64)
        && equals(req_sfixed64, o.req_sfixed64)
        && equals(req_bool, o.req_bool)
        && equals(req_float, o.req_float)
        && equals(req_double, o.req_double)
        && equals(req_string, o.req_string)
        && equals(req_bytes, o.req_bytes)
        && equals(req_nested_enum, o.req_nested_enum)
        && equals(req_nested_message, o.req_nested_message)
        && equals(rep_int32, o.rep_int32)
        && equals(rep_uint32, o.rep_uint32)
        && equals(rep_sint32, o.rep_sint32)
        && equals(rep_fixed32, o.rep_fixed32)
        && equals(rep_sfixed32, o.rep_sfixed32)
        && equals(rep_int64, o.rep_int64)
        && equals(rep_uint64, o.rep_uint64)
        && equals(rep_sint64, o.rep_sint64)
        && equals(rep_fixed64, o.rep_fixed64)
        && equals(rep_sfixed64, o.rep_sfixed64)
        && equals(rep_bool, o.rep_bool)
        && equals(rep_float, o.rep_float)
        && equals(rep_double, o.rep_double)
        && equals(rep_string, o.rep_string)
        && equals(rep_bytes, o.rep_bytes)
        && equals(rep_nested_enum, o.rep_nested_enum)
        && equals(rep_nested_message, o.rep_nested_message)
        && equals(pack_int32, o.pack_int32)
        && equals(pack_uint32, o.pack_uint32)
        && equals(pack_sint32, o.pack_sint32)
        && equals(pack_fixed32, o.pack_fixed32)
        && equals(pack_sfixed32, o.pack_sfixed32)
        && equals(pack_int64, o.pack_int64)
        && equals(pack_uint64, o.pack_uint64)
        && equals(pack_sint64, o.pack_sint64)
        && equals(pack_fixed64, o.pack_fixed64)
        && equals(pack_sfixed64, o.pack_sfixed64)
        && equals(pack_bool, o.pack_bool)
        && equals(pack_float, o.pack_float)
        && equals(pack_double, o.pack_double)
        && equals(pack_nested_enum, o.pack_nested_enum)
        && equals(default_int32, o.default_int32)
        && equals(default_uint32, o.default_uint32)
        && equals(default_sint32, o.default_sint32)
        && equals(default_fixed32, o.default_fixed32)
        && equals(default_sfixed32, o.default_sfixed32)
        && equals(default_int64, o.default_int64)
        && equals(default_uint64, o.default_uint64)
        && equals(default_sint64, o.default_sint64)
        && equals(default_fixed64, o.default_fixed64)
        && equals(default_sfixed64, o.default_sfixed64)
        && equals(default_bool, o.default_bool)
        && equals(default_float, o.default_float)
        && equals(default_double, o.default_double)
        && equals(default_string, o.default_string)
        && equals(default_bytes, o.default_bytes)
        && equals(default_nested_enum, o.default_nested_enum);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = extensionsHashCode();
      result = result * 37 + (opt_int32 != null ? opt_int32.hashCode() : 0);
      result = result * 37 + (opt_uint32 != null ? opt_uint32.hashCode() : 0);
      result = result * 37 + (opt_sint32 != null ? opt_sint32.hashCode() : 0);
      result = result * 37 + (opt_fixed32 != null ? opt_fixed32.hashCode() : 0);
      result = result * 37 + (opt_sfixed32 != null ? opt_sfixed32.hashCode() : 0);
      result = result * 37 + (opt_int64 != null ? opt_int64.hashCode() : 0);
      result = result * 37 + (opt_uint64 != null ? opt_uint64.hashCode() : 0);
      result = result * 37 + (opt_sint64 != null ? opt_sint64.hashCode() : 0);
      result = result * 37 + (opt_fixed64 != null ? opt_fixed64.hashCode() : 0);
      result = result * 37 + (opt_sfixed64 != null ? opt_sfixed64.hashCode() : 0);
      result = result * 37 + (opt_bool != null ? opt_bool.hashCode() : 0);
      result = result * 37 + (opt_float != null ? opt_float.hashCode() : 0);
      result = result * 37 + (opt_double != null ? opt_double.hashCode() : 0);
      result = result * 37 + (opt_string != null ? opt_string.hashCode() : 0);
      result = result * 37 + (opt_bytes != null ? opt_bytes.hashCode() : 0);
      result = result * 37 + (opt_nested_enum != null ? opt_nested_enum.hashCode() : 0);
      result = result * 37 + (opt_nested_message != null ? opt_nested_message.hashCode() : 0);
      result = result * 37 + (req_int32 != null ? req_int32.hashCode() : 0);
      result = result * 37 + (req_uint32 != null ? req_uint32.hashCode() : 0);
      result = result * 37 + (req_sint32 != null ? req_sint32.hashCode() : 0);
      result = result * 37 + (req_fixed32 != null ? req_fixed32.hashCode() : 0);
      result = result * 37 + (req_sfixed32 != null ? req_sfixed32.hashCode() : 0);
      result = result * 37 + (req_int64 != null ? req_int64.hashCode() : 0);
      result = result * 37 + (req_uint64 != null ? req_uint64.hashCode() : 0);
      result = result * 37 + (req_sint64 != null ? req_sint64.hashCode() : 0);
      result = result * 37 + (req_fixed64 != null ? req_fixed64.hashCode() : 0);
      result = result * 37 + (req_sfixed64 != null ? req_sfixed64.hashCode() : 0);
      result = result * 37 + (req_bool != null ? req_bool.hashCode() : 0);
      result = result * 37 + (req_float != null ? req_float.hashCode() : 0);
      result = result * 37 + (req_double != null ? req_double.hashCode() : 0);
      result = result * 37 + (req_string != null ? req_string.hashCode() : 0);
      result = result * 37 + (req_bytes != null ? req_bytes.hashCode() : 0);
      result = result * 37 + (req_nested_enum != null ? req_nested_enum.hashCode() : 0);
      result = result * 37 + (req_nested_message != null ? req_nested_message.hashCode() : 0);
      result = result * 37 + (rep_int32 != null ? rep_int32.hashCode() : 0);
      result = result * 37 + (rep_uint32 != null ? rep_uint32.hashCode() : 0);
      result = result * 37 + (rep_sint32 != null ? rep_sint32.hashCode() : 0);
      result = result * 37 + (rep_fixed32 != null ? rep_fixed32.hashCode() : 0);
      result = result * 37 + (rep_sfixed32 != null ? rep_sfixed32.hashCode() : 0);
      result = result * 37 + (rep_int64 != null ? rep_int64.hashCode() : 0);
      result = result * 37 + (rep_uint64 != null ? rep_uint64.hashCode() : 0);
      result = result * 37 + (rep_sint64 != null ? rep_sint64.hashCode() : 0);
      result = result * 37 + (rep_fixed64 != null ? rep_fixed64.hashCode() : 0);
      result = result * 37 + (rep_sfixed64 != null ? rep_sfixed64.hashCode() : 0);
      result = result * 37 + (rep_bool != null ? rep_bool.hashCode() : 0);
      result = result * 37 + (rep_float != null ? rep_float.hashCode() : 0);
      result = result * 37 + (rep_double != null ? rep_double.hashCode() : 0);
      result = result * 37 + (rep_string != null ? rep_string.hashCode() : 0);
      result = result * 37 + (rep_bytes != null ? rep_bytes.hashCode() : 0);
      result = result * 37 + (rep_nested_enum != null ? rep_nested_enum.hashCode() : 0);
      result = result * 37 + (rep_nested_message != null ? rep_nested_message.hashCode() : 0);
      result = result * 37 + (pack_int32 != null ? pack_int32.hashCode() : 0);
      result = result * 37 + (pack_uint32 != null ? pack_uint32.hashCode() : 0);
      result = result * 37 + (pack_sint32 != null ? pack_sint32.hashCode() : 0);
      result = result * 37 + (pack_fixed32 != null ? pack_fixed32.hashCode() : 0);
      result = result * 37 + (pack_sfixed32 != null ? pack_sfixed32.hashCode() : 0);
      result = result * 37 + (pack_int64 != null ? pack_int64.hashCode() : 0);
      result = result * 37 + (pack_uint64 != null ? pack_uint64.hashCode() : 0);
      result = result * 37 + (pack_sint64 != null ? pack_sint64.hashCode() : 0);
      result = result * 37 + (pack_fixed64 != null ? pack_fixed64.hashCode() : 0);
      result = result * 37 + (pack_sfixed64 != null ? pack_sfixed64.hashCode() : 0);
      result = result * 37 + (pack_bool != null ? pack_bool.hashCode() : 0);
      result = result * 37 + (pack_float != null ? pack_float.hashCode() : 0);
      result = result * 37 + (pack_double != null ? pack_double.hashCode() : 0);
      result = result * 37 + (pack_nested_enum != null ? pack_nested_enum.hashCode() : 0);
      result = result * 37 + (default_int32 != null ? default_int32.hashCode() : 0);
      result = result * 37 + (default_uint32 != null ? default_uint32.hashCode() : 0);
      result = result * 37 + (default_sint32 != null ? default_sint32.hashCode() : 0);
      result = result * 37 + (default_fixed32 != null ? default_fixed32.hashCode() : 0);
      result = result * 37 + (default_sfixed32 != null ? default_sfixed32.hashCode() : 0);
      result = result * 37 + (default_int64 != null ? default_int64.hashCode() : 0);
      result = result * 37 + (default_uint64 != null ? default_uint64.hashCode() : 0);
      result = result * 37 + (default_sint64 != null ? default_sint64.hashCode() : 0);
      result = result * 37 + (default_fixed64 != null ? default_fixed64.hashCode() : 0);
      result = result * 37 + (default_sfixed64 != null ? default_sfixed64.hashCode() : 0);
      result = result * 37 + (default_bool != null ? default_bool.hashCode() : 0);
      result = result * 37 + (default_float != null ? default_float.hashCode() : 0);
      result = result * 37 + (default_double != null ? default_double.hashCode() : 0);
      result = result * 37 + (default_string != null ? default_string.hashCode() : 0);
      result = result * 37 + (default_bytes != null ? default_bytes.hashCode() : 0);
      result = result * 37 + (default_nested_enum != null ? default_nested_enum.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends ExtendableBuilder<AllTypes> {

    public Integer opt_int32;
    public Integer opt_uint32;
    public Integer opt_sint32;
    public Integer opt_fixed32;
    public Integer opt_sfixed32;
    public Long opt_int64;
    public Long opt_uint64;
    public Long opt_sint64;
    public Long opt_fixed64;
    public Long opt_sfixed64;
    public Boolean opt_bool;
    public Float opt_float;
    public Double opt_double;
    public String opt_string;
    public ByteString opt_bytes;
    public NestedEnum opt_nested_enum;
    public NestedMessage opt_nested_message;
    public Integer req_int32;
    public Integer req_uint32;
    public Integer req_sint32;
    public Integer req_fixed32;
    public Integer req_sfixed32;
    public Long req_int64;
    public Long req_uint64;
    public Long req_sint64;
    public Long req_fixed64;
    public Long req_sfixed64;
    public Boolean req_bool;
    public Float req_float;
    public Double req_double;
    public String req_string;
    public ByteString req_bytes;
    public NestedEnum req_nested_enum;
    public NestedMessage req_nested_message;
    public List<Integer> rep_int32;
    public List<Integer> rep_uint32;
    public List<Integer> rep_sint32;
    public List<Integer> rep_fixed32;
    public List<Integer> rep_sfixed32;
    public List<Long> rep_int64;
    public List<Long> rep_uint64;
    public List<Long> rep_sint64;
    public List<Long> rep_fixed64;
    public List<Long> rep_sfixed64;
    public List<Boolean> rep_bool;
    public List<Float> rep_float;
    public List<Double> rep_double;
    public List<String> rep_string;
    public List<ByteString> rep_bytes;
    public List<NestedEnum> rep_nested_enum;
    public List<NestedMessage> rep_nested_message;
    public List<Integer> pack_int32;
    public List<Integer> pack_uint32;
    public List<Integer> pack_sint32;
    public List<Integer> pack_fixed32;
    public List<Integer> pack_sfixed32;
    public List<Long> pack_int64;
    public List<Long> pack_uint64;
    public List<Long> pack_sint64;
    public List<Long> pack_fixed64;
    public List<Long> pack_sfixed64;
    public List<Boolean> pack_bool;
    public List<Float> pack_float;
    public List<Double> pack_double;
    public List<NestedEnum> pack_nested_enum;
    public Integer default_int32;
    public Integer default_uint32;
    public Integer default_sint32;
    public Integer default_fixed32;
    public Integer default_sfixed32;
    public Long default_int64;
    public Long default_uint64;
    public Long default_sint64;
    public Long default_fixed64;
    public Long default_sfixed64;
    public Boolean default_bool;
    public Float default_float;
    public Double default_double;
    public String default_string;
    public ByteString default_bytes;
    public NestedEnum default_nested_enum;

    public Builder() {
    }

    public Builder(AllTypes message) {
      super(message);
      if (message == null) return;
      this.opt_int32 = message.opt_int32;
      this.opt_uint32 = message.opt_uint32;
      this.opt_sint32 = message.opt_sint32;
      this.opt_fixed32 = message.opt_fixed32;
      this.opt_sfixed32 = message.opt_sfixed32;
      this.opt_int64 = message.opt_int64;
      this.opt_uint64 = message.opt_uint64;
      this.opt_sint64 = message.opt_sint64;
      this.opt_fixed64 = message.opt_fixed64;
      this.opt_sfixed64 = message.opt_sfixed64;
      this.opt_bool = message.opt_bool;
      this.opt_float = message.opt_float;
      this.opt_double = message.opt_double;
      this.opt_string = message.opt_string;
      this.opt_bytes = message.opt_bytes;
      this.opt_nested_enum = message.opt_nested_enum;
      this.opt_nested_message = message.opt_nested_message;
      this.req_int32 = message.req_int32;
      this.req_uint32 = message.req_uint32;
      this.req_sint32 = message.req_sint32;
      this.req_fixed32 = message.req_fixed32;
      this.req_sfixed32 = message.req_sfixed32;
      this.req_int64 = message.req_int64;
      this.req_uint64 = message.req_uint64;
      this.req_sint64 = message.req_sint64;
      this.req_fixed64 = message.req_fixed64;
      this.req_sfixed64 = message.req_sfixed64;
      this.req_bool = message.req_bool;
      this.req_float = message.req_float;
      this.req_double = message.req_double;
      this.req_string = message.req_string;
      this.req_bytes = message.req_bytes;
      this.req_nested_enum = message.req_nested_enum;
      this.req_nested_message = message.req_nested_message;
      this.rep_int32 = copyOf(message.rep_int32);
      this.rep_uint32 = copyOf(message.rep_uint32);
      this.rep_sint32 = copyOf(message.rep_sint32);
      this.rep_fixed32 = copyOf(message.rep_fixed32);
      this.rep_sfixed32 = copyOf(message.rep_sfixed32);
      this.rep_int64 = copyOf(message.rep_int64);
      this.rep_uint64 = copyOf(message.rep_uint64);
      this.rep_sint64 = copyOf(message.rep_sint64);
      this.rep_fixed64 = copyOf(message.rep_fixed64);
      this.rep_sfixed64 = copyOf(message.rep_sfixed64);
      this.rep_bool = copyOf(message.rep_bool);
      this.rep_float = copyOf(message.rep_float);
      this.rep_double = copyOf(message.rep_double);
      this.rep_string = copyOf(message.rep_string);
      this.rep_bytes = copyOf(message.rep_bytes);
      this.rep_nested_enum = copyOf(message.rep_nested_enum);
      this.rep_nested_message = copyOf(message.rep_nested_message);
      this.pack_int32 = copyOf(message.pack_int32);
      this.pack_uint32 = copyOf(message.pack_uint32);
      this.pack_sint32 = copyOf(message.pack_sint32);
      this.pack_fixed32 = copyOf(message.pack_fixed32);
      this.pack_sfixed32 = copyOf(message.pack_sfixed32);
      this.pack_int64 = copyOf(message.pack_int64);
      this.pack_uint64 = copyOf(message.pack_uint64);
      this.pack_sint64 = copyOf(message.pack_sint64);
      this.pack_fixed64 = copyOf(message.pack_fixed64);
      this.pack_sfixed64 = copyOf(message.pack_sfixed64);
      this.pack_bool = copyOf(message.pack_bool);
      this.pack_float = copyOf(message.pack_float);
      this.pack_double = copyOf(message.pack_double);
      this.pack_nested_enum = copyOf(message.pack_nested_enum);
      this.default_int32 = message.default_int32;
      this.default_uint32 = message.default_uint32;
      this.default_sint32 = message.default_sint32;
      this.default_fixed32 = message.default_fixed32;
      this.default_sfixed32 = message.default_sfixed32;
      this.default_int64 = message.default_int64;
      this.default_uint64 = message.default_uint64;
      this.default_sint64 = message.default_sint64;
      this.default_fixed64 = message.default_fixed64;
      this.default_sfixed64 = message.default_sfixed64;
      this.default_bool = message.default_bool;
      this.default_float = message.default_float;
      this.default_double = message.default_double;
      this.default_string = message.default_string;
      this.default_bytes = message.default_bytes;
      this.default_nested_enum = message.default_nested_enum;
    }

    public Builder opt_int32(Integer opt_int32) {
      this.opt_int32 = opt_int32;
      return this;
    }

    public Builder opt_uint32(Integer opt_uint32) {
      this.opt_uint32 = opt_uint32;
      return this;
    }

    public Builder opt_sint32(Integer opt_sint32) {
      this.opt_sint32 = opt_sint32;
      return this;
    }

    public Builder opt_fixed32(Integer opt_fixed32) {
      this.opt_fixed32 = opt_fixed32;
      return this;
    }

    public Builder opt_sfixed32(Integer opt_sfixed32) {
      this.opt_sfixed32 = opt_sfixed32;
      return this;
    }

    public Builder opt_int64(Long opt_int64) {
      this.opt_int64 = opt_int64;
      return this;
    }

    public Builder opt_uint64(Long opt_uint64) {
      this.opt_uint64 = opt_uint64;
      return this;
    }

    public Builder opt_sint64(Long opt_sint64) {
      this.opt_sint64 = opt_sint64;
      return this;
    }

    public Builder opt_fixed64(Long opt_fixed64) {
      this.opt_fixed64 = opt_fixed64;
      return this;
    }

    public Builder opt_sfixed64(Long opt_sfixed64) {
      this.opt_sfixed64 = opt_sfixed64;
      return this;
    }

    public Builder opt_bool(Boolean opt_bool) {
      this.opt_bool = opt_bool;
      return this;
    }

    public Builder opt_float(Float opt_float) {
      this.opt_float = opt_float;
      return this;
    }

    public Builder opt_double(Double opt_double) {
      this.opt_double = opt_double;
      return this;
    }

    public Builder opt_string(String opt_string) {
      this.opt_string = opt_string;
      return this;
    }

    public Builder opt_bytes(ByteString opt_bytes) {
      this.opt_bytes = opt_bytes;
      return this;
    }

    public Builder opt_nested_enum(NestedEnum opt_nested_enum) {
      this.opt_nested_enum = opt_nested_enum;
      return this;
    }

    public Builder opt_nested_message(NestedMessage opt_nested_message) {
      this.opt_nested_message = opt_nested_message;
      return this;
    }

    public Builder req_int32(Integer req_int32) {
      this.req_int32 = req_int32;
      return this;
    }

    public Builder req_uint32(Integer req_uint32) {
      this.req_uint32 = req_uint32;
      return this;
    }

    public Builder req_sint32(Integer req_sint32) {
      this.req_sint32 = req_sint32;
      return this;
    }

    public Builder req_fixed32(Integer req_fixed32) {
      this.req_fixed32 = req_fixed32;
      return this;
    }

    public Builder req_sfixed32(Integer req_sfixed32) {
      this.req_sfixed32 = req_sfixed32;
      return this;
    }

    public Builder req_int64(Long req_int64) {
      this.req_int64 = req_int64;
      return this;
    }

    public Builder req_uint64(Long req_uint64) {
      this.req_uint64 = req_uint64;
      return this;
    }

    public Builder req_sint64(Long req_sint64) {
      this.req_sint64 = req_sint64;
      return this;
    }

    public Builder req_fixed64(Long req_fixed64) {
      this.req_fixed64 = req_fixed64;
      return this;
    }

    public Builder req_sfixed64(Long req_sfixed64) {
      this.req_sfixed64 = req_sfixed64;
      return this;
    }

    public Builder req_bool(Boolean req_bool) {
      this.req_bool = req_bool;
      return this;
    }

    public Builder req_float(Float req_float) {
      this.req_float = req_float;
      return this;
    }

    public Builder req_double(Double req_double) {
      this.req_double = req_double;
      return this;
    }

    public Builder req_string(String req_string) {
      this.req_string = req_string;
      return this;
    }

    public Builder req_bytes(ByteString req_bytes) {
      this.req_bytes = req_bytes;
      return this;
    }

    public Builder req_nested_enum(NestedEnum req_nested_enum) {
      this.req_nested_enum = req_nested_enum;
      return this;
    }

    public Builder req_nested_message(NestedMessage req_nested_message) {
      this.req_nested_message = req_nested_message;
      return this;
    }

    public Builder rep_int32(List<Integer> rep_int32) {
      this.rep_int32 = rep_int32;
      return this;
    }

    public Builder rep_uint32(List<Integer> rep_uint32) {
      this.rep_uint32 = rep_uint32;
      return this;
    }

    public Builder rep_sint32(List<Integer> rep_sint32) {
      this.rep_sint32 = rep_sint32;
      return this;
    }

    public Builder rep_fixed32(List<Integer> rep_fixed32) {
      this.rep_fixed32 = rep_fixed32;
      return this;
    }

    public Builder rep_sfixed32(List<Integer> rep_sfixed32) {
      this.rep_sfixed32 = rep_sfixed32;
      return this;
    }

    public Builder rep_int64(List<Long> rep_int64) {
      this.rep_int64 = rep_int64;
      return this;
    }

    public Builder rep_uint64(List<Long> rep_uint64) {
      this.rep_uint64 = rep_uint64;
      return this;
    }

    public Builder rep_sint64(List<Long> rep_sint64) {
      this.rep_sint64 = rep_sint64;
      return this;
    }

    public Builder rep_fixed64(List<Long> rep_fixed64) {
      this.rep_fixed64 = rep_fixed64;
      return this;
    }

    public Builder rep_sfixed64(List<Long> rep_sfixed64) {
      this.rep_sfixed64 = rep_sfixed64;
      return this;
    }

    public Builder rep_bool(List<Boolean> rep_bool) {
      this.rep_bool = rep_bool;
      return this;
    }

    public Builder rep_float(List<Float> rep_float) {
      this.rep_float = rep_float;
      return this;
    }

    public Builder rep_double(List<Double> rep_double) {
      this.rep_double = rep_double;
      return this;
    }

    public Builder rep_string(List<String> rep_string) {
      this.rep_string = rep_string;
      return this;
    }

    public Builder rep_bytes(List<ByteString> rep_bytes) {
      this.rep_bytes = rep_bytes;
      return this;
    }

    public Builder rep_nested_enum(List<NestedEnum> rep_nested_enum) {
      this.rep_nested_enum = rep_nested_enum;
      return this;
    }

    public Builder rep_nested_message(List<NestedMessage> rep_nested_message) {
      this.rep_nested_message = rep_nested_message;
      return this;
    }

    public Builder pack_int32(List<Integer> pack_int32) {
      this.pack_int32 = pack_int32;
      return this;
    }

    public Builder pack_uint32(List<Integer> pack_uint32) {
      this.pack_uint32 = pack_uint32;
      return this;
    }

    public Builder pack_sint32(List<Integer> pack_sint32) {
      this.pack_sint32 = pack_sint32;
      return this;
    }

    public Builder pack_fixed32(List<Integer> pack_fixed32) {
      this.pack_fixed32 = pack_fixed32;
      return this;
    }

    public Builder pack_sfixed32(List<Integer> pack_sfixed32) {
      this.pack_sfixed32 = pack_sfixed32;
      return this;
    }

    public Builder pack_int64(List<Long> pack_int64) {
      this.pack_int64 = pack_int64;
      return this;
    }

    public Builder pack_uint64(List<Long> pack_uint64) {
      this.pack_uint64 = pack_uint64;
      return this;
    }

    public Builder pack_sint64(List<Long> pack_sint64) {
      this.pack_sint64 = pack_sint64;
      return this;
    }

    public Builder pack_fixed64(List<Long> pack_fixed64) {
      this.pack_fixed64 = pack_fixed64;
      return this;
    }

    public Builder pack_sfixed64(List<Long> pack_sfixed64) {
      this.pack_sfixed64 = pack_sfixed64;
      return this;
    }

    public Builder pack_bool(List<Boolean> pack_bool) {
      this.pack_bool = pack_bool;
      return this;
    }

    public Builder pack_float(List<Float> pack_float) {
      this.pack_float = pack_float;
      return this;
    }

    public Builder pack_double(List<Double> pack_double) {
      this.pack_double = pack_double;
      return this;
    }

    public Builder pack_nested_enum(List<NestedEnum> pack_nested_enum) {
      this.pack_nested_enum = pack_nested_enum;
      return this;
    }

    public Builder default_int32(Integer default_int32) {
      this.default_int32 = default_int32;
      return this;
    }

    public Builder default_uint32(Integer default_uint32) {
      this.default_uint32 = default_uint32;
      return this;
    }

    public Builder default_sint32(Integer default_sint32) {
      this.default_sint32 = default_sint32;
      return this;
    }

    public Builder default_fixed32(Integer default_fixed32) {
      this.default_fixed32 = default_fixed32;
      return this;
    }

    public Builder default_sfixed32(Integer default_sfixed32) {
      this.default_sfixed32 = default_sfixed32;
      return this;
    }

    public Builder default_int64(Long default_int64) {
      this.default_int64 = default_int64;
      return this;
    }

    public Builder default_uint64(Long default_uint64) {
      this.default_uint64 = default_uint64;
      return this;
    }

    public Builder default_sint64(Long default_sint64) {
      this.default_sint64 = default_sint64;
      return this;
    }

    public Builder default_fixed64(Long default_fixed64) {
      this.default_fixed64 = default_fixed64;
      return this;
    }

    public Builder default_sfixed64(Long default_sfixed64) {
      this.default_sfixed64 = default_sfixed64;
      return this;
    }

    public Builder default_bool(Boolean default_bool) {
      this.default_bool = default_bool;
      return this;
    }

    public Builder default_float(Float default_float) {
      this.default_float = default_float;
      return this;
    }

    public Builder default_double(Double default_double) {
      this.default_double = default_double;
      return this;
    }

    public Builder default_string(String default_string) {
      this.default_string = default_string;
      return this;
    }

    public Builder default_bytes(ByteString default_bytes) {
      this.default_bytes = default_bytes;
      return this;
    }

    public Builder default_nested_enum(NestedEnum default_nested_enum) {
      this.default_nested_enum = default_nested_enum;
      return this;
    }

    @Override
    public <E> Builder setExtension(Extension<AllTypes, E> extension, E value) {
      super.setExtension(extension, value);
      return this;
    }

    @Override
    public AllTypes build() {
      checkRequiredFields();
      return new AllTypes(this);
    }
  }

  public enum NestedEnum {
    @ProtoEnum(1)
    A,
  }

  public static final class NestedMessage extends Message {

    public static final Integer DEFAULT_A = 0;

    @ProtoField(
      tag = 1,
      type = INT32
    )
    public final Integer a;

    private NestedMessage(Builder builder) {
      super(builder);
      this.a = builder.a;
    }

    @Override
    public boolean equals(Object other) {
      if (!(other instanceof NestedMessage)) return false;
      return equals(a, ((NestedMessage) other).a);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      return result != 0 ? result : (hashCode = a != null ? a.hashCode() : 0);
    }

    public static final class Builder extends Message.Builder<NestedMessage> {

      public Integer a;

      public Builder() {
      }

      public Builder(NestedMessage message) {
        super(message);
        if (message == null) return;
        this.a = message.a;
      }

      public Builder a(Integer a) {
        this.a = a;
        return this;
      }

      @Override
      public NestedMessage build() {
        return new NestedMessage(this);
      }
    }
  }
}
