/**
 * Code generated by "Wire" protobuf compiler, do not edit.
 * Source file: ../wire-runtime/src/main/proto/all_types.proto
 */
package com.squareup.wire.protos.alltypes;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;
import com.squareup.wire.UninitializedMessageException;
import com.squareup.wire.Wire;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public final class AllTypes
    implements Message.ExtendableMessage<AllTypes> {

  public final Map<Extension<AllTypes, ?>, Object> extensionMap;

  public static final Integer opt_int32_default = 0;
  public static final Integer opt_uint32_default = 0;
  public static final Integer opt_sint32_default = 0;
  public static final Integer opt_fixed32_default = 0;
  public static final Integer opt_sfixed32_default = 0;
  public static final Long opt_int64_default = 0L;
  public static final Long opt_uint64_default = 0L;
  public static final Long opt_sint64_default = 0L;
  public static final Long opt_fixed64_default = 0L;
  public static final Long opt_sfixed64_default = 0L;
  public static final Boolean opt_bool_default = false;
  public static final Float opt_float_default = 0F;
  public static final Double opt_double_default = 0D;
  public static final String opt_string_default = "";
  public static final byte[] opt_bytes_default = new byte[0];
  public static final NestedEnum opt_nested_enum_default = NestedEnum.A;
  public static final NestedMessage opt_nested_message_default = Wire.getDefaultInstance(NestedMessage.class);
  public static final Integer req_int32_default = 0;
  public static final Integer req_uint32_default = 0;
  public static final Integer req_sint32_default = 0;
  public static final Integer req_fixed32_default = 0;
  public static final Integer req_sfixed32_default = 0;
  public static final Long req_int64_default = 0L;
  public static final Long req_uint64_default = 0L;
  public static final Long req_sint64_default = 0L;
  public static final Long req_fixed64_default = 0L;
  public static final Long req_sfixed64_default = 0L;
  public static final Boolean req_bool_default = false;
  public static final Float req_float_default = 0F;
  public static final Double req_double_default = 0D;
  public static final String req_string_default = "";
  public static final byte[] req_bytes_default = new byte[0];
  public static final NestedEnum req_nested_enum_default = NestedEnum.A;
  public static final NestedMessage req_nested_message_default = Wire.getDefaultInstance(NestedMessage.class);
  public static final List<Integer> rep_int32_default = java.util.Collections.emptyList();
  public static final List<Integer> rep_uint32_default = java.util.Collections.emptyList();
  public static final List<Integer> rep_sint32_default = java.util.Collections.emptyList();
  public static final List<Integer> rep_fixed32_default = java.util.Collections.emptyList();
  public static final List<Integer> rep_sfixed32_default = java.util.Collections.emptyList();
  public static final List<Long> rep_int64_default = java.util.Collections.emptyList();
  public static final List<Long> rep_uint64_default = java.util.Collections.emptyList();
  public static final List<Long> rep_sint64_default = java.util.Collections.emptyList();
  public static final List<Long> rep_fixed64_default = java.util.Collections.emptyList();
  public static final List<Long> rep_sfixed64_default = java.util.Collections.emptyList();
  public static final List<Boolean> rep_bool_default = java.util.Collections.emptyList();
  public static final List<Float> rep_float_default = java.util.Collections.emptyList();
  public static final List<Double> rep_double_default = java.util.Collections.emptyList();
  public static final List<String> rep_string_default = java.util.Collections.emptyList();
  public static final List<byte[]> rep_bytes_default = java.util.Collections.emptyList();
  public static final List<NestedEnum> rep_nested_enum_default = java.util.Collections.emptyList();
  public static final List<NestedMessage> rep_nested_message_default = java.util.Collections.emptyList();
  public static final List<Integer> pack_int32_default = java.util.Collections.emptyList();
  public static final List<Integer> pack_uint32_default = java.util.Collections.emptyList();
  public static final List<Integer> pack_sint32_default = java.util.Collections.emptyList();
  public static final List<Integer> pack_fixed32_default = java.util.Collections.emptyList();
  public static final List<Integer> pack_sfixed32_default = java.util.Collections.emptyList();
  public static final List<Long> pack_int64_default = java.util.Collections.emptyList();
  public static final List<Long> pack_uint64_default = java.util.Collections.emptyList();
  public static final List<Long> pack_sint64_default = java.util.Collections.emptyList();
  public static final List<Long> pack_fixed64_default = java.util.Collections.emptyList();
  public static final List<Long> pack_sfixed64_default = java.util.Collections.emptyList();
  public static final List<Boolean> pack_bool_default = java.util.Collections.emptyList();
  public static final List<Float> pack_float_default = java.util.Collections.emptyList();
  public static final List<Double> pack_double_default = java.util.Collections.emptyList();
  public static final List<String> pack_string_default = java.util.Collections.emptyList();
  public static final List<byte[]> pack_bytes_default = java.util.Collections.emptyList();
  public static final List<NestedEnum> pack_nested_enum_default = java.util.Collections.emptyList();
  public static final List<NestedMessage> pack_nested_message_default = java.util.Collections.emptyList();

  @ProtoField(
    tag = 1,
    type = Wire.INT32
  )
  public final Integer opt_int32;

  @ProtoField(
    tag = 2,
    type = Wire.UINT32
  )
  public final Integer opt_uint32;

  @ProtoField(
    tag = 3,
    type = Wire.SINT32
  )
  public final Integer opt_sint32;

  @ProtoField(
    tag = 4,
    type = Wire.FIXED32
  )
  public final Integer opt_fixed32;

  @ProtoField(
    tag = 5,
    type = Wire.SFIXED32
  )
  public final Integer opt_sfixed32;

  @ProtoField(
    tag = 6,
    type = Wire.INT64
  )
  public final Long opt_int64;

  @ProtoField(
    tag = 7,
    type = Wire.UINT64
  )
  public final Long opt_uint64;

  @ProtoField(
    tag = 8,
    type = Wire.SINT64
  )
  public final Long opt_sint64;

  @ProtoField(
    tag = 9,
    type = Wire.FIXED64
  )
  public final Long opt_fixed64;

  @ProtoField(
    tag = 10,
    type = Wire.SFIXED64
  )
  public final Long opt_sfixed64;

  @ProtoField(
    tag = 11,
    type = Wire.BOOL
  )
  public final Boolean opt_bool;

  @ProtoField(
    tag = 12,
    type = Wire.FLOAT
  )
  public final Float opt_float;

  @ProtoField(
    tag = 13,
    type = Wire.DOUBLE
  )
  public final Double opt_double;

  @ProtoField(
    tag = 14,
    type = Wire.STRING
  )
  public final String opt_string;

  @ProtoField(
    tag = 15,
    type = Wire.BYTES
  )
  public final byte[] opt_bytes;

  @ProtoField(
    tag = 16,
    type = Wire.ENUM
  )
  public final NestedEnum opt_nested_enum;

  @ProtoField(
    tag = 17
  )
  public final NestedMessage opt_nested_message;

  @ProtoField(
    tag = 101,
    type = Wire.INT32,
    label = Wire.REQUIRED
  )
  public final Integer req_int32;

  @ProtoField(
    tag = 102,
    type = Wire.UINT32,
    label = Wire.REQUIRED
  )
  public final Integer req_uint32;

  @ProtoField(
    tag = 103,
    type = Wire.SINT32,
    label = Wire.REQUIRED
  )
  public final Integer req_sint32;

  @ProtoField(
    tag = 104,
    type = Wire.FIXED32,
    label = Wire.REQUIRED
  )
  public final Integer req_fixed32;

  @ProtoField(
    tag = 105,
    type = Wire.SFIXED32,
    label = Wire.REQUIRED
  )
  public final Integer req_sfixed32;

  @ProtoField(
    tag = 106,
    type = Wire.INT64,
    label = Wire.REQUIRED
  )
  public final Long req_int64;

  @ProtoField(
    tag = 107,
    type = Wire.UINT64,
    label = Wire.REQUIRED
  )
  public final Long req_uint64;

  @ProtoField(
    tag = 108,
    type = Wire.SINT64,
    label = Wire.REQUIRED
  )
  public final Long req_sint64;

  @ProtoField(
    tag = 109,
    type = Wire.FIXED64,
    label = Wire.REQUIRED
  )
  public final Long req_fixed64;

  @ProtoField(
    tag = 110,
    type = Wire.SFIXED64,
    label = Wire.REQUIRED
  )
  public final Long req_sfixed64;

  @ProtoField(
    tag = 111,
    type = Wire.BOOL,
    label = Wire.REQUIRED
  )
  public final Boolean req_bool;

  @ProtoField(
    tag = 112,
    type = Wire.FLOAT,
    label = Wire.REQUIRED
  )
  public final Float req_float;

  @ProtoField(
    tag = 113,
    type = Wire.DOUBLE,
    label = Wire.REQUIRED
  )
  public final Double req_double;

  @ProtoField(
    tag = 114,
    type = Wire.STRING,
    label = Wire.REQUIRED
  )
  public final String req_string;

  @ProtoField(
    tag = 115,
    type = Wire.BYTES,
    label = Wire.REQUIRED
  )
  public final byte[] req_bytes;

  @ProtoField(
    tag = 116,
    type = Wire.ENUM,
    label = Wire.REQUIRED
  )
  public final NestedEnum req_nested_enum;

  @ProtoField(
    tag = 117,
    label = Wire.REQUIRED
  )
  public final NestedMessage req_nested_message;

  @ProtoField(
    tag = 201,
    type = Wire.INT32,
    label = Wire.REPEATED
  )
  public final List<Integer> rep_int32;

  @ProtoField(
    tag = 202,
    type = Wire.UINT32,
    label = Wire.REPEATED
  )
  public final List<Integer> rep_uint32;

  @ProtoField(
    tag = 203,
    type = Wire.SINT32,
    label = Wire.REPEATED
  )
  public final List<Integer> rep_sint32;

  @ProtoField(
    tag = 204,
    type = Wire.FIXED32,
    label = Wire.REPEATED
  )
  public final List<Integer> rep_fixed32;

  @ProtoField(
    tag = 205,
    type = Wire.SFIXED32,
    label = Wire.REPEATED
  )
  public final List<Integer> rep_sfixed32;

  @ProtoField(
    tag = 206,
    type = Wire.INT64,
    label = Wire.REPEATED
  )
  public final List<Long> rep_int64;

  @ProtoField(
    tag = 207,
    type = Wire.UINT64,
    label = Wire.REPEATED
  )
  public final List<Long> rep_uint64;

  @ProtoField(
    tag = 208,
    type = Wire.SINT64,
    label = Wire.REPEATED
  )
  public final List<Long> rep_sint64;

  @ProtoField(
    tag = 209,
    type = Wire.FIXED64,
    label = Wire.REPEATED
  )
  public final List<Long> rep_fixed64;

  @ProtoField(
    tag = 210,
    type = Wire.SFIXED64,
    label = Wire.REPEATED
  )
  public final List<Long> rep_sfixed64;

  @ProtoField(
    tag = 211,
    type = Wire.BOOL,
    label = Wire.REPEATED
  )
  public final List<Boolean> rep_bool;

  @ProtoField(
    tag = 212,
    type = Wire.FLOAT,
    label = Wire.REPEATED
  )
  public final List<Float> rep_float;

  @ProtoField(
    tag = 213,
    type = Wire.DOUBLE,
    label = Wire.REPEATED
  )
  public final List<Double> rep_double;

  @ProtoField(
    tag = 214,
    type = Wire.STRING,
    label = Wire.REPEATED
  )
  public final List<String> rep_string;

  @ProtoField(
    tag = 215,
    type = Wire.BYTES,
    label = Wire.REPEATED
  )
  public final List<byte[]> rep_bytes;

  @ProtoField(
    tag = 216,
    type = Wire.ENUM,
    label = Wire.REPEATED
  )
  public final List<NestedEnum> rep_nested_enum;

  @ProtoField(
    tag = 217,
    label = Wire.REPEATED
  )
  public final List<NestedMessage> rep_nested_message;

  @ProtoField(
    tag = 301,
    type = Wire.INT32,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Integer> pack_int32;

  @ProtoField(
    tag = 302,
    type = Wire.UINT32,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Integer> pack_uint32;

  @ProtoField(
    tag = 303,
    type = Wire.SINT32,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Integer> pack_sint32;

  @ProtoField(
    tag = 304,
    type = Wire.FIXED32,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Integer> pack_fixed32;

  @ProtoField(
    tag = 305,
    type = Wire.SFIXED32,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Integer> pack_sfixed32;

  @ProtoField(
    tag = 306,
    type = Wire.INT64,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Long> pack_int64;

  @ProtoField(
    tag = 307,
    type = Wire.UINT64,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Long> pack_uint64;

  @ProtoField(
    tag = 308,
    type = Wire.SINT64,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Long> pack_sint64;

  @ProtoField(
    tag = 309,
    type = Wire.FIXED64,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Long> pack_fixed64;

  @ProtoField(
    tag = 310,
    type = Wire.SFIXED64,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Long> pack_sfixed64;

  @ProtoField(
    tag = 311,
    type = Wire.BOOL,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Boolean> pack_bool;

  @ProtoField(
    tag = 312,
    type = Wire.FLOAT,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Float> pack_float;

  @ProtoField(
    tag = 313,
    type = Wire.DOUBLE,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<Double> pack_double;

  @ProtoField(
    tag = 314,
    type = Wire.STRING,
    label = Wire.REPEATED
  )
  public final List<String> pack_string;

  /**
   * ignored
   */
  @ProtoField(
    tag = 315,
    type = Wire.BYTES,
    label = Wire.REPEATED
  )
  public final List<byte[]> pack_bytes;

  /**
   * ignored
   */
  @ProtoField(
    tag = 316,
    type = Wire.ENUM,
    packed = true,
    label = Wire.REPEATED
  )
  public final List<NestedEnum> pack_nested_enum;

  @ProtoField(
    tag = 317,
    label = Wire.REPEATED
  )
  public final List<NestedMessage> pack_nested_message;

  private AllTypes(Builder builder) {
    this.opt_int32 = builder.opt_int32;
    this.opt_uint32 = builder.opt_uint32;
    this.opt_sint32 = builder.opt_sint32;
    this.opt_fixed32 = builder.opt_fixed32;
    this.opt_sfixed32 = builder.opt_sfixed32;
    this.opt_int64 = builder.opt_int64;
    this.opt_uint64 = builder.opt_uint64;
    this.opt_sint64 = builder.opt_sint64;
    this.opt_fixed64 = builder.opt_fixed64;
    this.opt_sfixed64 = builder.opt_sfixed64;
    this.opt_bool = builder.opt_bool;
    this.opt_float = builder.opt_float;
    this.opt_double = builder.opt_double;
    this.opt_string = builder.opt_string;
    this.opt_bytes = builder.opt_bytes;
    this.opt_nested_enum = builder.opt_nested_enum;
    this.opt_nested_message = builder.opt_nested_message;
    this.req_int32 = builder.req_int32;
    this.req_uint32 = builder.req_uint32;
    this.req_sint32 = builder.req_sint32;
    this.req_fixed32 = builder.req_fixed32;
    this.req_sfixed32 = builder.req_sfixed32;
    this.req_int64 = builder.req_int64;
    this.req_uint64 = builder.req_uint64;
    this.req_sint64 = builder.req_sint64;
    this.req_fixed64 = builder.req_fixed64;
    this.req_sfixed64 = builder.req_sfixed64;
    this.req_bool = builder.req_bool;
    this.req_float = builder.req_float;
    this.req_double = builder.req_double;
    this.req_string = builder.req_string;
    this.req_bytes = builder.req_bytes;
    this.req_nested_enum = builder.req_nested_enum;
    this.req_nested_message = builder.req_nested_message;
    this.rep_int32 = Wire.unmodifiableCopyOf(builder.rep_int32);
    this.rep_uint32 = Wire.unmodifiableCopyOf(builder.rep_uint32);
    this.rep_sint32 = Wire.unmodifiableCopyOf(builder.rep_sint32);
    this.rep_fixed32 = Wire.unmodifiableCopyOf(builder.rep_fixed32);
    this.rep_sfixed32 = Wire.unmodifiableCopyOf(builder.rep_sfixed32);
    this.rep_int64 = Wire.unmodifiableCopyOf(builder.rep_int64);
    this.rep_uint64 = Wire.unmodifiableCopyOf(builder.rep_uint64);
    this.rep_sint64 = Wire.unmodifiableCopyOf(builder.rep_sint64);
    this.rep_fixed64 = Wire.unmodifiableCopyOf(builder.rep_fixed64);
    this.rep_sfixed64 = Wire.unmodifiableCopyOf(builder.rep_sfixed64);
    this.rep_bool = Wire.unmodifiableCopyOf(builder.rep_bool);
    this.rep_float = Wire.unmodifiableCopyOf(builder.rep_float);
    this.rep_double = Wire.unmodifiableCopyOf(builder.rep_double);
    this.rep_string = Wire.unmodifiableCopyOf(builder.rep_string);
    this.rep_bytes = Wire.unmodifiableCopyOf(builder.rep_bytes);
    this.rep_nested_enum = Wire.unmodifiableCopyOf(builder.rep_nested_enum);
    this.rep_nested_message = Wire.unmodifiableCopyOf(builder.rep_nested_message);
    this.pack_int32 = Wire.unmodifiableCopyOf(builder.pack_int32);
    this.pack_uint32 = Wire.unmodifiableCopyOf(builder.pack_uint32);
    this.pack_sint32 = Wire.unmodifiableCopyOf(builder.pack_sint32);
    this.pack_fixed32 = Wire.unmodifiableCopyOf(builder.pack_fixed32);
    this.pack_sfixed32 = Wire.unmodifiableCopyOf(builder.pack_sfixed32);
    this.pack_int64 = Wire.unmodifiableCopyOf(builder.pack_int64);
    this.pack_uint64 = Wire.unmodifiableCopyOf(builder.pack_uint64);
    this.pack_sint64 = Wire.unmodifiableCopyOf(builder.pack_sint64);
    this.pack_fixed64 = Wire.unmodifiableCopyOf(builder.pack_fixed64);
    this.pack_sfixed64 = Wire.unmodifiableCopyOf(builder.pack_sfixed64);
    this.pack_bool = Wire.unmodifiableCopyOf(builder.pack_bool);
    this.pack_float = Wire.unmodifiableCopyOf(builder.pack_float);
    this.pack_double = Wire.unmodifiableCopyOf(builder.pack_double);
    this.pack_string = Wire.unmodifiableCopyOf(builder.pack_string);
    this.pack_bytes = Wire.unmodifiableCopyOf(builder.pack_bytes);
    this.pack_nested_enum = Wire.unmodifiableCopyOf(builder.pack_nested_enum);
    this.pack_nested_message = Wire.unmodifiableCopyOf(builder.pack_nested_message);
    this.extensionMap = Collections.unmodifiableMap(new TreeMap<Extension<AllTypes, ?>, Object>(builder.extensionMap));
  }

  @Override
  public <Type> Type getExtension(Extension<AllTypes, Type> extension) {
    return (Type) extensionMap.get(extension);
  }

  @Override
  public boolean equals(Object other) {
    if (!(other instanceof AllTypes)) return false;
    AllTypes o = (AllTypes) other;
    if (!extensionMap.equals(o.extensionMap)) return false;
    if (!Wire.equals(opt_int32, o.opt_int32)) return false;
    if (!Wire.equals(opt_uint32, o.opt_uint32)) return false;
    if (!Wire.equals(opt_sint32, o.opt_sint32)) return false;
    if (!Wire.equals(opt_fixed32, o.opt_fixed32)) return false;
    if (!Wire.equals(opt_sfixed32, o.opt_sfixed32)) return false;
    if (!Wire.equals(opt_int64, o.opt_int64)) return false;
    if (!Wire.equals(opt_uint64, o.opt_uint64)) return false;
    if (!Wire.equals(opt_sint64, o.opt_sint64)) return false;
    if (!Wire.equals(opt_fixed64, o.opt_fixed64)) return false;
    if (!Wire.equals(opt_sfixed64, o.opt_sfixed64)) return false;
    if (!Wire.equals(opt_bool, o.opt_bool)) return false;
    if (!Wire.equals(opt_float, o.opt_float)) return false;
    if (!Wire.equals(opt_double, o.opt_double)) return false;
    if (!Wire.equals(opt_string, o.opt_string)) return false;
    if (!Wire.equals(opt_bytes, o.opt_bytes)) return false;
    if (!Wire.equals(opt_nested_enum, o.opt_nested_enum)) return false;
    if (!Wire.equals(opt_nested_message, o.opt_nested_message)) return false;
    if (!Wire.equals(req_int32, o.req_int32)) return false;
    if (!Wire.equals(req_uint32, o.req_uint32)) return false;
    if (!Wire.equals(req_sint32, o.req_sint32)) return false;
    if (!Wire.equals(req_fixed32, o.req_fixed32)) return false;
    if (!Wire.equals(req_sfixed32, o.req_sfixed32)) return false;
    if (!Wire.equals(req_int64, o.req_int64)) return false;
    if (!Wire.equals(req_uint64, o.req_uint64)) return false;
    if (!Wire.equals(req_sint64, o.req_sint64)) return false;
    if (!Wire.equals(req_fixed64, o.req_fixed64)) return false;
    if (!Wire.equals(req_sfixed64, o.req_sfixed64)) return false;
    if (!Wire.equals(req_bool, o.req_bool)) return false;
    if (!Wire.equals(req_float, o.req_float)) return false;
    if (!Wire.equals(req_double, o.req_double)) return false;
    if (!Wire.equals(req_string, o.req_string)) return false;
    if (!Wire.equals(req_bytes, o.req_bytes)) return false;
    if (!Wire.equals(req_nested_enum, o.req_nested_enum)) return false;
    if (!Wire.equals(req_nested_message, o.req_nested_message)) return false;
    if (!Wire.equals(rep_int32, o.rep_int32)) return false;
    if (!Wire.equals(rep_uint32, o.rep_uint32)) return false;
    if (!Wire.equals(rep_sint32, o.rep_sint32)) return false;
    if (!Wire.equals(rep_fixed32, o.rep_fixed32)) return false;
    if (!Wire.equals(rep_sfixed32, o.rep_sfixed32)) return false;
    if (!Wire.equals(rep_int64, o.rep_int64)) return false;
    if (!Wire.equals(rep_uint64, o.rep_uint64)) return false;
    if (!Wire.equals(rep_sint64, o.rep_sint64)) return false;
    if (!Wire.equals(rep_fixed64, o.rep_fixed64)) return false;
    if (!Wire.equals(rep_sfixed64, o.rep_sfixed64)) return false;
    if (!Wire.equals(rep_bool, o.rep_bool)) return false;
    if (!Wire.equals(rep_float, o.rep_float)) return false;
    if (!Wire.equals(rep_double, o.rep_double)) return false;
    if (!Wire.equals(rep_string, o.rep_string)) return false;
    if (!Wire.equals(rep_bytes, o.rep_bytes)) return false;
    if (!Wire.equals(rep_nested_enum, o.rep_nested_enum)) return false;
    if (!Wire.equals(rep_nested_message, o.rep_nested_message)) return false;
    if (!Wire.equals(pack_int32, o.pack_int32)) return false;
    if (!Wire.equals(pack_uint32, o.pack_uint32)) return false;
    if (!Wire.equals(pack_sint32, o.pack_sint32)) return false;
    if (!Wire.equals(pack_fixed32, o.pack_fixed32)) return false;
    if (!Wire.equals(pack_sfixed32, o.pack_sfixed32)) return false;
    if (!Wire.equals(pack_int64, o.pack_int64)) return false;
    if (!Wire.equals(pack_uint64, o.pack_uint64)) return false;
    if (!Wire.equals(pack_sint64, o.pack_sint64)) return false;
    if (!Wire.equals(pack_fixed64, o.pack_fixed64)) return false;
    if (!Wire.equals(pack_sfixed64, o.pack_sfixed64)) return false;
    if (!Wire.equals(pack_bool, o.pack_bool)) return false;
    if (!Wire.equals(pack_float, o.pack_float)) return false;
    if (!Wire.equals(pack_double, o.pack_double)) return false;
    if (!Wire.equals(pack_string, o.pack_string)) return false;
    if (!Wire.equals(pack_bytes, o.pack_bytes)) return false;
    if (!Wire.equals(pack_nested_enum, o.pack_nested_enum)) return false;
    if (!Wire.equals(pack_nested_message, o.pack_nested_message)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = extensionMap.hashCode();
    hashCode = hashCode * 37 + (opt_int32 != null ? opt_int32.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_uint32 != null ? opt_uint32.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_sint32 != null ? opt_sint32.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_fixed32 != null ? opt_fixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_sfixed32 != null ? opt_sfixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_int64 != null ? opt_int64.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_uint64 != null ? opt_uint64.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_sint64 != null ? opt_sint64.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_fixed64 != null ? opt_fixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_sfixed64 != null ? opt_sfixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_bool != null ? opt_bool.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_float != null ? opt_float.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_double != null ? opt_double.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_string != null ? opt_string.hashCode() : 0);
    hashCode = hashCode * 37 + Wire.hashCode(opt_bytes);
    hashCode = hashCode * 37 + (opt_nested_enum != null ? opt_nested_enum.hashCode() : 0);
    hashCode = hashCode * 37 + (opt_nested_message != null ? opt_nested_message.hashCode() : 0);
    hashCode = hashCode * 37 + (req_int32 != null ? req_int32.hashCode() : 0);
    hashCode = hashCode * 37 + (req_uint32 != null ? req_uint32.hashCode() : 0);
    hashCode = hashCode * 37 + (req_sint32 != null ? req_sint32.hashCode() : 0);
    hashCode = hashCode * 37 + (req_fixed32 != null ? req_fixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (req_sfixed32 != null ? req_sfixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (req_int64 != null ? req_int64.hashCode() : 0);
    hashCode = hashCode * 37 + (req_uint64 != null ? req_uint64.hashCode() : 0);
    hashCode = hashCode * 37 + (req_sint64 != null ? req_sint64.hashCode() : 0);
    hashCode = hashCode * 37 + (req_fixed64 != null ? req_fixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (req_sfixed64 != null ? req_sfixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (req_bool != null ? req_bool.hashCode() : 0);
    hashCode = hashCode * 37 + (req_float != null ? req_float.hashCode() : 0);
    hashCode = hashCode * 37 + (req_double != null ? req_double.hashCode() : 0);
    hashCode = hashCode * 37 + (req_string != null ? req_string.hashCode() : 0);
    hashCode = hashCode * 37 + Wire.hashCode(req_bytes);
    hashCode = hashCode * 37 + (req_nested_enum != null ? req_nested_enum.hashCode() : 0);
    hashCode = hashCode * 37 + (req_nested_message != null ? req_nested_message.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_int32 != null ? rep_int32.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_uint32 != null ? rep_uint32.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_sint32 != null ? rep_sint32.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_fixed32 != null ? rep_fixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_sfixed32 != null ? rep_sfixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_int64 != null ? rep_int64.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_uint64 != null ? rep_uint64.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_sint64 != null ? rep_sint64.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_fixed64 != null ? rep_fixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_sfixed64 != null ? rep_sfixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_bool != null ? rep_bool.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_float != null ? rep_float.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_double != null ? rep_double.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_string != null ? rep_string.hashCode() : 0);
    hashCode = hashCode * 37 + Wire.hashCode(rep_bytes);
    hashCode = hashCode * 37 + (rep_nested_enum != null ? rep_nested_enum.hashCode() : 0);
    hashCode = hashCode * 37 + (rep_nested_message != null ? rep_nested_message.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_int32 != null ? pack_int32.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_uint32 != null ? pack_uint32.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_sint32 != null ? pack_sint32.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_fixed32 != null ? pack_fixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_sfixed32 != null ? pack_sfixed32.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_int64 != null ? pack_int64.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_uint64 != null ? pack_uint64.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_sint64 != null ? pack_sint64.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_fixed64 != null ? pack_fixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_sfixed64 != null ? pack_sfixed64.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_bool != null ? pack_bool.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_float != null ? pack_float.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_double != null ? pack_double.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_string != null ? pack_string.hashCode() : 0);
    hashCode = hashCode * 37 + Wire.hashCode(pack_bytes);
    hashCode = hashCode * 37 + (pack_nested_enum != null ? pack_nested_enum.hashCode() : 0);
    hashCode = hashCode * 37 + (pack_nested_message != null ? pack_nested_message.hashCode() : 0);
    return hashCode;
  }

  @Override
  public String toString() {
    return String.format("AllTypes{" +
        "opt_int32=%s," +
        "opt_uint32=%s," +
        "opt_sint32=%s," +
        "opt_fixed32=%s," +
        "opt_sfixed32=%s," +
        "opt_int64=%s," +
        "opt_uint64=%s," +
        "opt_sint64=%s," +
        "opt_fixed64=%s," +
        "opt_sfixed64=%s," +
        "opt_bool=%s," +
        "opt_float=%s," +
        "opt_double=%s," +
        "opt_string=%s," +
        "opt_bytes=%s," +
        "opt_nested_enum=%s," +
        "opt_nested_message=%s," +
        "req_int32=%s," +
        "req_uint32=%s," +
        "req_sint32=%s," +
        "req_fixed32=%s," +
        "req_sfixed32=%s," +
        "req_int64=%s," +
        "req_uint64=%s," +
        "req_sint64=%s," +
        "req_fixed64=%s," +
        "req_sfixed64=%s," +
        "req_bool=%s," +
        "req_float=%s," +
        "req_double=%s," +
        "req_string=%s," +
        "req_bytes=%s," +
        "req_nested_enum=%s," +
        "req_nested_message=%s," +
        "rep_int32=%s," +
        "rep_uint32=%s," +
        "rep_sint32=%s," +
        "rep_fixed32=%s," +
        "rep_sfixed32=%s," +
        "rep_int64=%s," +
        "rep_uint64=%s," +
        "rep_sint64=%s," +
        "rep_fixed64=%s," +
        "rep_sfixed64=%s," +
        "rep_bool=%s," +
        "rep_float=%s," +
        "rep_double=%s," +
        "rep_string=%s," +
        "rep_bytes=%s," +
        "rep_nested_enum=%s," +
        "rep_nested_message=%s," +
        "pack_int32=%s," +
        "pack_uint32=%s," +
        "pack_sint32=%s," +
        "pack_fixed32=%s," +
        "pack_sfixed32=%s," +
        "pack_int64=%s," +
        "pack_uint64=%s," +
        "pack_sint64=%s," +
        "pack_fixed64=%s," +
        "pack_sfixed64=%s," +
        "pack_bool=%s," +
        "pack_float=%s," +
        "pack_double=%s," +
        "pack_string=%s," +
        "pack_bytes=%s," +
        "pack_nested_enum=%s," +
        "pack_nested_message=%s," +
        "{extensionMap=%s}",
        opt_int32,
        opt_uint32,
        opt_sint32,
        opt_fixed32,
        opt_sfixed32,
        opt_int64,
        opt_uint64,
        opt_sint64,
        opt_fixed64,
        opt_sfixed64,
        opt_bool,
        opt_float,
        opt_double,
        opt_string,
        Wire.toString(opt_bytes),
        opt_nested_enum,
        opt_nested_message,
        req_int32,
        req_uint32,
        req_sint32,
        req_fixed32,
        req_sfixed32,
        req_int64,
        req_uint64,
        req_sint64,
        req_fixed64,
        req_sfixed64,
        req_bool,
        req_float,
        req_double,
        req_string,
        Wire.toString(req_bytes),
        req_nested_enum,
        req_nested_message,
        rep_int32,
        rep_uint32,
        rep_sint32,
        rep_fixed32,
        rep_sfixed32,
        rep_int64,
        rep_uint64,
        rep_sint64,
        rep_fixed64,
        rep_sfixed64,
        rep_bool,
        rep_float,
        rep_double,
        rep_string,
        Wire.toString(rep_bytes),
        rep_nested_enum,
        rep_nested_message,
        pack_int32,
        pack_uint32,
        pack_sint32,
        pack_fixed32,
        pack_sfixed32,
        pack_int64,
        pack_uint64,
        pack_sint64,
        pack_fixed64,
        pack_sfixed64,
        pack_bool,
        pack_float,
        pack_double,
        pack_string,
        Wire.toString(pack_bytes),
        pack_nested_enum,
        pack_nested_message,
        Wire.toString(extensionMap));
  }

  public static final class Builder
      implements ExtendableMessage.ExtendableBuilder<AllTypes> {

    private final Map<Extension<AllTypes, ?>, Object> extensionMap = new TreeMap<Extension<AllTypes, ?>, Object>();

    public Integer opt_int32;
    public Integer opt_uint32;
    public Integer opt_sint32;
    public Integer opt_fixed32;
    public Integer opt_sfixed32;
    public Long opt_int64;
    public Long opt_uint64;
    public Long opt_sint64;
    public Long opt_fixed64;
    public Long opt_sfixed64;
    public Boolean opt_bool;
    public Float opt_float;
    public Double opt_double;
    public String opt_string;
    public byte[] opt_bytes;
    public NestedEnum opt_nested_enum;
    public NestedMessage opt_nested_message;
    public Integer req_int32;
    public Integer req_uint32;
    public Integer req_sint32;
    public Integer req_fixed32;
    public Integer req_sfixed32;
    public Long req_int64;
    public Long req_uint64;
    public Long req_sint64;
    public Long req_fixed64;
    public Long req_sfixed64;
    public Boolean req_bool;
    public Float req_float;
    public Double req_double;
    public String req_string;
    public byte[] req_bytes;
    public NestedEnum req_nested_enum;
    public NestedMessage req_nested_message;
    public List<Integer> rep_int32;
    public List<Integer> rep_uint32;
    public List<Integer> rep_sint32;
    public List<Integer> rep_fixed32;
    public List<Integer> rep_sfixed32;
    public List<Long> rep_int64;
    public List<Long> rep_uint64;
    public List<Long> rep_sint64;
    public List<Long> rep_fixed64;
    public List<Long> rep_sfixed64;
    public List<Boolean> rep_bool;
    public List<Float> rep_float;
    public List<Double> rep_double;
    public List<String> rep_string;
    public List<byte[]> rep_bytes;
    public List<NestedEnum> rep_nested_enum;
    public List<NestedMessage> rep_nested_message;
    public List<Integer> pack_int32;
    public List<Integer> pack_uint32;
    public List<Integer> pack_sint32;
    public List<Integer> pack_fixed32;
    public List<Integer> pack_sfixed32;
    public List<Long> pack_int64;
    public List<Long> pack_uint64;
    public List<Long> pack_sint64;
    public List<Long> pack_fixed64;
    public List<Long> pack_sfixed64;
    public List<Boolean> pack_bool;
    public List<Float> pack_float;
    public List<Double> pack_double;
    public List<String> pack_string;
    public List<byte[]> pack_bytes;
    public List<NestedEnum> pack_nested_enum;
    public List<NestedMessage> pack_nested_message;

    public Builder() {
    }

    public Builder(AllTypes message) {
      if (message == null) return;
      this.opt_int32 = message.opt_int32;
      this.opt_uint32 = message.opt_uint32;
      this.opt_sint32 = message.opt_sint32;
      this.opt_fixed32 = message.opt_fixed32;
      this.opt_sfixed32 = message.opt_sfixed32;
      this.opt_int64 = message.opt_int64;
      this.opt_uint64 = message.opt_uint64;
      this.opt_sint64 = message.opt_sint64;
      this.opt_fixed64 = message.opt_fixed64;
      this.opt_sfixed64 = message.opt_sfixed64;
      this.opt_bool = message.opt_bool;
      this.opt_float = message.opt_float;
      this.opt_double = message.opt_double;
      this.opt_string = message.opt_string;
      this.opt_bytes = message.opt_bytes;
      this.opt_nested_enum = message.opt_nested_enum;
      this.opt_nested_message = message.opt_nested_message;
      this.req_int32 = message.req_int32;
      this.req_uint32 = message.req_uint32;
      this.req_sint32 = message.req_sint32;
      this.req_fixed32 = message.req_fixed32;
      this.req_sfixed32 = message.req_sfixed32;
      this.req_int64 = message.req_int64;
      this.req_uint64 = message.req_uint64;
      this.req_sint64 = message.req_sint64;
      this.req_fixed64 = message.req_fixed64;
      this.req_sfixed64 = message.req_sfixed64;
      this.req_bool = message.req_bool;
      this.req_float = message.req_float;
      this.req_double = message.req_double;
      this.req_string = message.req_string;
      this.req_bytes = message.req_bytes;
      this.req_nested_enum = message.req_nested_enum;
      this.req_nested_message = message.req_nested_message;
      this.rep_int32 = Wire.copyOf(message.rep_int32);
      this.rep_uint32 = Wire.copyOf(message.rep_uint32);
      this.rep_sint32 = Wire.copyOf(message.rep_sint32);
      this.rep_fixed32 = Wire.copyOf(message.rep_fixed32);
      this.rep_sfixed32 = Wire.copyOf(message.rep_sfixed32);
      this.rep_int64 = Wire.copyOf(message.rep_int64);
      this.rep_uint64 = Wire.copyOf(message.rep_uint64);
      this.rep_sint64 = Wire.copyOf(message.rep_sint64);
      this.rep_fixed64 = Wire.copyOf(message.rep_fixed64);
      this.rep_sfixed64 = Wire.copyOf(message.rep_sfixed64);
      this.rep_bool = Wire.copyOf(message.rep_bool);
      this.rep_float = Wire.copyOf(message.rep_float);
      this.rep_double = Wire.copyOf(message.rep_double);
      this.rep_string = Wire.copyOf(message.rep_string);
      this.rep_bytes = Wire.copyOf(message.rep_bytes);
      this.rep_nested_enum = Wire.copyOf(message.rep_nested_enum);
      this.rep_nested_message = Wire.copyOf(message.rep_nested_message);
      this.pack_int32 = Wire.copyOf(message.pack_int32);
      this.pack_uint32 = Wire.copyOf(message.pack_uint32);
      this.pack_sint32 = Wire.copyOf(message.pack_sint32);
      this.pack_fixed32 = Wire.copyOf(message.pack_fixed32);
      this.pack_sfixed32 = Wire.copyOf(message.pack_sfixed32);
      this.pack_int64 = Wire.copyOf(message.pack_int64);
      this.pack_uint64 = Wire.copyOf(message.pack_uint64);
      this.pack_sint64 = Wire.copyOf(message.pack_sint64);
      this.pack_fixed64 = Wire.copyOf(message.pack_fixed64);
      this.pack_sfixed64 = Wire.copyOf(message.pack_sfixed64);
      this.pack_bool = Wire.copyOf(message.pack_bool);
      this.pack_float = Wire.copyOf(message.pack_float);
      this.pack_double = Wire.copyOf(message.pack_double);
      this.pack_string = Wire.copyOf(message.pack_string);
      this.pack_bytes = Wire.copyOf(message.pack_bytes);
      this.pack_nested_enum = Wire.copyOf(message.pack_nested_enum);
      this.pack_nested_message = Wire.copyOf(message.pack_nested_message);
      this.extensionMap.putAll(message.extensionMap);
    }

    public Builder opt_int32(Integer opt_int32) {
      this.opt_int32 = opt_int32;
      return this;
    }

    public Builder opt_uint32(Integer opt_uint32) {
      this.opt_uint32 = opt_uint32;
      return this;
    }

    public Builder opt_sint32(Integer opt_sint32) {
      this.opt_sint32 = opt_sint32;
      return this;
    }

    public Builder opt_fixed32(Integer opt_fixed32) {
      this.opt_fixed32 = opt_fixed32;
      return this;
    }

    public Builder opt_sfixed32(Integer opt_sfixed32) {
      this.opt_sfixed32 = opt_sfixed32;
      return this;
    }

    public Builder opt_int64(Long opt_int64) {
      this.opt_int64 = opt_int64;
      return this;
    }

    public Builder opt_uint64(Long opt_uint64) {
      this.opt_uint64 = opt_uint64;
      return this;
    }

    public Builder opt_sint64(Long opt_sint64) {
      this.opt_sint64 = opt_sint64;
      return this;
    }

    public Builder opt_fixed64(Long opt_fixed64) {
      this.opt_fixed64 = opt_fixed64;
      return this;
    }

    public Builder opt_sfixed64(Long opt_sfixed64) {
      this.opt_sfixed64 = opt_sfixed64;
      return this;
    }

    public Builder opt_bool(Boolean opt_bool) {
      this.opt_bool = opt_bool;
      return this;
    }

    public Builder opt_float(Float opt_float) {
      this.opt_float = opt_float;
      return this;
    }

    public Builder opt_double(Double opt_double) {
      this.opt_double = opt_double;
      return this;
    }

    public Builder opt_string(String opt_string) {
      this.opt_string = opt_string;
      return this;
    }

    public Builder opt_bytes(byte[] opt_bytes) {
      this.opt_bytes = opt_bytes;
      return this;
    }

    public Builder opt_nested_enum(NestedEnum opt_nested_enum) {
      this.opt_nested_enum = opt_nested_enum;
      return this;
    }

    public Builder opt_nested_message(NestedMessage opt_nested_message) {
      this.opt_nested_message = opt_nested_message;
      return this;
    }

    public Builder req_int32(Integer req_int32) {
      this.req_int32 = req_int32;
      return this;
    }

    public Builder req_uint32(Integer req_uint32) {
      this.req_uint32 = req_uint32;
      return this;
    }

    public Builder req_sint32(Integer req_sint32) {
      this.req_sint32 = req_sint32;
      return this;
    }

    public Builder req_fixed32(Integer req_fixed32) {
      this.req_fixed32 = req_fixed32;
      return this;
    }

    public Builder req_sfixed32(Integer req_sfixed32) {
      this.req_sfixed32 = req_sfixed32;
      return this;
    }

    public Builder req_int64(Long req_int64) {
      this.req_int64 = req_int64;
      return this;
    }

    public Builder req_uint64(Long req_uint64) {
      this.req_uint64 = req_uint64;
      return this;
    }

    public Builder req_sint64(Long req_sint64) {
      this.req_sint64 = req_sint64;
      return this;
    }

    public Builder req_fixed64(Long req_fixed64) {
      this.req_fixed64 = req_fixed64;
      return this;
    }

    public Builder req_sfixed64(Long req_sfixed64) {
      this.req_sfixed64 = req_sfixed64;
      return this;
    }

    public Builder req_bool(Boolean req_bool) {
      this.req_bool = req_bool;
      return this;
    }

    public Builder req_float(Float req_float) {
      this.req_float = req_float;
      return this;
    }

    public Builder req_double(Double req_double) {
      this.req_double = req_double;
      return this;
    }

    public Builder req_string(String req_string) {
      this.req_string = req_string;
      return this;
    }

    public Builder req_bytes(byte[] req_bytes) {
      this.req_bytes = req_bytes;
      return this;
    }

    public Builder req_nested_enum(NestedEnum req_nested_enum) {
      this.req_nested_enum = req_nested_enum;
      return this;
    }

    public Builder req_nested_message(NestedMessage req_nested_message) {
      this.req_nested_message = req_nested_message;
      return this;
    }

    public Builder rep_int32(List<Integer> rep_int32) {
      this.rep_int32 = rep_int32;
      return this;
    }

    public Builder rep_uint32(List<Integer> rep_uint32) {
      this.rep_uint32 = rep_uint32;
      return this;
    }

    public Builder rep_sint32(List<Integer> rep_sint32) {
      this.rep_sint32 = rep_sint32;
      return this;
    }

    public Builder rep_fixed32(List<Integer> rep_fixed32) {
      this.rep_fixed32 = rep_fixed32;
      return this;
    }

    public Builder rep_sfixed32(List<Integer> rep_sfixed32) {
      this.rep_sfixed32 = rep_sfixed32;
      return this;
    }

    public Builder rep_int64(List<Long> rep_int64) {
      this.rep_int64 = rep_int64;
      return this;
    }

    public Builder rep_uint64(List<Long> rep_uint64) {
      this.rep_uint64 = rep_uint64;
      return this;
    }

    public Builder rep_sint64(List<Long> rep_sint64) {
      this.rep_sint64 = rep_sint64;
      return this;
    }

    public Builder rep_fixed64(List<Long> rep_fixed64) {
      this.rep_fixed64 = rep_fixed64;
      return this;
    }

    public Builder rep_sfixed64(List<Long> rep_sfixed64) {
      this.rep_sfixed64 = rep_sfixed64;
      return this;
    }

    public Builder rep_bool(List<Boolean> rep_bool) {
      this.rep_bool = rep_bool;
      return this;
    }

    public Builder rep_float(List<Float> rep_float) {
      this.rep_float = rep_float;
      return this;
    }

    public Builder rep_double(List<Double> rep_double) {
      this.rep_double = rep_double;
      return this;
    }

    public Builder rep_string(List<String> rep_string) {
      this.rep_string = rep_string;
      return this;
    }

    public Builder rep_bytes(List<byte[]> rep_bytes) {
      this.rep_bytes = rep_bytes;
      return this;
    }

    public Builder rep_nested_enum(List<NestedEnum> rep_nested_enum) {
      this.rep_nested_enum = rep_nested_enum;
      return this;
    }

    public Builder rep_nested_message(List<NestedMessage> rep_nested_message) {
      this.rep_nested_message = rep_nested_message;
      return this;
    }

    public Builder pack_int32(List<Integer> pack_int32) {
      this.pack_int32 = pack_int32;
      return this;
    }

    public Builder pack_uint32(List<Integer> pack_uint32) {
      this.pack_uint32 = pack_uint32;
      return this;
    }

    public Builder pack_sint32(List<Integer> pack_sint32) {
      this.pack_sint32 = pack_sint32;
      return this;
    }

    public Builder pack_fixed32(List<Integer> pack_fixed32) {
      this.pack_fixed32 = pack_fixed32;
      return this;
    }

    public Builder pack_sfixed32(List<Integer> pack_sfixed32) {
      this.pack_sfixed32 = pack_sfixed32;
      return this;
    }

    public Builder pack_int64(List<Long> pack_int64) {
      this.pack_int64 = pack_int64;
      return this;
    }

    public Builder pack_uint64(List<Long> pack_uint64) {
      this.pack_uint64 = pack_uint64;
      return this;
    }

    public Builder pack_sint64(List<Long> pack_sint64) {
      this.pack_sint64 = pack_sint64;
      return this;
    }

    public Builder pack_fixed64(List<Long> pack_fixed64) {
      this.pack_fixed64 = pack_fixed64;
      return this;
    }

    public Builder pack_sfixed64(List<Long> pack_sfixed64) {
      this.pack_sfixed64 = pack_sfixed64;
      return this;
    }

    public Builder pack_bool(List<Boolean> pack_bool) {
      this.pack_bool = pack_bool;
      return this;
    }

    public Builder pack_float(List<Float> pack_float) {
      this.pack_float = pack_float;
      return this;
    }

    public Builder pack_double(List<Double> pack_double) {
      this.pack_double = pack_double;
      return this;
    }

    public Builder pack_string(List<String> pack_string) {
      this.pack_string = pack_string;
      return this;
    }

    public Builder pack_bytes(List<byte[]> pack_bytes) {
      this.pack_bytes = pack_bytes;
      return this;
    }

    public Builder pack_nested_enum(List<NestedEnum> pack_nested_enum) {
      this.pack_nested_enum = pack_nested_enum;
      return this;
    }

    public Builder pack_nested_message(List<NestedMessage> pack_nested_message) {
      this.pack_nested_message = pack_nested_message;
      return this;
    }

    @Override
    public <Type> Type getExtension(Extension<AllTypes, Type> extension) {
      return (Type) extensionMap.get(extension);
    }

    @Override
    public <Type> Builder setExtension(Extension<AllTypes, Type> extension, Type value) {
      extensionMap.put(extension, value);
      return this;
    }

    @Override
    public boolean isInitialized() {
      if (req_int32 == null) return false;
      if (req_uint32 == null) return false;
      if (req_sint32 == null) return false;
      if (req_fixed32 == null) return false;
      if (req_sfixed32 == null) return false;
      if (req_int64 == null) return false;
      if (req_uint64 == null) return false;
      if (req_sint64 == null) return false;
      if (req_fixed64 == null) return false;
      if (req_sfixed64 == null) return false;
      if (req_bool == null) return false;
      if (req_float == null) return false;
      if (req_double == null) return false;
      if (req_string == null) return false;
      if (req_bytes == null) return false;
      if (req_nested_enum == null) return false;
      if (req_nested_message == null) return false;
      return true;
    }

    @Override
    public AllTypes build() {
      if (!isInitialized()) throw new UninitializedMessageException();
      return new AllTypes(this);
    }
  }

  public enum NestedEnum {
    @ProtoEnum(1)
    A,
  }

  public static final class NestedMessage
      implements Message {

    public static final Integer a_default = 0;

    @ProtoField(
      tag = 1,
      type = Wire.INT32
    )
    public final Integer a;

    private NestedMessage(Builder builder) {
      this.a = builder.a;
    }

    @Override
    public boolean equals(Object other) {
      if (!(other instanceof NestedMessage)) return false;
      return Wire.equals(a, ((NestedMessage) other).a);
    }

    @Override
    public int hashCode() {
      return a != null ? a.hashCode() : 0;
    }

    @Override
    public String toString() {
      return String.format("NestedMessage{" +
          "a=%s}",
          a);
    }

    public static final class Builder
        implements Message.Builder<NestedMessage> {

      public Integer a;

      public Builder() {
      }

      public Builder(NestedMessage message) {
        if (message == null) return;
        this.a = message.a;
      }

      public Builder a(Integer a) {
        this.a = a;
        return this;
      }

      @Override
      public boolean isInitialized() {
        return true;
      }

      @Override
      public NestedMessage build() {
        return new NestedMessage(this);
      }
    }
  }
}
