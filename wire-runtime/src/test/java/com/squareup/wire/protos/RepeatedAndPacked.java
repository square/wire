// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/repeated_and_packed.proto at 20:1
package com.squareup.wire.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.util.Collections;
import java.util.List;

public final class RepeatedAndPacked extends Message<RepeatedAndPacked> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<RepeatedAndPacked> ADAPTER = new TypeAdapter.MessageAdapter<RepeatedAndPacked>() {
    @Override
    public RepeatedAndPacked read(ProtoReader reader) throws IOException {
      return RepeatedAndPacked.read(reader);
    }
  };

  public final List<Integer> rep_int32;

  public final List<Integer> pack_int32;

  public RepeatedAndPacked(List<Integer> rep_int32, List<Integer> pack_int32) {
    super("RepeatedAndPacked");
    this.rep_int32 = immutableCopyOf(rep_int32);
    this.pack_int32 = immutableCopyOf(pack_int32);
  }

  private RepeatedAndPacked(Builder builder) {
    this(builder.rep_int32, builder.pack_int32);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.repeated(201, "rep_int32", rep_int32, TypeAdapter.INT32, false);
    visitor.packed(301, "pack_int32", pack_int32, TypeAdapter.INT32, false);
    visitor.unknowns(this);
  }

  public static RepeatedAndPacked read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 201: builder.rep_int32 = repeated(builder.rep_int32, reader.value(TypeAdapter.INT32)); break;
        case 301: builder.pack_int32 = reader.packed(builder.pack_int32, TypeAdapter.INT32); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<RepeatedAndPacked> {
    public List<Integer> rep_int32 = Collections.emptyList();

    public List<Integer> pack_int32 = Collections.emptyList();

    public Builder() {
    }

    public Builder(RepeatedAndPacked message) {
      super(message);
      if (message == null) return;
      this.rep_int32 = copyOf(message.rep_int32);
      this.pack_int32 = copyOf(message.pack_int32);
    }

    public Builder rep_int32(List<Integer> rep_int32) {
      this.rep_int32 = canonicalizeList(rep_int32);
      return this;
    }

    public Builder pack_int32(List<Integer> pack_int32) {
      this.pack_int32 = canonicalizeList(pack_int32);
      return this;
    }

    @Override
    public RepeatedAndPacked build() {
      return new RepeatedAndPacked(this);
    }
  }
}
