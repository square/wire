// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/roots.proto at 43:1
package com.squareup.wire.protos.roots;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;

public final class C extends Message<C> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<C> ADAPTER = new TypeAdapter.MessageAdapter<C>() {
    @Override
    public C read(ProtoReader reader) throws IOException {
      return C.read(reader);
    }
  };

  public static final Integer DEFAULT_I = 0;

  public final Integer i;

  public C(Integer i) {
    super("C");
    this.i = i;
  }

  private C(Builder builder) {
    this(builder.i);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "i", i, TypeAdapter.INT32, false);
    visitor.unknowns(this);
  }

  public static C read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.i = reader.value(TypeAdapter.INT32); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<C> {
    public Integer i;

    public Builder() {
    }

    public Builder(C message) {
      super(message);
      if (message == null) return;
      this.i = message.i;
    }

    public Builder i(Integer i) {
      this.i = i;
      return this;
    }

    @Override
    public C build() {
      return new C(this);
    }
  }
}
