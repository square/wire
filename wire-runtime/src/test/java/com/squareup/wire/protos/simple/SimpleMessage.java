// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/simple_message.proto at 24:1
package com.squareup.wire.protos.simple;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.protos.foreign.ForeignEnum;
import java.io.IOException;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;

/**
 * A message for testing.
 */
public final class SimpleMessage extends Message<SimpleMessage> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<SimpleMessage> ADAPTER = new TypeAdapter.MessageAdapter<SimpleMessage>() {
    @Override
    public SimpleMessage read(ProtoReader reader) throws IOException {
      return SimpleMessage.read(reader);
    }
  };

  public static final Integer DEFAULT_OPTIONAL_INT32 = 123;

  public static final NestedEnum DEFAULT_DEFAULT_NESTED_ENUM = NestedEnum.BAZ;

  public static final Integer DEFAULT_REQUIRED_INT32 = 456;

  public static final ForeignEnum DEFAULT_DEFAULT_FOREIGN_ENUM = ForeignEnum.BAX;

  public static final ForeignEnum DEFAULT_NO_DEFAULT_FOREIGN_ENUM = ForeignEnum.BAV;

  public static final String DEFAULT_PACKAGE = "";

  public static final String DEFAULT_RESULT = "";

  public static final String DEFAULT_OTHER = "";

  public static final String DEFAULT_O = "";

  /**
   * An optional int32
   */
  public final Integer optional_int32;

  /**
   * An optional NestedMessage, deprecated
   */
  @Deprecated
  public final NestedMessage optional_nested_msg;

  /**
   * An optional ExternalMessage
   */
  public final ExternalMessage optional_external_msg;

  public final NestedEnum default_nested_enum;

  /**
   * A required int32
   */
  public final Integer required_int32;

  /**
   * A repeated double, deprecated
   */
  @Deprecated
  public final List<Double> repeated_double;

  /**
   * enum from another package with an explicit default
   */
  public final ForeignEnum default_foreign_enum;

  /**
   * enum from another package without an explicit default
   */
  public final ForeignEnum no_default_foreign_enum;

  /**
   * field with the same name as a Java keyword
   */
  public final String _package;

  /**
   * field with the name "result"
   */
  public final String result;

  /**
   * field with the name "other"
   */
  public final String other;

  /**
   * field with the name "o"
   */
  public final String o;

  public SimpleMessage(Integer optional_int32, NestedMessage optional_nested_msg, ExternalMessage optional_external_msg, NestedEnum default_nested_enum, Integer required_int32, List<Double> repeated_double, ForeignEnum default_foreign_enum, ForeignEnum no_default_foreign_enum, String _package, String result, String other, String o) {
    super("SimpleMessage");
    this.optional_int32 = optional_int32;
    this.optional_nested_msg = optional_nested_msg;
    this.optional_external_msg = optional_external_msg;
    this.default_nested_enum = default_nested_enum;
    this.required_int32 = required_int32;
    this.repeated_double = immutableCopyOf(repeated_double);
    this.default_foreign_enum = default_foreign_enum;
    this.no_default_foreign_enum = no_default_foreign_enum;
    this._package = _package;
    this.result = result;
    this.other = other;
    this.o = o;
  }

  private SimpleMessage(Builder builder) {
    this(builder.optional_int32, builder.optional_nested_msg, builder.optional_external_msg, builder.default_nested_enum, builder.required_int32, builder.repeated_double, builder.default_foreign_enum, builder.no_default_foreign_enum, builder._package, builder.result, builder.other, builder.o);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "optional_int32", optional_int32, TypeAdapter.INT32, false);
    visitor.value(2, "optional_nested_msg", optional_nested_msg, NestedMessage.ADAPTER, false);
    visitor.value(3, "optional_external_msg", optional_external_msg, ExternalMessage.ADAPTER, false);
    visitor.value(4, "default_nested_enum", default_nested_enum, NestedEnum.ADAPTER, false);
    visitor.value(5, "required_int32", required_int32, TypeAdapter.INT32, false);
    visitor.repeated(6, "repeated_double", repeated_double, TypeAdapter.DOUBLE, false);
    visitor.value(7, "default_foreign_enum", default_foreign_enum, ForeignEnum.ADAPTER, false);
    visitor.value(8, "no_default_foreign_enum", no_default_foreign_enum, ForeignEnum.ADAPTER, false);
    visitor.value(9, "package", _package, TypeAdapter.STRING, false);
    visitor.value(10, "result", result, TypeAdapter.STRING, false);
    visitor.value(11, "other", other, TypeAdapter.STRING, false);
    visitor.value(12, "o", o, TypeAdapter.STRING, false);
    visitor.unknowns(this);
  }

  public static SimpleMessage read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.optional_int32 = reader.value(TypeAdapter.INT32); break;
        case 2: builder.optional_nested_msg = message(reader, NestedMessage.ADAPTER); break;
        case 3: builder.optional_external_msg = message(reader, ExternalMessage.ADAPTER); break;
        case 4: builder.default_nested_enum = enumOrUnknown(4, reader, NestedEnum.ADAPTER, builder); break;
        case 5: builder.required_int32 = reader.value(TypeAdapter.INT32); break;
        case 6: builder.repeated_double = repeated(builder.repeated_double, reader.value(TypeAdapter.DOUBLE)); break;
        case 7: builder.default_foreign_enum = enumOrUnknown(7, reader, ForeignEnum.ADAPTER, builder); break;
        case 8: builder.no_default_foreign_enum = enumOrUnknown(8, reader, ForeignEnum.ADAPTER, builder); break;
        case 9: builder._package = reader.value(TypeAdapter.STRING); break;
        case 10: builder.result = reader.value(TypeAdapter.STRING); break;
        case 11: builder.other = reader.value(TypeAdapter.STRING); break;
        case 12: builder.o = reader.value(TypeAdapter.STRING); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<SimpleMessage> {
    public Integer optional_int32;

    public NestedMessage optional_nested_msg;

    public ExternalMessage optional_external_msg;

    public NestedEnum default_nested_enum;

    public Integer required_int32;

    public List<Double> repeated_double = Collections.emptyList();

    public ForeignEnum default_foreign_enum;

    public ForeignEnum no_default_foreign_enum;

    public String _package;

    public String result;

    public String other;

    public String o;

    public Builder() {
    }

    public Builder(SimpleMessage message) {
      super(message);
      if (message == null) return;
      this.optional_int32 = message.optional_int32;
      this.optional_nested_msg = message.optional_nested_msg;
      this.optional_external_msg = message.optional_external_msg;
      this.default_nested_enum = message.default_nested_enum;
      this.required_int32 = message.required_int32;
      this.repeated_double = copyOf(message.repeated_double);
      this.default_foreign_enum = message.default_foreign_enum;
      this.no_default_foreign_enum = message.no_default_foreign_enum;
      this._package = message._package;
      this.result = message.result;
      this.other = message.other;
      this.o = message.o;
    }

    /**
     * An optional int32
     */
    public Builder optional_int32(Integer optional_int32) {
      this.optional_int32 = optional_int32;
      return this;
    }

    /**
     * An optional NestedMessage, deprecated
     */
    @Deprecated
    public Builder optional_nested_msg(NestedMessage optional_nested_msg) {
      this.optional_nested_msg = optional_nested_msg;
      return this;
    }

    /**
     * An optional ExternalMessage
     */
    public Builder optional_external_msg(ExternalMessage optional_external_msg) {
      this.optional_external_msg = optional_external_msg;
      return this;
    }

    public Builder default_nested_enum(NestedEnum default_nested_enum) {
      this.default_nested_enum = default_nested_enum;
      return this;
    }

    /**
     * A required int32
     */
    public Builder required_int32(Integer required_int32) {
      this.required_int32 = required_int32;
      return this;
    }

    /**
     * A repeated double, deprecated
     */
    @Deprecated
    public Builder repeated_double(List<Double> repeated_double) {
      this.repeated_double = canonicalizeList(repeated_double);
      return this;
    }

    /**
     * enum from another package with an explicit default
     */
    public Builder default_foreign_enum(ForeignEnum default_foreign_enum) {
      this.default_foreign_enum = default_foreign_enum;
      return this;
    }

    /**
     * enum from another package without an explicit default
     */
    public Builder no_default_foreign_enum(ForeignEnum no_default_foreign_enum) {
      this.no_default_foreign_enum = no_default_foreign_enum;
      return this;
    }

    /**
     * field with the same name as a Java keyword
     */
    public Builder _package(String _package) {
      this._package = _package;
      return this;
    }

    /**
     * field with the name "result"
     */
    public Builder result(String result) {
      this.result = result;
      return this;
    }

    /**
     * field with the name "other"
     */
    public Builder other(String other) {
      this.other = other;
      return this;
    }

    /**
     * field with the name "o"
     */
    public Builder o(String o) {
      this.o = o;
      return this;
    }

    @Override
    public SimpleMessage build() {
      if (required_int32 == null) {
        throw missingRequiredFields(required_int32, "required_int32");
      }
      return new SimpleMessage(this);
    }
  }

  public static final class NestedMessage extends Message<NestedMessage> {
    private static final long serialVersionUID = 0L;

    public static final TypeAdapter<NestedMessage> ADAPTER = new TypeAdapter.MessageAdapter<NestedMessage>() {
      @Override
      public NestedMessage read(ProtoReader reader) throws IOException {
        return NestedMessage.read(reader);
      }
    };

    public static final Integer DEFAULT_BB = 0;

    /**
     * An optional int32
     */
    public final Integer bb;

    public NestedMessage(Integer bb) {
      super("NestedMessage");
      this.bb = bb;
    }

    private NestedMessage(Builder builder) {
      this(builder.bb);
      setBuilder(builder);
    }

    @Override
    protected void visitFields(Message.Visitor visitor) {
      visitor.value(1, "bb", bb, TypeAdapter.INT32, false);
      visitor.unknowns(this);
    }

    public static NestedMessage read(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      while (reader.hasNext()) {
        int tag = reader.nextTag();
        switch (tag) {
          case 1: builder.bb = reader.value(TypeAdapter.INT32); break;
          default: builder.readUnknown(tag, reader); break;
        }
      }
      return builder.build();
    }

    public static final class Builder extends com.squareup.wire.Message.Builder<NestedMessage> {
      public Integer bb;

      public Builder() {
      }

      public Builder(NestedMessage message) {
        super(message);
        if (message == null) return;
        this.bb = message.bb;
      }

      /**
       * An optional int32
       */
      public Builder bb(Integer bb) {
        this.bb = bb;
        return this;
      }

      @Override
      public NestedMessage build() {
        return new NestedMessage(this);
      }
    }
  }

  public enum NestedEnum implements WireEnum {
    FOO(1),

    BAR(2),

    BAZ(3);

    public static final TypeAdapter.EnumAdapter<NestedEnum> ADAPTER = new TypeAdapter.EnumAdapter<NestedEnum>() {
      @Override
      public NestedEnum fromValue(int value) {
        return NestedEnum.fromValue(value);
      }
    };

    private final int value;

    NestedEnum(int value) {
      this.value = value;
    }

    @Override
    public int value() {
      return value;
    }

    public static NestedEnum fromValue(int value) {
      switch (value) {
        case 1: return FOO;
        case 2: return BAR;
        case 3: return BAZ;
        default: return null;
      }
    }
  }
}
