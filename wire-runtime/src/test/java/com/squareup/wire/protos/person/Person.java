// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/person.proto at 21:1
package com.squareup.wire.protos.person;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.TagMap;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import java.io.ObjectStreamException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;

public final class Person extends Message<Person> {
  public static final ProtoAdapter<Person> ADAPTER = ProtoAdapter.newMessageAdapter(Person.class);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_ID = 0;

  public static final String DEFAULT_EMAIL = "";

  /**
   * The customer's full name.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String name;

  /**
   * The customer's ID number.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer id;

  /**
   * Email address for the customer.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String email;

  /**
   * A list of the customer's phone numbers.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.protos.person.Person$PhoneNumber#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PhoneNumber> phone;

  public Person(String name, Integer id, String email, List<PhoneNumber> phone) {
    this(name, id, email, phone, null);
  }

  public Person(String name, Integer id, String email, List<PhoneNumber> phone, TagMap tagMap) {
    super(tagMap);
    this.name = name;
    this.id = id;
    this.email = email;
    this.phone = immutableCopyOf(phone);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Person)) return false;
    Person o = (Person) other;
    return equals(tagMap(), o.tagMap())
        && equals(name, o.name)
        && equals(id, o.id)
        && equals(email, o.email)
        && equals(phone, o.phone);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = tagMap() != null ? tagMap().hashCode() : 0;
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (email != null ? email.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  private Object writeReplace() throws ObjectStreamException {
    return super.createSerializedForm();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Person, Builder> {
    public String name;

    public Integer id;

    public String email;

    public List<PhoneNumber> phone = Collections.emptyList();

    public Builder() {
    }

    public Builder(Person message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this.id = message.id;
      this.email = message.email;
      this.phone = copyOf(message.phone);
    }

    /**
     * The customer's full name.
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * The customer's ID number.
     */
    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    /**
     * Email address for the customer.
     */
    public Builder email(String email) {
      this.email = email;
      return this;
    }

    /**
     * A list of the customer's phone numbers.
     */
    public Builder phone(List<PhoneNumber> phone) {
      this.phone = canonicalizeList(phone);
      return this;
    }

    @Override
    public Person build() {
      if (name == null
          || id == null) {
        throw missingRequiredFields(name, "name",
            id, "id");
      }
      return new Person(name, id, email, phone, buildTagMap());
    }
  }

  public enum PhoneType implements WireEnum {
    MOBILE(0),

    HOME(1),

    /**
     * Could be phone or fax.
     */
    WORK(2);

    public static final ProtoAdapter<PhoneType> ADAPTER = ProtoAdapter.newEnumAdapter(PhoneType.class);

    private final int value;

    PhoneType(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class PhoneNumber extends Message<PhoneNumber> {
    public static final ProtoAdapter<PhoneNumber> ADAPTER = ProtoAdapter.newMessageAdapter(PhoneNumber.class);

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_NUMBER = "";

    public static final PhoneType DEFAULT_TYPE = PhoneType.HOME;

    /**
     * The customer's phone number.
     */
    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.REQUIRED
    )
    public final String number;

    /**
     * The type of phone stored here.
     */
    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.protos.person.Person$PhoneType#ADAPTER"
    )
    public final PhoneType type;

    public PhoneNumber(String number, PhoneType type) {
      this(number, type, null);
    }

    public PhoneNumber(String number, PhoneType type, TagMap tagMap) {
      super(tagMap);
      this.number = number;
      this.type = type;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof PhoneNumber)) return false;
      PhoneNumber o = (PhoneNumber) other;
      return equals(tagMap(), o.tagMap())
          && equals(number, o.number)
          && equals(type, o.type);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = tagMap() != null ? tagMap().hashCode() : 0;
        result = result * 37 + (number != null ? number.hashCode() : 0);
        result = result * 37 + (type != null ? type.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    private Object writeReplace() throws ObjectStreamException {
      return super.createSerializedForm();
    }

    public static final class Builder extends com.squareup.wire.Message.Builder<PhoneNumber, Builder> {
      public String number;

      public PhoneType type;

      public Builder() {
      }

      public Builder(PhoneNumber message) {
        super(message);
        if (message == null) return;
        this.number = message.number;
        this.type = message.type;
      }

      /**
       * The customer's phone number.
       */
      public Builder number(String number) {
        this.number = number;
        return this;
      }

      /**
       * The type of phone stored here.
       */
      public Builder type(PhoneType type) {
        this.type = type;
        return this;
      }

      @Override
      public PhoneNumber build() {
        if (number == null) {
          throw missingRequiredFields(number, "number");
        }
        return new PhoneNumber(number, type, buildTagMap());
      }
    }
  }
}
