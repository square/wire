// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/person.proto at 21:1
package com.squareup.wire.protos.person;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import com.squareup.wire.WireEnum;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;

public final class Person extends Message<Person> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<Person> ADAPTER = new TypeAdapter.MessageAdapter<Person>() {
    @Override
    public Person read(ProtoReader reader) throws IOException {
      return Person.read(reader);
    }
  };

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_ID = 0;

  public static final String DEFAULT_EMAIL = "";

  /**
   * The customer's full name.
   */
  public final String name;

  /**
   * The customer's ID number.
   */
  public final Integer id;

  /**
   * Email address for the customer.
   */
  public final String email;

  /**
   * A list of the customer's phone numbers.
   */
  public final List<PhoneNumber> phone;

  public Person(String name, Integer id, String email, List<PhoneNumber> phone) {
    super("Person");
    this.name = name;
    this.id = id;
    this.email = email;
    this.phone = immutableCopyOf(phone);
  }

  private Person(Builder builder) {
    this(builder.name, builder.id, builder.email, builder.phone);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "name", name, TypeAdapter.STRING, false);
    visitor.value(2, "id", id, TypeAdapter.INT32, false);
    visitor.value(3, "email", email, TypeAdapter.STRING, false);
    visitor.repeated(4, "phone", phone, PhoneNumber.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static Person read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.name = reader.value(TypeAdapter.STRING); break;
        case 2: builder.id = reader.value(TypeAdapter.INT32); break;
        case 3: builder.email = reader.value(TypeAdapter.STRING); break;
        case 4: builder.phone = repeatedMessage(builder.phone, reader, PhoneNumber.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Person> {
    public String name;

    public Integer id;

    public String email;

    public List<PhoneNumber> phone = Collections.emptyList();

    public Builder() {
    }

    public Builder(Person message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this.id = message.id;
      this.email = message.email;
      this.phone = copyOf(message.phone);
    }

    /**
     * The customer's full name.
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * The customer's ID number.
     */
    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    /**
     * Email address for the customer.
     */
    public Builder email(String email) {
      this.email = email;
      return this;
    }

    /**
     * A list of the customer's phone numbers.
     */
    public Builder phone(List<PhoneNumber> phone) {
      this.phone = canonicalizeList(phone);
      return this;
    }

    @Override
    public Person build() {
      if (name == null
          || id == null) {
        throw missingRequiredFields(name, "name",
            id, "id");
      }
      return new Person(this);
    }
  }

  public enum PhoneType implements WireEnum {
    MOBILE(0),

    HOME(1),

    /**
     * Could be phone or fax.
     */
    WORK(2);

    public static final TypeAdapter.EnumAdapter<PhoneType> ADAPTER = new TypeAdapter.EnumAdapter<PhoneType>() {
      @Override
      public PhoneType fromValue(int value) {
        return PhoneType.fromValue(value);
      }
    };

    private final int value;

    PhoneType(int value) {
      this.value = value;
    }

    @Override
    public int value() {
      return value;
    }

    public static PhoneType fromValue(int value) {
      switch (value) {
        case 0: return MOBILE;
        case 1: return HOME;
        case 2: return WORK;
        default: return null;
      }
    }
  }

  public static final class PhoneNumber extends Message<PhoneNumber> {
    private static final long serialVersionUID = 0L;

    public static final TypeAdapter<PhoneNumber> ADAPTER = new TypeAdapter.MessageAdapter<PhoneNumber>() {
      @Override
      public PhoneNumber read(ProtoReader reader) throws IOException {
        return PhoneNumber.read(reader);
      }
    };

    public static final String DEFAULT_NUMBER = "";

    public static final PhoneType DEFAULT_TYPE = PhoneType.HOME;

    /**
     * The customer's phone number.
     */
    public final String number;

    /**
     * The type of phone stored here.
     */
    public final PhoneType type;

    public PhoneNumber(String number, PhoneType type) {
      super("PhoneNumber");
      this.number = number;
      this.type = type;
    }

    private PhoneNumber(Builder builder) {
      this(builder.number, builder.type);
      setBuilder(builder);
    }

    @Override
    protected void visitFields(Message.Visitor visitor) {
      visitor.value(1, "number", number, TypeAdapter.STRING, false);
      visitor.value(2, "type", type, PhoneType.ADAPTER, false);
      visitor.unknowns(this);
    }

    public static PhoneNumber read(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      while (reader.hasNext()) {
        int tag = reader.nextTag();
        switch (tag) {
          case 1: builder.number = reader.value(TypeAdapter.STRING); break;
          case 2: builder.type = enumOrUnknown(2, reader, PhoneType.ADAPTER, builder); break;
          default: builder.readUnknown(tag, reader); break;
        }
      }
      return builder.build();
    }

    public static final class Builder extends com.squareup.wire.Message.Builder<PhoneNumber> {
      public String number;

      public PhoneType type;

      public Builder() {
      }

      public Builder(PhoneNumber message) {
        super(message);
        if (message == null) return;
        this.number = message.number;
        this.type = message.type;
      }

      /**
       * The customer's phone number.
       */
      public Builder number(String number) {
        this.number = number;
        return this;
      }

      /**
       * The type of phone stored here.
       */
      public Builder type(PhoneType type) {
        this.type = type;
        return this;
      }

      @Override
      public PhoneNumber build() {
        if (number == null) {
          throw missingRequiredFields(number, "number");
        }
        return new PhoneNumber(this);
      }
    }
  }
}
