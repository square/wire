// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/single_level.proto at 24:1
package com.squareup.wire.protos.single_level;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.util.Collections;
import java.util.List;

public final class Foos extends Message<Foos> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<Foos> ADAPTER = new TypeAdapter.MessageAdapter<Foos>() {
    @Override
    public Foos read(ProtoReader reader) throws IOException {
      return Foos.read(reader);
    }
  };

  public final List<Foo> foos;

  public Foos(List<Foo> foos) {
    super("Foos");
    this.foos = immutableCopyOf(foos);
  }

  private Foos(Builder builder) {
    this(builder.foos);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.repeated(1, "foos", foos, Foo.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static Foos read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.foos = repeatedMessage(builder.foos, reader, Foo.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Foos> {
    public List<Foo> foos = Collections.emptyList();

    public Builder() {
    }

    public Builder(Foos message) {
      super(message);
      if (message == null) return;
      this.foos = copyOf(message.foos);
    }

    public Builder foos(List<Foo> foos) {
      this.foos = canonicalizeList(foos);
      return this;
    }

    @Override
    public Foos build() {
      return new Foos(this);
    }
  }
}
