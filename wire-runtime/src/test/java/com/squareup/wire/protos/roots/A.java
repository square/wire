// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/roots.proto at 34:1
package com.squareup.wire.protos.roots;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;

/**
 * Used to test --roots flag of WireCompiler
 *
 * A -> B -> C
 *  \
 *   -> D
 *
 * E -> E.F
 *  \
 *   -> G
 *
 * H -> E.F
 *
 * I -> nothing
 */
public final class A extends Message<A> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<A> ADAPTER = new TypeAdapter.MessageAdapter<A>() {
    @Override
    public A read(ProtoReader reader) throws IOException {
      return A.read(reader);
    }
  };

  public final B c;

  public final D d;

  public A(B c, D d) {
    super("A");
    this.c = c;
    this.d = d;
  }

  private A(Builder builder) {
    this(builder.c, builder.d);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "c", c, B.ADAPTER, false);
    visitor.value(2, "d", d, D.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static A read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.c = message(reader, B.ADAPTER); break;
        case 2: builder.d = message(reader, D.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<A> {
    public B c;

    public D d;

    public Builder() {
    }

    public Builder(A message) {
      super(message);
      if (message == null) return;
      this.c = message.c;
      this.d = message.d;
    }

    public Builder c(B c) {
      this.c = c;
      return this;
    }

    public Builder d(D d) {
      this.d = d;
      return this;
    }

    @Override
    public A build() {
      return new A(this);
    }
  }
}
