// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/redacted_test.proto at 33:1
package com.squareup.wire.protos.redacted;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;

public final class RedactedChild extends Message<RedactedChild> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<RedactedChild> ADAPTER = new TypeAdapter.MessageAdapter<RedactedChild>() {
    @Override
    public RedactedChild read(ProtoReader reader) throws IOException {
      return RedactedChild.read(reader);
    }
  };

  public static final String DEFAULT_A = "";

  public final String a;

  public final Redacted b;

  public final NotRedacted c;

  public RedactedChild(String a, Redacted b, NotRedacted c) {
    super("RedactedChild");
    this.a = a;
    this.b = b;
    this.c = c;
  }

  private RedactedChild(Builder builder) {
    this(builder.a, builder.b, builder.c);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "a", a, TypeAdapter.STRING, false);
    visitor.value(2, "b", b, Redacted.ADAPTER, false);
    visitor.value(3, "c", c, NotRedacted.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static RedactedChild read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.a = reader.value(TypeAdapter.STRING); break;
        case 2: builder.b = message(reader, Redacted.ADAPTER); break;
        case 3: builder.c = message(reader, NotRedacted.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<RedactedChild> {
    public String a;

    public Redacted b;

    public NotRedacted c;

    public Builder() {
    }

    public Builder(RedactedChild message) {
      super(message);
      if (message == null) return;
      this.a = message.a;
      this.b = message.b;
      this.c = message.c;
    }

    public Builder a(String a) {
      this.a = a;
      return this;
    }

    public Builder b(Redacted b) {
      this.b = b;
      return this;
    }

    public Builder c(NotRedacted c) {
      this.c = c;
      return this;
    }

    @Override
    public RedactedChild build() {
      return new RedactedChild(this);
    }
  }
}
