// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/external_message.proto at 20:1
package com.squareup.wire.protos.simple;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Float;
import java.lang.Override;

public final class ExternalMessage extends ExtendableMessage<ExternalMessage> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<ExternalMessage> ADAPTER = new TypeAdapter.MessageAdapter<ExternalMessage>() {
    @Override
    public ExternalMessage read(ProtoReader reader) throws IOException {
      return ExternalMessage.read(reader);
    }
  };

  public static final Float DEFAULT_F = 20f;

  public final Float f;

  public ExternalMessage(Float f) {
    super("ExternalMessage");
    this.f = f;
  }

  private ExternalMessage(Builder builder) {
    this(builder.f);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "f", f, TypeAdapter.FLOAT, false);
    visitor.extensions(this);
    visitor.unknowns(this);
  }

  public static ExternalMessage read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.f = reader.value(TypeAdapter.FLOAT); break;
        default: builder.readExtensionOrUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends ExtendableMessage.ExtendableBuilder<ExternalMessage, Builder> {
    public Float f;

    public Builder() {
      super(ExternalMessage.class, Builder.class);
    }

    public Builder(ExternalMessage message) {
      super(ExternalMessage.class, Builder.class, message);
      if (message == null) return;
      this.f = message.f;
    }

    public Builder f(Float f) {
      this.f = f;
      return this;
    }

    @Override
    public ExternalMessage build() {
      return new ExternalMessage(this);
    }
  }
}
