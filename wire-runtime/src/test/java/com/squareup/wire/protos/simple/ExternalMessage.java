/**
 * Code generated by "Wire" protobuf compiler, do not edit.
 * Source file: ../wire-runtime/src/test/proto/external_message.proto
 */
package com.squareup.wire.protos.simple;

import com.squareup.wire.Extension;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import com.squareup.wire.Wire;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;

public final class ExternalMessage
    implements Message.ExtendableMessage<ExternalMessage> {

  public static final Float DEFAULT_F = 20F;

  public final Map<Extension<ExternalMessage, ?>, Object> extensionMap;

  @ProtoField(
    tag = 1,
    type = Wire.FLOAT
  )
  public final Float f;

  private ExternalMessage(Builder builder) {
    this.f = builder.f;
    this.extensionMap = Collections.unmodifiableMap(new TreeMap<Extension<ExternalMessage, ?>, Object>(builder.extensionMap));
  }

  @Override
  @SuppressWarnings("unchecked")
  public <Type> Type getExtension(Extension<ExternalMessage, Type> extension) {
    return (Type) extensionMap.get(extension);
  }

  @Override
  public boolean equals(Object other) {
    if (!(other instanceof ExternalMessage)) return false;
    ExternalMessage o = (ExternalMessage) other;
    if (!extensionMap.equals(o.extensionMap)) return false;
    if (!Wire.equals(f, o.f)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = extensionMap.hashCode();
    hashCode = hashCode * 37 + (f != null ? f.hashCode() : 0);
    return hashCode;
  }

  @Override
  public String toString() {
    return String.format("ExternalMessage{" +
        "f=%s," +
        "{extensionMap=%s}",
        f,
        Wire.toString(extensionMap));
  }

  public static final class Builder
      implements ExtendableMessage.ExtendableBuilder<ExternalMessage> {

    private final Map<Extension<ExternalMessage, ?>, Object> extensionMap = new TreeMap<Extension<ExternalMessage, ?>, Object>();

    public Float f;

    public Builder() {
    }

    public Builder(ExternalMessage message) {
      if (message == null) return;
      this.f = message.f;
      this.extensionMap.putAll(message.extensionMap);
    }

    public Builder f(Float f) {
      this.f = f;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public <Type> Type getExtension(Extension<ExternalMessage, Type> extension) {
      return (Type) extensionMap.get(extension);
    }

    @Override
    public <Type> Builder setExtension(Extension<ExternalMessage, Type> extension, Type value) {
      extensionMap.put(extension, value);
      return this;
    }

    @Override
    public boolean isInitialized() {
      return true;
    }

    @Override
    public ExternalMessage build() {
      return new ExternalMessage(this);
    }
  }
}
