/**
 * Code generated by Wire protobuf compiler, do not edit.
 * Source file: ../wire-runtime/src/test/proto/external_message.proto
 */
package com.squareup.wire.protos.simple;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Extension;
import com.squareup.wire.ProtoField;
import com.squareup.wire.Wire;

public final class ExternalMessage extends ExtendableMessage<ExternalMessage> {

  public static final Float DEFAULT_F = 20F;

  @ProtoField(
    tag = 1,
    type = Wire.FLOAT
  )
  public final Float f;

  private ExternalMessage(Builder builder) {
    super(builder);
    this.f = builder.f;
  }

  @Override
  public boolean equals(Object other) {
    if (!(other instanceof ExternalMessage)) return false;
    ExternalMessage o = (ExternalMessage) other;
    if (!extensionsEqual(o)) return false;
    if (!Wire.equals(f, o.f)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = extensionsHashCode();
    hashCode = hashCode * 37 + (f != null ? f.hashCode() : 0);
    return hashCode;
  }

  @Override
  public String toString() {
    return String.format("ExternalMessage{" +
        "f=%s," +
        "{extensions=%s}",
        f,
        extensionsToString());
  }

  public static final class Builder extends ExtendableBuilder<ExternalMessage> {

    public Float f;

    public Builder() {
    }

    public Builder(ExternalMessage message) {
      super(message);
      if (message == null) return;
      this.f = message.f;
    }

    public Builder f(Float f) {
      this.f = f;
      return this;
    }

    @Override
    public <E> Builder setExtension(Extension<ExternalMessage, E> extension, E value) {
      super.setExtension(extension, value);
      return this;
    }

    @Override
    public ExternalMessage build() {
      return new ExternalMessage(this);
    }
  }
}
