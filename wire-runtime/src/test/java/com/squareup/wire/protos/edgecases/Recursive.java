// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/edge_cases.proto at 31:1
package com.squareup.wire.protos.edgecases;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.TagMap;
import com.squareup.wire.WireField;
import java.io.ObjectStreamException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;

public final class Recursive extends Message<Recursive> {
  public static final ProtoAdapter<Recursive> ADAPTER = ProtoAdapter.newMessageAdapter(Recursive.class);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VALUE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer value;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.protos.edgecases.Recursive#ADAPTER"
  )
  public final Recursive recursive;

  public Recursive(Integer value, Recursive recursive) {
    this(value, recursive, null);
  }

  public Recursive(Integer value, Recursive recursive, TagMap tagMap) {
    super(tagMap);
    this.value = value;
    this.recursive = recursive;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Recursive)) return false;
    Recursive o = (Recursive) other;
    return equals(tagMap(), o.tagMap())
        && equals(value, o.value)
        && equals(recursive, o.recursive);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = tagMap() != null ? tagMap().hashCode() : 0;
      result = result * 37 + (value != null ? value.hashCode() : 0);
      result = result * 37 + (recursive != null ? recursive.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  private Object writeReplace() throws ObjectStreamException {
    return super.createSerializedForm();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Recursive, Builder> {
    public Integer value;

    public Recursive recursive;

    public Builder() {
    }

    public Builder(Recursive message) {
      super(message);
      if (message == null) return;
      this.value = message.value;
      this.recursive = message.recursive;
    }

    public Builder value(Integer value) {
      this.value = value;
      return this;
    }

    public Builder recursive(Recursive recursive) {
      this.recursive = recursive;
      return this;
    }

    @Override
    public Recursive build() {
      return new Recursive(value, recursive, buildTagMap());
    }
  }
}
