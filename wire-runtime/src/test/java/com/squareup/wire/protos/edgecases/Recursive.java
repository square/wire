// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/edge_cases.proto at 31:1
package com.squareup.wire.protos.edgecases;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;

public final class Recursive extends Message<Recursive> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<Recursive> ADAPTER = new TypeAdapter.MessageAdapter<Recursive>() {
    @Override
    public Recursive read(ProtoReader reader) throws IOException {
      return Recursive.read(reader);
    }
  };

  public static final Integer DEFAULT_VALUE = 0;

  public final Integer value;

  public final Recursive recursive;

  public Recursive(Integer value, Recursive recursive) {
    super("Recursive");
    this.value = value;
    this.recursive = recursive;
  }

  private Recursive(Builder builder) {
    this(builder.value, builder.recursive);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "value", value, TypeAdapter.INT32, false);
    visitor.value(2, "recursive", recursive, Recursive.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static Recursive read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.value = reader.value(TypeAdapter.INT32); break;
        case 2: builder.recursive = message(reader, Recursive.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Recursive> {
    public Integer value;

    public Recursive recursive;

    public Builder() {
    }

    public Builder(Recursive message) {
      super(message);
      if (message == null) return;
      this.value = message.value;
      this.recursive = message.recursive;
    }

    public Builder value(Integer value) {
      this.value = value;
      return this;
    }

    public Builder recursive(Recursive recursive) {
      this.recursive = recursive;
      return this;
    }

    @Override
    public Recursive build() {
      return new Recursive(this);
    }
  }
}
