// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/one_extension.proto at 20:1
package com.squareup.wire.protos.one_extension;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;

public final class OneExtension extends ExtendableMessage<OneExtension> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<OneExtension> ADAPTER = new TypeAdapter.MessageAdapter<OneExtension>() {
    @Override
    public OneExtension read(ProtoReader reader) throws IOException {
      return OneExtension.read(reader);
    }
  };

  public static final String DEFAULT_ID = "";

  public final String id;

  public OneExtension(String id) {
    super("OneExtension");
    this.id = id;
  }

  private OneExtension(Builder builder) {
    this(builder.id);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "id", id, TypeAdapter.STRING, false);
    visitor.extensions(this);
    visitor.unknowns(this);
  }

  public static OneExtension read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.id = reader.value(TypeAdapter.STRING); break;
        default: builder.readExtensionOrUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends ExtendableMessage.ExtendableBuilder<OneExtension, Builder> {
    public String id;

    public Builder() {
      super(OneExtension.class, Builder.class);
    }

    public Builder(OneExtension message) {
      super(OneExtension.class, Builder.class, message);
      if (message == null) return;
      this.id = message.id;
    }

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    @Override
    public OneExtension build() {
      return new OneExtension(this);
    }
  }
}
