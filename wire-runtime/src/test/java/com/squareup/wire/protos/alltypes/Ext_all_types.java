/**
 * Code generated by "Wire" protobuf compiler, do not edit.
 * Source file: ../wire-runtime/src/main/proto/all_types.proto
 */
package com.squareup.wire.protos.alltypes;

import com.squareup.wire.Wire;
import java.util.List;

import static com.squareup.wire.Message.ExtendableMessage.Extension;

public final class Ext_all_types {

  private Ext_all_types() {
  }

  public static final Extension<AllTypes, Integer> ext_opt_int32 = Extension.getExtension(AllTypes.class, 1001, Wire.INT32, Wire.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_uint32 = Extension.getExtension(AllTypes.class, 1002, Wire.UINT32, Wire.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_sint32 = Extension.getExtension(AllTypes.class, 1003, Wire.SINT32, Wire.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_fixed32 = Extension.getExtension(AllTypes.class, 1004, Wire.FIXED32, Wire.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_sfixed32 = Extension.getExtension(AllTypes.class, 1005, Wire.SFIXED32, Wire.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_int64 = Extension.getExtension(AllTypes.class, 1006, Wire.INT64, Wire.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_uint64 = Extension.getExtension(AllTypes.class, 1007, Wire.UINT64, Wire.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_sint64 = Extension.getExtension(AllTypes.class, 1008, Wire.SINT64, Wire.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_fixed64 = Extension.getExtension(AllTypes.class, 1009, Wire.FIXED64, Wire.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_sfixed64 = Extension.getExtension(AllTypes.class, 1010, Wire.SFIXED64, Wire.OPTIONAL);
  public static final Extension<AllTypes, Boolean> ext_opt_bool = Extension.getExtension(AllTypes.class, 1011, Wire.BOOL, Wire.OPTIONAL);
  public static final Extension<AllTypes, Float> ext_opt_float = Extension.getExtension(AllTypes.class, 1012, Wire.FLOAT, Wire.OPTIONAL);
  public static final Extension<AllTypes, Double> ext_opt_double = Extension.getExtension(AllTypes.class, 1013, Wire.DOUBLE, Wire.OPTIONAL);
  public static final Extension<AllTypes, String> ext_opt_string = Extension.getExtension(AllTypes.class, 1014, Wire.STRING, Wire.OPTIONAL);
  public static final Extension<AllTypes, byte[]> ext_opt_bytes = Extension.getExtension(AllTypes.class, 1015, Wire.BYTES, Wire.OPTIONAL);
  public static final Extension<AllTypes, AllTypes.NestedEnum> ext_opt_nested_enum = Extension.getEnumExtension(AllTypes.class, 1016, Wire.OPTIONAL, AllTypes.NestedEnum.class);
  public static final Extension<AllTypes, AllTypes.NestedMessage> ext_opt_nested_message = Extension.getMessageExtension(AllTypes.class, 1017, Wire.OPTIONAL, AllTypes.NestedMessage.class);
  public static final Extension<AllTypes, List<Integer>> ext_rep_int32 = Extension.getRepeatedExtension(AllTypes.class, 1101, Wire.INT32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_uint32 = Extension.getRepeatedExtension(AllTypes.class, 1102, Wire.UINT32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_sint32 = Extension.getRepeatedExtension(AllTypes.class, 1103, Wire.SINT32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_fixed32 = Extension.getRepeatedExtension(AllTypes.class, 1104, Wire.FIXED32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_sfixed32 = Extension.getRepeatedExtension(AllTypes.class, 1105, Wire.SFIXED32, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_int64 = Extension.getRepeatedExtension(AllTypes.class, 1106, Wire.INT64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_uint64 = Extension.getRepeatedExtension(AllTypes.class, 1107, Wire.UINT64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_sint64 = Extension.getRepeatedExtension(AllTypes.class, 1108, Wire.SINT64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_fixed64 = Extension.getRepeatedExtension(AllTypes.class, 1109, Wire.FIXED64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_sfixed64 = Extension.getRepeatedExtension(AllTypes.class, 1110, Wire.SFIXED64, false);
  public static final Extension<AllTypes, List<Boolean>> ext_rep_bool = Extension.getRepeatedExtension(AllTypes.class, 1111, Wire.BOOL, false);
  public static final Extension<AllTypes, List<Float>> ext_rep_float = Extension.getRepeatedExtension(AllTypes.class, 1112, Wire.FLOAT, false);
  public static final Extension<AllTypes, List<Double>> ext_rep_double = Extension.getRepeatedExtension(AllTypes.class, 1113, Wire.DOUBLE, false);
  public static final Extension<AllTypes, List<String>> ext_rep_string = Extension.getRepeatedExtension(AllTypes.class, 1114, Wire.STRING, false);
  public static final Extension<AllTypes, List<byte[]>> ext_rep_bytes = Extension.getRepeatedExtension(AllTypes.class, 1115, Wire.BYTES, false);
  public static final Extension<AllTypes, List<AllTypes.NestedEnum>> ext_rep_nested_enum = Extension.getRepeatedEnumExtension(AllTypes.class, 1116, false, AllTypes.NestedEnum.class);
  public static final Extension<AllTypes, List<AllTypes.NestedMessage>> ext_rep_nested_message = Extension.getRepeatedMessageExtension(AllTypes.class, 1117, AllTypes.NestedMessage.class);
  public static final Extension<AllTypes, List<Integer>> ext_pack_int32 = Extension.getRepeatedExtension(AllTypes.class, 1201, Wire.INT32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_uint32 = Extension.getRepeatedExtension(AllTypes.class, 1202, Wire.UINT32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_sint32 = Extension.getRepeatedExtension(AllTypes.class, 1203, Wire.SINT32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_fixed32 = Extension.getRepeatedExtension(AllTypes.class, 1204, Wire.FIXED32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_sfixed32 = Extension.getRepeatedExtension(AllTypes.class, 1205, Wire.SFIXED32, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_int64 = Extension.getRepeatedExtension(AllTypes.class, 1206, Wire.INT64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_uint64 = Extension.getRepeatedExtension(AllTypes.class, 1207, Wire.UINT64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_sint64 = Extension.getRepeatedExtension(AllTypes.class, 1208, Wire.SINT64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_fixed64 = Extension.getRepeatedExtension(AllTypes.class, 1209, Wire.FIXED64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_sfixed64 = Extension.getRepeatedExtension(AllTypes.class, 1210, Wire.SFIXED64, true);
  public static final Extension<AllTypes, List<Boolean>> ext_pack_bool = Extension.getRepeatedExtension(AllTypes.class, 1211, Wire.BOOL, true);
  public static final Extension<AllTypes, List<Float>> ext_pack_float = Extension.getRepeatedExtension(AllTypes.class, 1212, Wire.FLOAT, true);
  public static final Extension<AllTypes, List<Double>> ext_pack_double = Extension.getRepeatedExtension(AllTypes.class, 1213, Wire.DOUBLE, true);
  public static final Extension<AllTypes, List<String>> ext_pack_string = Extension.getRepeatedExtension(AllTypes.class, 1214, Wire.STRING, false);
  public static final Extension<AllTypes, List<byte[]>> ext_pack_bytes = Extension.getRepeatedExtension(AllTypes.class, 1215, Wire.BYTES, false);
  public static final Extension<AllTypes, List<AllTypes.NestedEnum>> ext_pack_nested_enum = Extension.getRepeatedEnumExtension(AllTypes.class, 1216, true, AllTypes.NestedEnum.class);
  public static final Extension<AllTypes, List<AllTypes.NestedMessage>> ext_pack_nested_message = Extension.getRepeatedMessageExtension(AllTypes.class, 1217, AllTypes.NestedMessage.class);
}
