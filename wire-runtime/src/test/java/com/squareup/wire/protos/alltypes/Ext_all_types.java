/**
 * Code generated by Wire protobuf compiler, do not edit.
 * Source file: ../wire-runtime/src/test/proto/all_types.proto
 */
package com.squareup.wire.protos.alltypes;

import com.squareup.wire.ByteString;
import com.squareup.wire.Extension;
import com.squareup.wire.Message;
import java.util.List;

public final class Ext_all_types {

  private Ext_all_types() {
  }

  public static final Extension<AllTypes, Integer> ext_opt_int32 = Extension.getExtension(AllTypes.class, 1001, Message.INT32, Message.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_uint32 = Extension.getExtension(AllTypes.class, 1002, Message.UINT32, Message.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_sint32 = Extension.getExtension(AllTypes.class, 1003, Message.SINT32, Message.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_fixed32 = Extension.getExtension(AllTypes.class, 1004, Message.FIXED32, Message.OPTIONAL);
  public static final Extension<AllTypes, Integer> ext_opt_sfixed32 = Extension.getExtension(AllTypes.class, 1005, Message.SFIXED32, Message.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_int64 = Extension.getExtension(AllTypes.class, 1006, Message.INT64, Message.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_uint64 = Extension.getExtension(AllTypes.class, 1007, Message.UINT64, Message.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_sint64 = Extension.getExtension(AllTypes.class, 1008, Message.SINT64, Message.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_fixed64 = Extension.getExtension(AllTypes.class, 1009, Message.FIXED64, Message.OPTIONAL);
  public static final Extension<AllTypes, Long> ext_opt_sfixed64 = Extension.getExtension(AllTypes.class, 1010, Message.SFIXED64, Message.OPTIONAL);
  public static final Extension<AllTypes, Boolean> ext_opt_bool = Extension.getExtension(AllTypes.class, 1011, Message.BOOL, Message.OPTIONAL);
  public static final Extension<AllTypes, Float> ext_opt_float = Extension.getExtension(AllTypes.class, 1012, Message.FLOAT, Message.OPTIONAL);
  public static final Extension<AllTypes, Double> ext_opt_double = Extension.getExtension(AllTypes.class, 1013, Message.DOUBLE, Message.OPTIONAL);
  public static final Extension<AllTypes, String> ext_opt_string = Extension.getExtension(AllTypes.class, 1014, Message.STRING, Message.OPTIONAL);
  public static final Extension<AllTypes, ByteString> ext_opt_bytes = Extension.getExtension(AllTypes.class, 1015, Message.BYTES, Message.OPTIONAL);
  public static final Extension<AllTypes, AllTypes.NestedEnum> ext_opt_nested_enum = Extension.getEnumExtension(AllTypes.class, 1016, Message.OPTIONAL, AllTypes.NestedEnum.class);
  public static final Extension<AllTypes, AllTypes.NestedMessage> ext_opt_nested_message = Extension.getMessageExtension(AllTypes.class, 1017, Message.OPTIONAL, AllTypes.NestedMessage.class);
  public static final Extension<AllTypes, List<Integer>> ext_rep_int32 = Extension.getRepeatedExtension(AllTypes.class, 1101, Message.INT32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_uint32 = Extension.getRepeatedExtension(AllTypes.class, 1102, Message.UINT32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_sint32 = Extension.getRepeatedExtension(AllTypes.class, 1103, Message.SINT32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_fixed32 = Extension.getRepeatedExtension(AllTypes.class, 1104, Message.FIXED32, false);
  public static final Extension<AllTypes, List<Integer>> ext_rep_sfixed32 = Extension.getRepeatedExtension(AllTypes.class, 1105, Message.SFIXED32, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_int64 = Extension.getRepeatedExtension(AllTypes.class, 1106, Message.INT64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_uint64 = Extension.getRepeatedExtension(AllTypes.class, 1107, Message.UINT64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_sint64 = Extension.getRepeatedExtension(AllTypes.class, 1108, Message.SINT64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_fixed64 = Extension.getRepeatedExtension(AllTypes.class, 1109, Message.FIXED64, false);
  public static final Extension<AllTypes, List<Long>> ext_rep_sfixed64 = Extension.getRepeatedExtension(AllTypes.class, 1110, Message.SFIXED64, false);
  public static final Extension<AllTypes, List<Boolean>> ext_rep_bool = Extension.getRepeatedExtension(AllTypes.class, 1111, Message.BOOL, false);
  public static final Extension<AllTypes, List<Float>> ext_rep_float = Extension.getRepeatedExtension(AllTypes.class, 1112, Message.FLOAT, false);
  public static final Extension<AllTypes, List<Double>> ext_rep_double = Extension.getRepeatedExtension(AllTypes.class, 1113, Message.DOUBLE, false);
  public static final Extension<AllTypes, List<String>> ext_rep_string = Extension.getRepeatedExtension(AllTypes.class, 1114, Message.STRING, false);
  public static final Extension<AllTypes, List<ByteString>> ext_rep_bytes = Extension.getRepeatedExtension(AllTypes.class, 1115, Message.BYTES, false);
  public static final Extension<AllTypes, List<AllTypes.NestedEnum>> ext_rep_nested_enum = Extension.getRepeatedEnumExtension(AllTypes.class, 1116, false, AllTypes.NestedEnum.class);
  public static final Extension<AllTypes, List<AllTypes.NestedMessage>> ext_rep_nested_message = Extension.getRepeatedMessageExtension(AllTypes.class, 1117, AllTypes.NestedMessage.class);
  public static final Extension<AllTypes, List<Integer>> ext_pack_int32 = Extension.getRepeatedExtension(AllTypes.class, 1201, Message.INT32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_uint32 = Extension.getRepeatedExtension(AllTypes.class, 1202, Message.UINT32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_sint32 = Extension.getRepeatedExtension(AllTypes.class, 1203, Message.SINT32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_fixed32 = Extension.getRepeatedExtension(AllTypes.class, 1204, Message.FIXED32, true);
  public static final Extension<AllTypes, List<Integer>> ext_pack_sfixed32 = Extension.getRepeatedExtension(AllTypes.class, 1205, Message.SFIXED32, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_int64 = Extension.getRepeatedExtension(AllTypes.class, 1206, Message.INT64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_uint64 = Extension.getRepeatedExtension(AllTypes.class, 1207, Message.UINT64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_sint64 = Extension.getRepeatedExtension(AllTypes.class, 1208, Message.SINT64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_fixed64 = Extension.getRepeatedExtension(AllTypes.class, 1209, Message.FIXED64, true);
  public static final Extension<AllTypes, List<Long>> ext_pack_sfixed64 = Extension.getRepeatedExtension(AllTypes.class, 1210, Message.SFIXED64, true);
  public static final Extension<AllTypes, List<Boolean>> ext_pack_bool = Extension.getRepeatedExtension(AllTypes.class, 1211, Message.BOOL, true);
  public static final Extension<AllTypes, List<Float>> ext_pack_float = Extension.getRepeatedExtension(AllTypes.class, 1212, Message.FLOAT, true);
  public static final Extension<AllTypes, List<Double>> ext_pack_double = Extension.getRepeatedExtension(AllTypes.class, 1213, Message.DOUBLE, true);
  public static final Extension<AllTypes, List<AllTypes.NestedEnum>> ext_pack_nested_enum = Extension.getRepeatedEnumExtension(AllTypes.class, 1216, true, AllTypes.NestedEnum.class);
}
