// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/all_types.proto
package com.squareup.wire.protos.alltypes;

import com.squareup.wire.Extension;
import com.squareup.wire.TypeAdapter;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import okio.ByteString;

public final class Ext_all_types {
  public static final Extension<AllTypes, Integer, Integer> ext_opt_int32 = Extension.optional(AllTypes.class, 1001, TypeAdapter.INT32);

  public static final Extension<AllTypes, Integer, Integer> ext_opt_uint32 = Extension.optional(AllTypes.class, 1002, TypeAdapter.UINT32);

  public static final Extension<AllTypes, Integer, Integer> ext_opt_sint32 = Extension.optional(AllTypes.class, 1003, TypeAdapter.SINT32);

  public static final Extension<AllTypes, Integer, Integer> ext_opt_fixed32 = Extension.optional(AllTypes.class, 1004, TypeAdapter.FIXED32);

  public static final Extension<AllTypes, Integer, Integer> ext_opt_sfixed32 = Extension.optional(AllTypes.class, 1005, TypeAdapter.SFIXED32);

  public static final Extension<AllTypes, Long, Long> ext_opt_int64 = Extension.optional(AllTypes.class, 1006, TypeAdapter.INT64);

  public static final Extension<AllTypes, Long, Long> ext_opt_uint64 = Extension.optional(AllTypes.class, 1007, TypeAdapter.UINT64);

  public static final Extension<AllTypes, Long, Long> ext_opt_sint64 = Extension.optional(AllTypes.class, 1008, TypeAdapter.SINT64);

  public static final Extension<AllTypes, Long, Long> ext_opt_fixed64 = Extension.optional(AllTypes.class, 1009, TypeAdapter.FIXED64);

  public static final Extension<AllTypes, Long, Long> ext_opt_sfixed64 = Extension.optional(AllTypes.class, 1010, TypeAdapter.SFIXED64);

  public static final Extension<AllTypes, Boolean, Boolean> ext_opt_bool = Extension.optional(AllTypes.class, 1011, TypeAdapter.BOOL);

  public static final Extension<AllTypes, Float, Float> ext_opt_float = Extension.optional(AllTypes.class, 1012, TypeAdapter.FLOAT);

  public static final Extension<AllTypes, Double, Double> ext_opt_double = Extension.optional(AllTypes.class, 1013, TypeAdapter.DOUBLE);

  public static final Extension<AllTypes, String, String> ext_opt_string = Extension.optional(AllTypes.class, 1014, TypeAdapter.STRING);

  public static final Extension<AllTypes, ByteString, ByteString> ext_opt_bytes = Extension.optional(AllTypes.class, 1015, TypeAdapter.BYTES);

  public static final Extension<AllTypes, AllTypes.NestedEnum, AllTypes.NestedEnum> ext_opt_nested_enum = Extension.optional(AllTypes.class, 1016, AllTypes.NestedEnum.ADAPTER);

  public static final Extension<AllTypes, AllTypes.NestedMessage, AllTypes.NestedMessage> ext_opt_nested_message = Extension.optional(AllTypes.class, 1017, AllTypes.NestedMessage.ADAPTER);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_rep_int32 = Extension.repeated(AllTypes.class, 1101, TypeAdapter.INT32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_rep_uint32 = Extension.repeated(AllTypes.class, 1102, TypeAdapter.UINT32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_rep_sint32 = Extension.repeated(AllTypes.class, 1103, TypeAdapter.SINT32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_rep_fixed32 = Extension.repeated(AllTypes.class, 1104, TypeAdapter.FIXED32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_rep_sfixed32 = Extension.repeated(AllTypes.class, 1105, TypeAdapter.SFIXED32);

  public static final Extension<AllTypes, Long, List<Long>> ext_rep_int64 = Extension.repeated(AllTypes.class, 1106, TypeAdapter.INT64);

  public static final Extension<AllTypes, Long, List<Long>> ext_rep_uint64 = Extension.repeated(AllTypes.class, 1107, TypeAdapter.UINT64);

  public static final Extension<AllTypes, Long, List<Long>> ext_rep_sint64 = Extension.repeated(AllTypes.class, 1108, TypeAdapter.SINT64);

  public static final Extension<AllTypes, Long, List<Long>> ext_rep_fixed64 = Extension.repeated(AllTypes.class, 1109, TypeAdapter.FIXED64);

  public static final Extension<AllTypes, Long, List<Long>> ext_rep_sfixed64 = Extension.repeated(AllTypes.class, 1110, TypeAdapter.SFIXED64);

  public static final Extension<AllTypes, Boolean, List<Boolean>> ext_rep_bool = Extension.repeated(AllTypes.class, 1111, TypeAdapter.BOOL);

  public static final Extension<AllTypes, Float, List<Float>> ext_rep_float = Extension.repeated(AllTypes.class, 1112, TypeAdapter.FLOAT);

  public static final Extension<AllTypes, Double, List<Double>> ext_rep_double = Extension.repeated(AllTypes.class, 1113, TypeAdapter.DOUBLE);

  public static final Extension<AllTypes, String, List<String>> ext_rep_string = Extension.repeated(AllTypes.class, 1114, TypeAdapter.STRING);

  public static final Extension<AllTypes, ByteString, List<ByteString>> ext_rep_bytes = Extension.repeated(AllTypes.class, 1115, TypeAdapter.BYTES);

  public static final Extension<AllTypes, AllTypes.NestedEnum, List<AllTypes.NestedEnum>> ext_rep_nested_enum = Extension.repeated(AllTypes.class, 1116, AllTypes.NestedEnum.ADAPTER);

  public static final Extension<AllTypes, AllTypes.NestedMessage, List<AllTypes.NestedMessage>> ext_rep_nested_message = Extension.repeated(AllTypes.class, 1117, AllTypes.NestedMessage.ADAPTER);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_pack_int32 = Extension.packed(AllTypes.class, 1201, TypeAdapter.INT32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_pack_uint32 = Extension.packed(AllTypes.class, 1202, TypeAdapter.UINT32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_pack_sint32 = Extension.packed(AllTypes.class, 1203, TypeAdapter.SINT32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_pack_fixed32 = Extension.packed(AllTypes.class, 1204, TypeAdapter.FIXED32);

  public static final Extension<AllTypes, Integer, List<Integer>> ext_pack_sfixed32 = Extension.packed(AllTypes.class, 1205, TypeAdapter.SFIXED32);

  public static final Extension<AllTypes, Long, List<Long>> ext_pack_int64 = Extension.packed(AllTypes.class, 1206, TypeAdapter.INT64);

  public static final Extension<AllTypes, Long, List<Long>> ext_pack_uint64 = Extension.packed(AllTypes.class, 1207, TypeAdapter.UINT64);

  public static final Extension<AllTypes, Long, List<Long>> ext_pack_sint64 = Extension.packed(AllTypes.class, 1208, TypeAdapter.SINT64);

  public static final Extension<AllTypes, Long, List<Long>> ext_pack_fixed64 = Extension.packed(AllTypes.class, 1209, TypeAdapter.FIXED64);

  public static final Extension<AllTypes, Long, List<Long>> ext_pack_sfixed64 = Extension.packed(AllTypes.class, 1210, TypeAdapter.SFIXED64);

  public static final Extension<AllTypes, Boolean, List<Boolean>> ext_pack_bool = Extension.packed(AllTypes.class, 1211, TypeAdapter.BOOL);

  public static final Extension<AllTypes, Float, List<Float>> ext_pack_float = Extension.packed(AllTypes.class, 1212, TypeAdapter.FLOAT);

  public static final Extension<AllTypes, Double, List<Double>> ext_pack_double = Extension.packed(AllTypes.class, 1213, TypeAdapter.DOUBLE);

  public static final Extension<AllTypes, AllTypes.NestedEnum, List<AllTypes.NestedEnum>> ext_pack_nested_enum = Extension.packed(AllTypes.class, 1216, AllTypes.NestedEnum.ADAPTER);

  private Ext_all_types() {
  }
}
