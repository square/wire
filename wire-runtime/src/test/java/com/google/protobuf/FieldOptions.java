// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/google/protobuf/descriptor.proto at 332:1
package com.google.protobuf;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import com.squareup.wire.WireEnum;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;

public final class FieldOptions extends ExtendableMessage<FieldOptions> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<FieldOptions> ADAPTER = new TypeAdapter.MessageAdapter<FieldOptions>() {
    @Override
    public FieldOptions read(ProtoReader reader) throws IOException {
      return FieldOptions.read(reader);
    }
  };

  public static final CType DEFAULT_CTYPE = CType.STRING;

  public static final Boolean DEFAULT_PACKED = false;

  public static final Boolean DEFAULT_DEPRECATED = false;

  public static final String DEFAULT_EXPERIMENTAL_MAP_KEY = "";

  /**
   * The ctype option instructs the C++ code generator to use a different
   * representation of the field than it normally would.  See the specific
   * options below.  This option is not yet implemented in the open source
   * release -- sorry, we'll try to include it in a future version!
   */
  public final CType ctype;

  /**
   * The packed option can be enabled for repeated primitive fields to enable
   * a more efficient representation on the wire. Rather than repeatedly
   * writing the tag and type for each element, the entire array is encoded as
   * a single length-delimited blob.
   */
  public final Boolean packed;

  /**
   * Is this field deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for accessors, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating fields.
   */
  public final Boolean deprecated;

  /**
   * EXPERIMENTAL.  DO NOT USE.
   * For "map" fields, the name of the field in the enclosed type that
   * is the key for this map.  For example, suppose we have:
   *   message Item {
   *     required string name = 1;
   *     required string value = 2;
   *   }
   *   message Config {
   *     repeated Item items = 1 [experimental_map_key="name"];
   *   }
   * In this situation, the map key for Item will be set to "name".
   * TODO: Fully-implement this, then remove the "experimental_" prefix.
   */
  public final String experimental_map_key;

  /**
   * The parser stores options it doesn't recognize here. See above.
   */
  public final List<UninterpretedOption> uninterpreted_option;

  public FieldOptions(CType ctype, Boolean packed, Boolean deprecated, String experimental_map_key, List<UninterpretedOption> uninterpreted_option) {
    super("FieldOptions");
    this.ctype = ctype;
    this.packed = packed;
    this.deprecated = deprecated;
    this.experimental_map_key = experimental_map_key;
    this.uninterpreted_option = immutableCopyOf(uninterpreted_option);
  }

  private FieldOptions(Builder builder) {
    this(builder.ctype, builder.packed, builder.deprecated, builder.experimental_map_key, builder.uninterpreted_option);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "ctype", ctype, CType.ADAPTER, false);
    visitor.value(2, "packed", packed, TypeAdapter.BOOL, false);
    visitor.value(3, "deprecated", deprecated, TypeAdapter.BOOL, false);
    visitor.value(9, "experimental_map_key", experimental_map_key, TypeAdapter.STRING, false);
    visitor.repeated(999, "uninterpreted_option", uninterpreted_option, UninterpretedOption.ADAPTER, false);
    visitor.extensions(this);
    visitor.unknowns(this);
  }

  public static FieldOptions read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.ctype = enumOrUnknown(1, reader, CType.ADAPTER, builder); break;
        case 2: builder.packed = reader.value(TypeAdapter.BOOL); break;
        case 3: builder.deprecated = reader.value(TypeAdapter.BOOL); break;
        case 9: builder.experimental_map_key = reader.value(TypeAdapter.STRING); break;
        case 999: builder.uninterpreted_option = repeatedMessage(builder.uninterpreted_option, reader, UninterpretedOption.ADAPTER); break;
        default: builder.readExtensionOrUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends ExtendableMessage.ExtendableBuilder<FieldOptions, Builder> {
    public CType ctype;

    public Boolean packed;

    public Boolean deprecated;

    public String experimental_map_key;

    public List<UninterpretedOption> uninterpreted_option = Collections.emptyList();

    public Builder() {
      super(FieldOptions.class, Builder.class);
    }

    public Builder(FieldOptions message) {
      super(FieldOptions.class, Builder.class, message);
      if (message == null) return;
      this.ctype = message.ctype;
      this.packed = message.packed;
      this.deprecated = message.deprecated;
      this.experimental_map_key = message.experimental_map_key;
      this.uninterpreted_option = copyOf(message.uninterpreted_option);
    }

    /**
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     */
    public Builder ctype(CType ctype) {
      this.ctype = ctype;
      return this;
    }

    /**
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob.
     */
    public Builder packed(Boolean packed) {
      this.packed = packed;
      return this;
    }

    /**
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     */
    public Builder deprecated(Boolean deprecated) {
      this.deprecated = deprecated;
      return this;
    }

    /**
     * EXPERIMENTAL.  DO NOT USE.
     * For "map" fields, the name of the field in the enclosed type that
     * is the key for this map.  For example, suppose we have:
     *   message Item {
     *     required string name = 1;
     *     required string value = 2;
     *   }
     *   message Config {
     *     repeated Item items = 1 [experimental_map_key="name"];
     *   }
     * In this situation, the map key for Item will be set to "name".
     * TODO: Fully-implement this, then remove the "experimental_" prefix.
     */
    public Builder experimental_map_key(String experimental_map_key) {
      this.experimental_map_key = experimental_map_key;
      return this;
    }

    /**
     * The parser stores options it doesn't recognize here. See above.
     */
    public Builder uninterpreted_option(List<UninterpretedOption> uninterpreted_option) {
      this.uninterpreted_option = canonicalizeList(uninterpreted_option);
      return this;
    }

    @Override
    public FieldOptions build() {
      return new FieldOptions(this);
    }
  }

  public enum CType implements WireEnum {
    /**
     * Default mode.
     */
    STRING(0),

    CORD(1),

    STRING_PIECE(2);

    public static final TypeAdapter.EnumAdapter<CType> ADAPTER = new TypeAdapter.EnumAdapter<CType>() {
      @Override
      public CType fromValue(int value) {
        return CType.fromValue(value);
      }
    };

    private final int value;

    CType(int value) {
      this.value = value;
    }

    @Override
    public int value() {
      return value;
    }

    public static CType fromValue(int value) {
      switch (value) {
        case 0: return STRING;
        case 1: return CORD;
        case 2: return STRING_PIECE;
        default: return null;
      }
    }
  }
}
