// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/google/protobuf/descriptor.proto at 196:1
package com.google.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;

/**
 * Describes a method of a service.
 */
public final class MethodDescriptorProto extends Message<MethodDescriptorProto> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<MethodDescriptorProto> ADAPTER = new TypeAdapter.MessageAdapter<MethodDescriptorProto>() {
    @Override
    public MethodDescriptorProto read(ProtoReader reader) throws IOException {
      return MethodDescriptorProto.read(reader);
    }
  };

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_DOC = "";

  public static final String DEFAULT_INPUT_TYPE = "";

  public static final String DEFAULT_OUTPUT_TYPE = "";

  public final String name;

  /**
   * Doc string for generated code.
   */
  public final String doc;

  /**
   * Input and output type names.  These are resolved in the same way as
   * FieldDescriptorProto.type_name, but must refer to a message type.
   */
  public final String input_type;

  public final String output_type;

  public final MethodOptions options;

  public MethodDescriptorProto(String name, String doc, String input_type, String output_type, MethodOptions options) {
    super("MethodDescriptorProto");
    this.name = name;
    this.doc = doc;
    this.input_type = input_type;
    this.output_type = output_type;
    this.options = options;
  }

  private MethodDescriptorProto(Builder builder) {
    this(builder.name, builder.doc, builder.input_type, builder.output_type, builder.options);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "name", name, TypeAdapter.STRING, false);
    visitor.value(5, "doc", doc, TypeAdapter.STRING, false);
    visitor.value(2, "input_type", input_type, TypeAdapter.STRING, false);
    visitor.value(3, "output_type", output_type, TypeAdapter.STRING, false);
    visitor.value(4, "options", options, MethodOptions.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static MethodDescriptorProto read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.name = reader.value(TypeAdapter.STRING); break;
        case 5: builder.doc = reader.value(TypeAdapter.STRING); break;
        case 2: builder.input_type = reader.value(TypeAdapter.STRING); break;
        case 3: builder.output_type = reader.value(TypeAdapter.STRING); break;
        case 4: builder.options = message(reader, MethodOptions.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<MethodDescriptorProto> {
    public String name;

    public String doc;

    public String input_type;

    public String output_type;

    public MethodOptions options;

    public Builder() {
    }

    public Builder(MethodDescriptorProto message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this.doc = message.doc;
      this.input_type = message.input_type;
      this.output_type = message.output_type;
      this.options = message.options;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * Doc string for generated code.
     */
    public Builder doc(String doc) {
      this.doc = doc;
      return this;
    }

    /**
     * Input and output type names.  These are resolved in the same way as
     * FieldDescriptorProto.type_name, but must refer to a message type.
     */
    public Builder input_type(String input_type) {
      this.input_type = input_type;
      return this;
    }

    public Builder output_type(String output_type) {
      this.output_type = output_type;
      return this;
    }

    public Builder options(MethodOptions options) {
      this.options = options;
      return this;
    }

    @Override
    public MethodDescriptorProto build() {
      return new MethodDescriptorProto(this);
    }
  }
}
