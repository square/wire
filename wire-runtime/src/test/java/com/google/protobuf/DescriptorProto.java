// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/google/protobuf/descriptor.proto at 79:1
package com.google.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;

/**
 * Describes a message type.
 */
public final class DescriptorProto extends Message<DescriptorProto> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<DescriptorProto> ADAPTER = new TypeAdapter.MessageAdapter<DescriptorProto>() {
    @Override
    public DescriptorProto read(ProtoReader reader) throws IOException {
      return DescriptorProto.read(reader);
    }
  };

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_DOC = "";

  public final String name;

  /**
   * Doc string for generated code.
   */
  public final String doc;

  public final List<FieldDescriptorProto> field;

  public final List<FieldDescriptorProto> extension;

  public final List<DescriptorProto> nested_type;

  public final List<EnumDescriptorProto> enum_type;

  public final List<ExtensionRange> extension_range;

  public final MessageOptions options;

  public DescriptorProto(String name, String doc, List<FieldDescriptorProto> field, List<FieldDescriptorProto> extension, List<DescriptorProto> nested_type, List<EnumDescriptorProto> enum_type, List<ExtensionRange> extension_range, MessageOptions options) {
    super("DescriptorProto");
    this.name = name;
    this.doc = doc;
    this.field = immutableCopyOf(field);
    this.extension = immutableCopyOf(extension);
    this.nested_type = immutableCopyOf(nested_type);
    this.enum_type = immutableCopyOf(enum_type);
    this.extension_range = immutableCopyOf(extension_range);
    this.options = options;
  }

  private DescriptorProto(Builder builder) {
    this(builder.name, builder.doc, builder.field, builder.extension, builder.nested_type, builder.enum_type, builder.extension_range, builder.options);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "name", name, TypeAdapter.STRING, false);
    visitor.value(8, "doc", doc, TypeAdapter.STRING, false);
    visitor.repeated(2, "field", field, FieldDescriptorProto.ADAPTER, false);
    visitor.repeated(6, "extension", extension, FieldDescriptorProto.ADAPTER, false);
    visitor.repeated(3, "nested_type", nested_type, DescriptorProto.ADAPTER, false);
    visitor.repeated(4, "enum_type", enum_type, EnumDescriptorProto.ADAPTER, false);
    visitor.repeated(5, "extension_range", extension_range, ExtensionRange.ADAPTER, false);
    visitor.value(7, "options", options, MessageOptions.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static DescriptorProto read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.name = reader.value(TypeAdapter.STRING); break;
        case 8: builder.doc = reader.value(TypeAdapter.STRING); break;
        case 2: builder.field = repeatedMessage(builder.field, reader, FieldDescriptorProto.ADAPTER); break;
        case 6: builder.extension = repeatedMessage(builder.extension, reader, FieldDescriptorProto.ADAPTER); break;
        case 3: builder.nested_type = repeatedMessage(builder.nested_type, reader, DescriptorProto.ADAPTER); break;
        case 4: builder.enum_type = repeatedMessage(builder.enum_type, reader, EnumDescriptorProto.ADAPTER); break;
        case 5: builder.extension_range = repeatedMessage(builder.extension_range, reader, ExtensionRange.ADAPTER); break;
        case 7: builder.options = message(reader, MessageOptions.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<DescriptorProto> {
    public String name;

    public String doc;

    public List<FieldDescriptorProto> field = Collections.emptyList();

    public List<FieldDescriptorProto> extension = Collections.emptyList();

    public List<DescriptorProto> nested_type = Collections.emptyList();

    public List<EnumDescriptorProto> enum_type = Collections.emptyList();

    public List<ExtensionRange> extension_range = Collections.emptyList();

    public MessageOptions options;

    public Builder() {
    }

    public Builder(DescriptorProto message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this.doc = message.doc;
      this.field = copyOf(message.field);
      this.extension = copyOf(message.extension);
      this.nested_type = copyOf(message.nested_type);
      this.enum_type = copyOf(message.enum_type);
      this.extension_range = copyOf(message.extension_range);
      this.options = message.options;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * Doc string for generated code.
     */
    public Builder doc(String doc) {
      this.doc = doc;
      return this;
    }

    public Builder field(List<FieldDescriptorProto> field) {
      this.field = canonicalizeList(field);
      return this;
    }

    public Builder extension(List<FieldDescriptorProto> extension) {
      this.extension = canonicalizeList(extension);
      return this;
    }

    public Builder nested_type(List<DescriptorProto> nested_type) {
      this.nested_type = canonicalizeList(nested_type);
      return this;
    }

    public Builder enum_type(List<EnumDescriptorProto> enum_type) {
      this.enum_type = canonicalizeList(enum_type);
      return this;
    }

    public Builder extension_range(List<ExtensionRange> extension_range) {
      this.extension_range = canonicalizeList(extension_range);
      return this;
    }

    public Builder options(MessageOptions options) {
      this.options = options;
      return this;
    }

    @Override
    public DescriptorProto build() {
      return new DescriptorProto(this);
    }
  }

  public static final class ExtensionRange extends Message<ExtensionRange> {
    private static final long serialVersionUID = 0L;

    public static final TypeAdapter<ExtensionRange> ADAPTER = new TypeAdapter.MessageAdapter<ExtensionRange>() {
      @Override
      public ExtensionRange read(ProtoReader reader) throws IOException {
        return ExtensionRange.read(reader);
      }
    };

    public static final Integer DEFAULT_START = 0;

    public static final Integer DEFAULT_END = 0;

    public final Integer start;

    public final Integer end;

    public ExtensionRange(Integer start, Integer end) {
      super("ExtensionRange");
      this.start = start;
      this.end = end;
    }

    private ExtensionRange(Builder builder) {
      this(builder.start, builder.end);
      setBuilder(builder);
    }

    @Override
    protected void visitFields(Message.Visitor visitor) {
      visitor.value(1, "start", start, TypeAdapter.INT32, false);
      visitor.value(2, "end", end, TypeAdapter.INT32, false);
      visitor.unknowns(this);
    }

    public static ExtensionRange read(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      while (reader.hasNext()) {
        int tag = reader.nextTag();
        switch (tag) {
          case 1: builder.start = reader.value(TypeAdapter.INT32); break;
          case 2: builder.end = reader.value(TypeAdapter.INT32); break;
          default: builder.readUnknown(tag, reader); break;
        }
      }
      return builder.build();
    }

    public static final class Builder extends com.squareup.wire.Message.Builder<ExtensionRange> {
      public Integer start;

      public Integer end;

      public Builder() {
      }

      public Builder(ExtensionRange message) {
        super(message);
        if (message == null) return;
        this.start = message.start;
        this.end = message.end;
      }

      public Builder start(Integer start) {
        this.start = start;
        return this;
      }

      public Builder end(Integer end) {
        this.end = end;
        return this;
      }

      @Override
      public ExtensionRange build() {
        return new ExtensionRange(this);
      }
    }
  }
}
