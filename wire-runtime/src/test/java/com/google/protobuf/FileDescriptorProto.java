// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/google/protobuf/descriptor.proto at 56:1
package com.google.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;

/**
 * Describes a complete .proto file.
 */
public final class FileDescriptorProto extends Message<FileDescriptorProto> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<FileDescriptorProto> ADAPTER = new TypeAdapter.MessageAdapter<FileDescriptorProto>() {
    @Override
    public FileDescriptorProto read(ProtoReader reader) throws IOException {
      return FileDescriptorProto.read(reader);
    }
  };

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_PACKAGE = "";

  /**
   * file name, relative to root of source tree
   */
  public final String name;

  /**
   * e.g. "foo", "foo.bar", etc.
   */
  public final String _package;

  /**
   * Names of files imported by this file.
   */
  public final List<String> dependency;

  /**
   * All top-level definitions in this file.
   */
  public final List<DescriptorProto> message_type;

  public final List<EnumDescriptorProto> enum_type;

  public final List<ServiceDescriptorProto> service;

  public final List<FieldDescriptorProto> extension;

  public final FileOptions options;

  /**
   * This field contains optional information about the original source code.
   * You may safely remove this entire field without harming runtime
   * functionality of the descriptors -- the information is needed only by
   * development tools.
   */
  public final SourceCodeInfo source_code_info;

  public FileDescriptorProto(String name, String _package, List<String> dependency, List<DescriptorProto> message_type, List<EnumDescriptorProto> enum_type, List<ServiceDescriptorProto> service, List<FieldDescriptorProto> extension, FileOptions options, SourceCodeInfo source_code_info) {
    super("FileDescriptorProto");
    this.name = name;
    this._package = _package;
    this.dependency = immutableCopyOf(dependency);
    this.message_type = immutableCopyOf(message_type);
    this.enum_type = immutableCopyOf(enum_type);
    this.service = immutableCopyOf(service);
    this.extension = immutableCopyOf(extension);
    this.options = options;
    this.source_code_info = source_code_info;
  }

  private FileDescriptorProto(Builder builder) {
    this(builder.name, builder._package, builder.dependency, builder.message_type, builder.enum_type, builder.service, builder.extension, builder.options, builder.source_code_info);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "name", name, TypeAdapter.STRING, false);
    visitor.value(2, "package", _package, TypeAdapter.STRING, false);
    visitor.repeated(3, "dependency", dependency, TypeAdapter.STRING, false);
    visitor.repeated(4, "message_type", message_type, DescriptorProto.ADAPTER, false);
    visitor.repeated(5, "enum_type", enum_type, EnumDescriptorProto.ADAPTER, false);
    visitor.repeated(6, "service", service, ServiceDescriptorProto.ADAPTER, false);
    visitor.repeated(7, "extension", extension, FieldDescriptorProto.ADAPTER, false);
    visitor.value(8, "options", options, FileOptions.ADAPTER, false);
    visitor.value(9, "source_code_info", source_code_info, SourceCodeInfo.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static FileDescriptorProto read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.name = reader.value(TypeAdapter.STRING); break;
        case 2: builder._package = reader.value(TypeAdapter.STRING); break;
        case 3: builder.dependency = repeated(builder.dependency, reader.value(TypeAdapter.STRING)); break;
        case 4: builder.message_type = repeatedMessage(builder.message_type, reader, DescriptorProto.ADAPTER); break;
        case 5: builder.enum_type = repeatedMessage(builder.enum_type, reader, EnumDescriptorProto.ADAPTER); break;
        case 6: builder.service = repeatedMessage(builder.service, reader, ServiceDescriptorProto.ADAPTER); break;
        case 7: builder.extension = repeatedMessage(builder.extension, reader, FieldDescriptorProto.ADAPTER); break;
        case 8: builder.options = message(reader, FileOptions.ADAPTER); break;
        case 9: builder.source_code_info = message(reader, SourceCodeInfo.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<FileDescriptorProto> {
    public String name;

    public String _package;

    public List<String> dependency = Collections.emptyList();

    public List<DescriptorProto> message_type = Collections.emptyList();

    public List<EnumDescriptorProto> enum_type = Collections.emptyList();

    public List<ServiceDescriptorProto> service = Collections.emptyList();

    public List<FieldDescriptorProto> extension = Collections.emptyList();

    public FileOptions options;

    public SourceCodeInfo source_code_info;

    public Builder() {
    }

    public Builder(FileDescriptorProto message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this._package = message._package;
      this.dependency = copyOf(message.dependency);
      this.message_type = copyOf(message.message_type);
      this.enum_type = copyOf(message.enum_type);
      this.service = copyOf(message.service);
      this.extension = copyOf(message.extension);
      this.options = message.options;
      this.source_code_info = message.source_code_info;
    }

    /**
     * file name, relative to root of source tree
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * e.g. "foo", "foo.bar", etc.
     */
    public Builder _package(String _package) {
      this._package = _package;
      return this;
    }

    /**
     * Names of files imported by this file.
     */
    public Builder dependency(List<String> dependency) {
      this.dependency = canonicalizeList(dependency);
      return this;
    }

    /**
     * All top-level definitions in this file.
     */
    public Builder message_type(List<DescriptorProto> message_type) {
      this.message_type = canonicalizeList(message_type);
      return this;
    }

    public Builder enum_type(List<EnumDescriptorProto> enum_type) {
      this.enum_type = canonicalizeList(enum_type);
      return this;
    }

    public Builder service(List<ServiceDescriptorProto> service) {
      this.service = canonicalizeList(service);
      return this;
    }

    public Builder extension(List<FieldDescriptorProto> extension) {
      this.extension = canonicalizeList(extension);
      return this;
    }

    public Builder options(FileOptions options) {
      this.options = options;
      return this;
    }

    /**
     * This field contains optional information about the original source code.
     * You may safely remove this entire field without harming runtime
     * functionality of the descriptors -- the information is needed only by
     * development tools.
     */
    public Builder source_code_info(SourceCodeInfo source_code_info) {
      this.source_code_info = source_code_info;
      return this;
    }

    @Override
    public FileDescriptorProto build() {
      return new FileDescriptorProto(this);
    }
  }
}
