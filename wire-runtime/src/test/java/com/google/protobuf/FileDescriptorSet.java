// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/google/protobuf/descriptor.proto at 51:1
package com.google.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import java.io.IOException;
import java.lang.Override;
import java.util.Collections;
import java.util.List;

/**
 * The protocol compiler can output a FileDescriptorSet containing the .proto
 * files it parses.
 */
public final class FileDescriptorSet extends Message<FileDescriptorSet> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<FileDescriptorSet> ADAPTER = new TypeAdapter.MessageAdapter<FileDescriptorSet>() {
    @Override
    public FileDescriptorSet read(ProtoReader reader) throws IOException {
      return FileDescriptorSet.read(reader);
    }
  };

  public final List<FileDescriptorProto> file;

  public FileDescriptorSet(List<FileDescriptorProto> file) {
    super("FileDescriptorSet");
    this.file = immutableCopyOf(file);
  }

  private FileDescriptorSet(Builder builder) {
    this(builder.file);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.repeated(1, "file", file, FileDescriptorProto.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static FileDescriptorSet read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.file = repeatedMessage(builder.file, reader, FileDescriptorProto.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<FileDescriptorSet> {
    public List<FileDescriptorProto> file = Collections.emptyList();

    public Builder() {
    }

    public Builder(FileDescriptorSet message) {
      super(message);
      if (message == null) return;
      this.file = copyOf(message.file);
    }

    public Builder file(List<FileDescriptorProto> file) {
      this.file = canonicalizeList(file);
      return this;
    }

    @Override
    public FileDescriptorSet build() {
      return new FileDescriptorSet(this);
    }
  }
}
