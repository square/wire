// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/google/protobuf/descriptor.proto at 99:1
package com.google.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import com.squareup.wire.WireEnum;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;

/**
 * Describes a field within a message.
 */
public final class FieldDescriptorProto extends Message<FieldDescriptorProto> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<FieldDescriptorProto> ADAPTER = new TypeAdapter.MessageAdapter<FieldDescriptorProto>() {
    @Override
    public FieldDescriptorProto read(ProtoReader reader) throws IOException {
      return FieldDescriptorProto.read(reader);
    }
  };

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_DOC = "";

  public static final Integer DEFAULT_NUMBER = 0;

  public static final Label DEFAULT_LABEL = Label.LABEL_OPTIONAL;

  public static final Type DEFAULT_TYPE = Type.TYPE_DOUBLE;

  public static final String DEFAULT_TYPE_NAME = "";

  public static final String DEFAULT_EXTENDEE = "";

  public static final String DEFAULT_DEFAULT_VALUE = "";

  public final String name;

  /**
   * Doc string for generated code.
   */
  public final String doc;

  public final Integer number;

  public final Label label;

  /**
   * If type_name is set, this need not be set.  If both this and type_name
   * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
   */
  public final Type type;

  /**
   * For message and enum types, this is the name of the type.  If the name
   * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
   * rules are used to find the type (i.e. first the nested types within this
   * message are searched, then within the parent, on up to the root
   * namespace).
   */
  public final String type_name;

  /**
   * For extensions, this is the name of the type being extended.  It is
   * resolved in the same manner as type_name.
   */
  public final String extendee;

  /**
   * For numeric types, contains the original text representation of the value.
   * For booleans, "true" or "false".
   * For strings, contains the default text contents (not escaped in any way).
   * For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
   * TODO(kenton):  Base-64 encode?
   */
  public final String default_value;

  public final FieldOptions options;

  public FieldDescriptorProto(String name, String doc, Integer number, Label label, Type type, String type_name, String extendee, String default_value, FieldOptions options) {
    super("FieldDescriptorProto");
    this.name = name;
    this.doc = doc;
    this.number = number;
    this.label = label;
    this.type = type;
    this.type_name = type_name;
    this.extendee = extendee;
    this.default_value = default_value;
    this.options = options;
  }

  private FieldDescriptorProto(Builder builder) {
    this(builder.name, builder.doc, builder.number, builder.label, builder.type, builder.type_name, builder.extendee, builder.default_value, builder.options);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "name", name, TypeAdapter.STRING, false);
    visitor.value(9, "doc", doc, TypeAdapter.STRING, false);
    visitor.value(3, "number", number, TypeAdapter.INT32, false);
    visitor.value(4, "label", label, Label.ADAPTER, false);
    visitor.value(5, "type", type, Type.ADAPTER, false);
    visitor.value(6, "type_name", type_name, TypeAdapter.STRING, false);
    visitor.value(2, "extendee", extendee, TypeAdapter.STRING, false);
    visitor.value(7, "default_value", default_value, TypeAdapter.STRING, false);
    visitor.value(8, "options", options, FieldOptions.ADAPTER, false);
    visitor.unknowns(this);
  }

  public static FieldDescriptorProto read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.name = reader.value(TypeAdapter.STRING); break;
        case 9: builder.doc = reader.value(TypeAdapter.STRING); break;
        case 3: builder.number = reader.value(TypeAdapter.INT32); break;
        case 4: builder.label = enumOrUnknown(4, reader, Label.ADAPTER, builder); break;
        case 5: builder.type = enumOrUnknown(5, reader, Type.ADAPTER, builder); break;
        case 6: builder.type_name = reader.value(TypeAdapter.STRING); break;
        case 2: builder.extendee = reader.value(TypeAdapter.STRING); break;
        case 7: builder.default_value = reader.value(TypeAdapter.STRING); break;
        case 8: builder.options = message(reader, FieldOptions.ADAPTER); break;
        default: builder.readUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<FieldDescriptorProto> {
    public String name;

    public String doc;

    public Integer number;

    public Label label;

    public Type type;

    public String type_name;

    public String extendee;

    public String default_value;

    public FieldOptions options;

    public Builder() {
    }

    public Builder(FieldDescriptorProto message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this.doc = message.doc;
      this.number = message.number;
      this.label = message.label;
      this.type = message.type;
      this.type_name = message.type_name;
      this.extendee = message.extendee;
      this.default_value = message.default_value;
      this.options = message.options;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * Doc string for generated code.
     */
    public Builder doc(String doc) {
      this.doc = doc;
      return this;
    }

    public Builder number(Integer number) {
      this.number = number;
      return this;
    }

    public Builder label(Label label) {
      this.label = label;
      return this;
    }

    /**
     * If type_name is set, this need not be set.  If both this and type_name
     * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
     */
    public Builder type(Type type) {
      this.type = type;
      return this;
    }

    /**
     * For message and enum types, this is the name of the type.  If the name
     * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
     * rules are used to find the type (i.e. first the nested types within this
     * message are searched, then within the parent, on up to the root
     * namespace).
     */
    public Builder type_name(String type_name) {
      this.type_name = type_name;
      return this;
    }

    /**
     * For extensions, this is the name of the type being extended.  It is
     * resolved in the same manner as type_name.
     */
    public Builder extendee(String extendee) {
      this.extendee = extendee;
      return this;
    }

    /**
     * For numeric types, contains the original text representation of the value.
     * For booleans, "true" or "false".
     * For strings, contains the default text contents (not escaped in any way).
     * For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
     * TODO(kenton):  Base-64 encode?
     */
    public Builder default_value(String default_value) {
      this.default_value = default_value;
      return this;
    }

    public Builder options(FieldOptions options) {
      this.options = options;
      return this;
    }

    @Override
    public FieldDescriptorProto build() {
      return new FieldDescriptorProto(this);
    }
  }

  public enum Type implements WireEnum {
    /**
     * 0 is reserved for errors.
     * Order is weird for historical reasons.
     */
    TYPE_DOUBLE(1),

    TYPE_FLOAT(2),

    /**
     * Not ZigZag encoded.  Negative numbers
     */
    TYPE_INT64(3),

    /**
     * take 10 bytes.  Use TYPE_SINT64 if negative
     * values are likely.
     */
    TYPE_UINT64(4),

    /**
     * Not ZigZag encoded.  Negative numbers
     */
    TYPE_INT32(5),

    /**
     * take 10 bytes.  Use TYPE_SINT32 if negative
     * values are likely.
     */
    TYPE_FIXED64(6),

    TYPE_FIXED32(7),

    TYPE_BOOL(8),

    TYPE_STRING(9),

    /**
     * Tag-delimited aggregate.
     */
    TYPE_GROUP(10),

    /**
     * Length-delimited aggregate.
     */
    TYPE_MESSAGE(11),

    /**
     * New in version 2.
     */
    TYPE_BYTES(12),

    TYPE_UINT32(13),

    TYPE_ENUM(14),

    TYPE_SFIXED32(15),

    TYPE_SFIXED64(16),

    /**
     * Uses ZigZag encoding.
     */
    TYPE_SINT32(17),

    /**
     * Uses ZigZag encoding.
     */
    TYPE_SINT64(18);

    public static final TypeAdapter.EnumAdapter<Type> ADAPTER = new TypeAdapter.EnumAdapter<Type>() {
      @Override
      public Type fromValue(int value) {
        return Type.fromValue(value);
      }
    };

    private final int value;

    Type(int value) {
      this.value = value;
    }

    @Override
    public int value() {
      return value;
    }

    public static Type fromValue(int value) {
      switch (value) {
        case 1: return TYPE_DOUBLE;
        case 2: return TYPE_FLOAT;
        case 3: return TYPE_INT64;
        case 4: return TYPE_UINT64;
        case 5: return TYPE_INT32;
        case 6: return TYPE_FIXED64;
        case 7: return TYPE_FIXED32;
        case 8: return TYPE_BOOL;
        case 9: return TYPE_STRING;
        case 10: return TYPE_GROUP;
        case 11: return TYPE_MESSAGE;
        case 12: return TYPE_BYTES;
        case 13: return TYPE_UINT32;
        case 14: return TYPE_ENUM;
        case 15: return TYPE_SFIXED32;
        case 16: return TYPE_SFIXED64;
        case 17: return TYPE_SINT32;
        case 18: return TYPE_SINT64;
        default: return null;
      }
    }
  }

  public enum Label implements WireEnum {
    /**
     * 0 is reserved for errors
     */
    LABEL_OPTIONAL(1),

    LABEL_REQUIRED(2),

    LABEL_REPEATED(3);

    public static final TypeAdapter.EnumAdapter<Label> ADAPTER = new TypeAdapter.EnumAdapter<Label>() {
      @Override
      public Label fromValue(int value) {
        return Label.fromValue(value);
      }
    };

    private final int value;

    Label(int value) {
      this.value = value;
    }

    @Override
    public int value() {
      return value;
    }

    public static Label fromValue(int value) {
      switch (value) {
        case 1: return LABEL_OPTIONAL;
        case 2: return LABEL_REQUIRED;
        case 3: return LABEL_REPEATED;
        default: return null;
      }
    }
  }
}
