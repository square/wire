// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: google/protobuf/descriptor.proto at 51:1
package com.google.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.TagMap;
import com.squareup.wire.WireField;
import java.lang.Object;
import java.lang.Override;
import java.util.List;

/**
 * The protocol compiler can output a FileDescriptorSet containing the .proto
 * files it parses.
 */
public final class FileDescriptorSet extends Message<FileDescriptorSet> {
  public static final ProtoAdapter<FileDescriptorSet> ADAPTER = ProtoAdapter.newMessageAdapter(FileDescriptorSet.class);

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.google.protobuf.FileDescriptorProto#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<FileDescriptorProto> file;

  public FileDescriptorSet(List<FileDescriptorProto> file) {
    this(file, TagMap.EMPTY);
  }

  public FileDescriptorSet(List<FileDescriptorProto> file, TagMap tagMap) {
    super(tagMap);
    this.file = immutableCopyOf(file);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FileDescriptorSet)) return false;
    FileDescriptorSet o = (FileDescriptorSet) other;
    return equals(tagMap(), o.tagMap())
        && equals(file, o.file);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = tagMap().hashCode();
      result = result * 37 + (file != null ? file.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<FileDescriptorSet, Builder> {
    public List<FileDescriptorProto> file;

    public Builder() {
      file = newMutableList();
    }

    public Builder(FileDescriptorSet message) {
      super(message);
      if (message == null) return;
      this.file = copyOf(message.file);
    }

    public Builder file(List<FileDescriptorProto> file) {
      checkElementsNotNull(file);
      this.file = file;
      return this;
    }

    @Override
    public FileDescriptorSet build() {
      return new FileDescriptorSet(file, buildTagMap());
    }
  }
}
