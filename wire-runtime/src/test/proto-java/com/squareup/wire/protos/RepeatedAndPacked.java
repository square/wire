// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: repeated_and_packed.proto at 20:1
package com.squareup.wire.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.TagMap;
import com.squareup.wire.WireField;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.util.List;

public final class RepeatedAndPacked extends Message<RepeatedAndPacked> {
  public static final ProtoAdapter<RepeatedAndPacked> ADAPTER = ProtoAdapter.newMessageAdapter(RepeatedAndPacked.class);

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 201,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> rep_int32;

  @WireField(
      tag = 301,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> pack_int32;

  public RepeatedAndPacked(List<Integer> rep_int32, List<Integer> pack_int32) {
    this(rep_int32, pack_int32, TagMap.EMPTY);
  }

  public RepeatedAndPacked(List<Integer> rep_int32, List<Integer> pack_int32, TagMap tagMap) {
    super(tagMap);
    this.rep_int32 = immutableCopyOf(rep_int32);
    this.pack_int32 = immutableCopyOf(pack_int32);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RepeatedAndPacked)) return false;
    RepeatedAndPacked o = (RepeatedAndPacked) other;
    return equals(tagMap(), o.tagMap())
        && equals(rep_int32, o.rep_int32)
        && equals(pack_int32, o.pack_int32);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = tagMap().hashCode();
      result = result * 37 + (rep_int32 != null ? rep_int32.hashCode() : 1);
      result = result * 37 + (pack_int32 != null ? pack_int32.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<RepeatedAndPacked, Builder> {
    public List<Integer> rep_int32;

    public List<Integer> pack_int32;

    public Builder() {
      rep_int32 = newMutableList();
      pack_int32 = newMutableList();
    }

    public Builder(RepeatedAndPacked message) {
      super(message);
      if (message == null) return;
      this.rep_int32 = copyOf(message.rep_int32);
      this.pack_int32 = copyOf(message.pack_int32);
    }

    public Builder rep_int32(List<Integer> rep_int32) {
      checkElementsNotNull(rep_int32);
      this.rep_int32 = rep_int32;
      return this;
    }

    public Builder pack_int32(List<Integer> pack_int32) {
      checkElementsNotNull(pack_int32);
      this.pack_int32 = pack_int32;
      return this;
    }

    @Override
    public RepeatedAndPacked build() {
      return new RepeatedAndPacked(rep_int32, pack_int32, buildTagMap());
    }
  }
}
