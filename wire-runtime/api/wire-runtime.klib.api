// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64]
// Alias: macos => [macosArm64, macosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.squareup.wire:wire-runtime>
abstract class <#A: com.squareup.wire/Message<#A, #B>, #B: com.squareup.wire/Message.Builder<#A, #B>> com.squareup.wire/Message { // com.squareup.wire/Message|null[0]
    abstract class <#A1: com.squareup.wire/Message<#A1, #B1>, #B1: com.squareup.wire/Message.Builder<#A1, #B1>> Builder { // com.squareup.wire/Message.Builder|null[0]
        abstract fun build(): #A1 // com.squareup.wire/Message.Builder.build|build(){}[0]
        constructor <init>() // com.squareup.wire/Message.Builder.<init>|<init>(){}[0]
        final fun addUnknownField(kotlin/Int, com.squareup.wire/FieldEncoding, kotlin/Any?): com.squareup.wire/Message.Builder<#A1, #B1> // com.squareup.wire/Message.Builder.addUnknownField|addUnknownField(kotlin.Int;com.squareup.wire.FieldEncoding;kotlin.Any?){}[0]
        final fun addUnknownFields(okio/ByteString): com.squareup.wire/Message.Builder<#A1, #B1> // com.squareup.wire/Message.Builder.addUnknownFields|addUnknownFields(okio.ByteString){}[0]
        final fun buildUnknownFields(): okio/ByteString // com.squareup.wire/Message.Builder.buildUnknownFields|buildUnknownFields(){}[0]
        final fun clearUnknownFields(): com.squareup.wire/Message.Builder<#A1, #B1> // com.squareup.wire/Message.Builder.clearUnknownFields|clearUnknownFields(){}[0]
    }
    abstract fun newBuilder(): #B // com.squareup.wire/Message.newBuilder|newBuilder(){}[0]
    constructor <init>(com.squareup.wire/ProtoAdapter<#A>, okio/ByteString) // com.squareup.wire/Message.<init>|<init>(com.squareup.wire.ProtoAdapter<1:0>;okio.ByteString){}[0]
    final fun encode(): kotlin/ByteArray // com.squareup.wire/Message.encode|encode(){}[0]
    final fun encode(okio/BufferedSink) // com.squareup.wire/Message.encode|encode(okio.BufferedSink){}[0]
    final fun encodeByteString(): okio/ByteString // com.squareup.wire/Message.encodeByteString|encodeByteString(){}[0]
    final val adapter // com.squareup.wire/Message.adapter|{}adapter[0]
        final fun <get-adapter>(): com.squareup.wire/ProtoAdapter<#A> // com.squareup.wire/Message.adapter.<get-adapter>|<get-adapter>(){}[0]
    final val unknownFields // com.squareup.wire/Message.unknownFields|{}unknownFields[0]
        final fun <get-unknownFields>(): okio/ByteString // com.squareup.wire/Message.unknownFields.<get-unknownFields>|<get-unknownFields>(){}[0]
    final var hashCode // com.squareup.wire/Message.hashCode|{}hashCode[0]
        final fun <get-hashCode>(): kotlin/Int // com.squareup.wire/Message.hashCode.<get-hashCode>|<get-hashCode>(){}[0]
        final fun <set-hashCode>(kotlin/Int) // com.squareup.wire/Message.hashCode.<set-hashCode>|<set-hashCode>(kotlin.Int){}[0]
}
abstract class <#A: com.squareup.wire/WireEnum> com.squareup.wire/EnumAdapter : com.squareup.wire/ProtoAdapter<#A> { // com.squareup.wire/EnumAdapter|null[0]
    abstract fun fromValue(kotlin/Int): #A? // com.squareup.wire/EnumAdapter.fromValue|fromValue(kotlin.Int){}[0]
    constructor <init>(kotlin.reflect/KClass<#A>, com.squareup.wire/Syntax, #A?) // com.squareup.wire/EnumAdapter.<init>|<init>(kotlin.reflect.KClass<1:0>;com.squareup.wire.Syntax;1:0?){}[0]
    open fun decode(com.squareup.wire/ProtoReader): #A // com.squareup.wire/EnumAdapter.decode|decode(com.squareup.wire.ProtoReader){}[0]
    open fun encode(com.squareup.wire/ProtoWriter, #A) // com.squareup.wire/EnumAdapter.encode|encode(com.squareup.wire.ProtoWriter;1:0){}[0]
    open fun encode(com.squareup.wire/ReverseProtoWriter, #A) // com.squareup.wire/EnumAdapter.encode|encode(com.squareup.wire.ReverseProtoWriter;1:0){}[0]
    open fun encodedSize(#A): kotlin/Int // com.squareup.wire/EnumAdapter.encodedSize|encodedSize(1:0){}[0]
    open fun redact(#A): #A // com.squareup.wire/EnumAdapter.redact|redact(1:0){}[0]
}
abstract class <#A: kotlin/Any?, #B: kotlin/Any?> com.squareup.wire.internal/FieldOrOneOfBinding { // com.squareup.wire.internal/FieldOrOneOfBinding|null[0]
    abstract fun get(#A): kotlin/Any? // com.squareup.wire.internal/FieldOrOneOfBinding.get|get(1:0){}[0]
    abstract fun getFromBuilder(#B): kotlin/Any? // com.squareup.wire.internal/FieldOrOneOfBinding.getFromBuilder|getFromBuilder(1:1){}[0]
    abstract fun set(#B, kotlin/Any?) // com.squareup.wire.internal/FieldOrOneOfBinding.set|set(1:1;kotlin.Any?){}[0]
    abstract fun value(#B, kotlin/Any) // com.squareup.wire.internal/FieldOrOneOfBinding.value|value(1:1;kotlin.Any){}[0]
    abstract val declaredName // com.squareup.wire.internal/FieldOrOneOfBinding.declaredName|{}declaredName[0]
        abstract fun <get-declaredName>(): kotlin/String // com.squareup.wire.internal/FieldOrOneOfBinding.declaredName.<get-declaredName>|<get-declaredName>(){}[0]
    abstract val isMap // com.squareup.wire.internal/FieldOrOneOfBinding.isMap|{}isMap[0]
        abstract fun <get-isMap>(): kotlin/Boolean // com.squareup.wire.internal/FieldOrOneOfBinding.isMap.<get-isMap>|<get-isMap>(){}[0]
    abstract val isMessage // com.squareup.wire.internal/FieldOrOneOfBinding.isMessage|{}isMessage[0]
        abstract fun <get-isMessage>(): kotlin/Boolean // com.squareup.wire.internal/FieldOrOneOfBinding.isMessage.<get-isMessage>|<get-isMessage>(){}[0]
    abstract val keyAdapter // com.squareup.wire.internal/FieldOrOneOfBinding.keyAdapter|{}keyAdapter[0]
        abstract fun <get-keyAdapter>(): com.squareup.wire/ProtoAdapter<*> // com.squareup.wire.internal/FieldOrOneOfBinding.keyAdapter.<get-keyAdapter>|<get-keyAdapter>(){}[0]
    abstract val label // com.squareup.wire.internal/FieldOrOneOfBinding.label|{}label[0]
        abstract fun <get-label>(): com.squareup.wire/WireField.Label // com.squareup.wire.internal/FieldOrOneOfBinding.label.<get-label>|<get-label>(){}[0]
    abstract val name // com.squareup.wire.internal/FieldOrOneOfBinding.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // com.squareup.wire.internal/FieldOrOneOfBinding.name.<get-name>|<get-name>(){}[0]
    abstract val redacted // com.squareup.wire.internal/FieldOrOneOfBinding.redacted|{}redacted[0]
        abstract fun <get-redacted>(): kotlin/Boolean // com.squareup.wire.internal/FieldOrOneOfBinding.redacted.<get-redacted>|<get-redacted>(){}[0]
    abstract val singleAdapter // com.squareup.wire.internal/FieldOrOneOfBinding.singleAdapter|{}singleAdapter[0]
        abstract fun <get-singleAdapter>(): com.squareup.wire/ProtoAdapter<*> // com.squareup.wire.internal/FieldOrOneOfBinding.singleAdapter.<get-singleAdapter>|<get-singleAdapter>(){}[0]
    abstract val tag // com.squareup.wire.internal/FieldOrOneOfBinding.tag|{}tag[0]
        abstract fun <get-tag>(): kotlin/Int // com.squareup.wire.internal/FieldOrOneOfBinding.tag.<get-tag>|<get-tag>(){}[0]
    abstract val wireFieldJsonName // com.squareup.wire.internal/FieldOrOneOfBinding.wireFieldJsonName|{}wireFieldJsonName[0]
        abstract fun <get-wireFieldJsonName>(): kotlin/String // com.squareup.wire.internal/FieldOrOneOfBinding.wireFieldJsonName.<get-wireFieldJsonName>|<get-wireFieldJsonName>(){}[0]
    abstract val writeIdentityValues // com.squareup.wire.internal/FieldOrOneOfBinding.writeIdentityValues|{}writeIdentityValues[0]
        abstract fun <get-writeIdentityValues>(): kotlin/Boolean // com.squareup.wire.internal/FieldOrOneOfBinding.writeIdentityValues.<get-writeIdentityValues>|<get-writeIdentityValues>(){}[0]
    constructor <init>() // com.squareup.wire.internal/FieldOrOneOfBinding.<init>|<init>(){}[0]
    final fun omitFromJson(com.squareup.wire/Syntax, kotlin/Any?): kotlin/Boolean // com.squareup.wire.internal/FieldOrOneOfBinding.omitFromJson|omitFromJson(com.squareup.wire.Syntax;kotlin.Any?){}[0]
    final val adapter // com.squareup.wire.internal/FieldOrOneOfBinding.adapter|{}adapter[0]
        final fun <get-adapter>(): com.squareup.wire/ProtoAdapter<kotlin/Any> // com.squareup.wire.internal/FieldOrOneOfBinding.adapter.<get-adapter>|<get-adapter>(){}[0]
}
abstract class <#A: kotlin/Any?> com.squareup.wire/ProtoAdapter { // com.squareup.wire/ProtoAdapter|null[0]
    abstract fun decode(com.squareup.wire/ProtoReader): #A // com.squareup.wire/ProtoAdapter.decode|decode(com.squareup.wire.ProtoReader){}[0]
    abstract fun encode(com.squareup.wire/ProtoWriter, #A) // com.squareup.wire/ProtoAdapter.encode|encode(com.squareup.wire.ProtoWriter;1:0){}[0]
    abstract fun encodedSize(#A): kotlin/Int // com.squareup.wire/ProtoAdapter.encodedSize|encodedSize(1:0){}[0]
    abstract fun redact(#A): #A // com.squareup.wire/ProtoAdapter.redact|redact(1:0){}[0]
    constructor <init>(com.squareup.wire/FieldEncoding, kotlin.reflect/KClass<*>?, kotlin/String?, com.squareup.wire/Syntax, #A? =..., kotlin/String? =...) // com.squareup.wire/ProtoAdapter.<init>|<init>(com.squareup.wire.FieldEncoding;kotlin.reflect.KClass<*>?;kotlin.String?;com.squareup.wire.Syntax;1:0?;kotlin.String?){}[0]
    final class EnumConstantNotFoundException : kotlin/IllegalArgumentException { // com.squareup.wire/ProtoAdapter.EnumConstantNotFoundException|null[0]
        constructor <init>(kotlin/Int, kotlin.reflect/KClass<*>?) // com.squareup.wire/ProtoAdapter.EnumConstantNotFoundException.<init>|<init>(kotlin.Int;kotlin.reflect.KClass<*>?){}[0]
        final val value // com.squareup.wire/ProtoAdapter.EnumConstantNotFoundException.value|{}value[0]
            final fun <get-value>(): kotlin/Int // com.squareup.wire/ProtoAdapter.EnumConstantNotFoundException.value.<get-value>|<get-value>(){}[0]
    }
    final fun asPacked(): com.squareup.wire/ProtoAdapter<kotlin.collections/List<#A>> // com.squareup.wire/ProtoAdapter.asPacked|asPacked(){}[0]
    final fun asRepeated(): com.squareup.wire/ProtoAdapter<kotlin.collections/List<#A>> // com.squareup.wire/ProtoAdapter.asRepeated|asRepeated(){}[0]
    final fun decode(kotlin/ByteArray): #A // com.squareup.wire/ProtoAdapter.decode|decode(kotlin.ByteArray){}[0]
    final fun decode(okio/BufferedSource): #A // com.squareup.wire/ProtoAdapter.decode|decode(okio.BufferedSource){}[0]
    final fun decode(okio/ByteString): #A // com.squareup.wire/ProtoAdapter.decode|decode(okio.ByteString){}[0]
    final fun encode(#A): kotlin/ByteArray // com.squareup.wire/ProtoAdapter.encode|encode(1:0){}[0]
    final fun encode(okio/BufferedSink, #A) // com.squareup.wire/ProtoAdapter.encode|encode(okio.BufferedSink;1:0){}[0]
    final fun encodeByteString(#A): okio/ByteString // com.squareup.wire/ProtoAdapter.encodeByteString|encodeByteString(1:0){}[0]
    final fun tryDecode(com.squareup.wire/ProtoReader, kotlin.collections/MutableList<#A>) // com.squareup.wire/ProtoAdapter.tryDecode|tryDecode(com.squareup.wire.ProtoReader;kotlin.collections.MutableList<1:0>){}[0]
    final object Companion { // com.squareup.wire/ProtoAdapter.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> newMapAdapter(com.squareup.wire/ProtoAdapter<#A2>, com.squareup.wire/ProtoAdapter<#B2>): com.squareup.wire/ProtoAdapter<kotlin.collections/Map<#A2, #B2>> // com.squareup.wire/ProtoAdapter.Companion.newMapAdapter|newMapAdapter(com.squareup.wire.ProtoAdapter<0:0>;com.squareup.wire.ProtoAdapter<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final val BOOL // com.squareup.wire/ProtoAdapter.Companion.BOOL|{}BOOL[0]
            final fun <get-BOOL>(): com.squareup.wire/ProtoAdapter<kotlin/Boolean> // com.squareup.wire/ProtoAdapter.Companion.BOOL.<get-BOOL>|<get-BOOL>(){}[0]
        final val BOOL_VALUE // com.squareup.wire/ProtoAdapter.Companion.BOOL_VALUE|{}BOOL_VALUE[0]
            final fun <get-BOOL_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Boolean?> // com.squareup.wire/ProtoAdapter.Companion.BOOL_VALUE.<get-BOOL_VALUE>|<get-BOOL_VALUE>(){}[0]
        final val BYTES // com.squareup.wire/ProtoAdapter.Companion.BYTES|{}BYTES[0]
            final fun <get-BYTES>(): com.squareup.wire/ProtoAdapter<okio/ByteString> // com.squareup.wire/ProtoAdapter.Companion.BYTES.<get-BYTES>|<get-BYTES>(){}[0]
        final val BYTES_VALUE // com.squareup.wire/ProtoAdapter.Companion.BYTES_VALUE|{}BYTES_VALUE[0]
            final fun <get-BYTES_VALUE>(): com.squareup.wire/ProtoAdapter<okio/ByteString?> // com.squareup.wire/ProtoAdapter.Companion.BYTES_VALUE.<get-BYTES_VALUE>|<get-BYTES_VALUE>(){}[0]
        final val DOUBLE // com.squareup.wire/ProtoAdapter.Companion.DOUBLE|{}DOUBLE[0]
            final fun <get-DOUBLE>(): com.squareup.wire/ProtoAdapter<kotlin/Double> // com.squareup.wire/ProtoAdapter.Companion.DOUBLE.<get-DOUBLE>|<get-DOUBLE>(){}[0]
        final val DOUBLE_ARRAY // com.squareup.wire/ProtoAdapter.Companion.DOUBLE_ARRAY|{}DOUBLE_ARRAY[0]
            final fun <get-DOUBLE_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/DoubleArray> // com.squareup.wire/ProtoAdapter.Companion.DOUBLE_ARRAY.<get-DOUBLE_ARRAY>|<get-DOUBLE_ARRAY>(){}[0]
        final val DOUBLE_VALUE // com.squareup.wire/ProtoAdapter.Companion.DOUBLE_VALUE|{}DOUBLE_VALUE[0]
            final fun <get-DOUBLE_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Double?> // com.squareup.wire/ProtoAdapter.Companion.DOUBLE_VALUE.<get-DOUBLE_VALUE>|<get-DOUBLE_VALUE>(){}[0]
        final val DURATION // com.squareup.wire/ProtoAdapter.Companion.DURATION|{}DURATION[0]
            final fun <get-DURATION>(): com.squareup.wire/ProtoAdapter<com.squareup.wire/Duration> // com.squareup.wire/ProtoAdapter.Companion.DURATION.<get-DURATION>|<get-DURATION>(){}[0]
        final val EMPTY // com.squareup.wire/ProtoAdapter.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): com.squareup.wire/ProtoAdapter<kotlin/Unit> // com.squareup.wire/ProtoAdapter.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
        final val FIXED32 // com.squareup.wire/ProtoAdapter.Companion.FIXED32|{}FIXED32[0]
            final fun <get-FIXED32>(): com.squareup.wire/ProtoAdapter<kotlin/Int> // com.squareup.wire/ProtoAdapter.Companion.FIXED32.<get-FIXED32>|<get-FIXED32>(){}[0]
        final val FIXED32_ARRAY // com.squareup.wire/ProtoAdapter.Companion.FIXED32_ARRAY|{}FIXED32_ARRAY[0]
            final fun <get-FIXED32_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/IntArray> // com.squareup.wire/ProtoAdapter.Companion.FIXED32_ARRAY.<get-FIXED32_ARRAY>|<get-FIXED32_ARRAY>(){}[0]
        final val FIXED64 // com.squareup.wire/ProtoAdapter.Companion.FIXED64|{}FIXED64[0]
            final fun <get-FIXED64>(): com.squareup.wire/ProtoAdapter<kotlin/Long> // com.squareup.wire/ProtoAdapter.Companion.FIXED64.<get-FIXED64>|<get-FIXED64>(){}[0]
        final val FIXED64_ARRAY // com.squareup.wire/ProtoAdapter.Companion.FIXED64_ARRAY|{}FIXED64_ARRAY[0]
            final fun <get-FIXED64_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/LongArray> // com.squareup.wire/ProtoAdapter.Companion.FIXED64_ARRAY.<get-FIXED64_ARRAY>|<get-FIXED64_ARRAY>(){}[0]
        final val FLOAT // com.squareup.wire/ProtoAdapter.Companion.FLOAT|{}FLOAT[0]
            final fun <get-FLOAT>(): com.squareup.wire/ProtoAdapter<kotlin/Float> // com.squareup.wire/ProtoAdapter.Companion.FLOAT.<get-FLOAT>|<get-FLOAT>(){}[0]
        final val FLOAT_ARRAY // com.squareup.wire/ProtoAdapter.Companion.FLOAT_ARRAY|{}FLOAT_ARRAY[0]
            final fun <get-FLOAT_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/FloatArray> // com.squareup.wire/ProtoAdapter.Companion.FLOAT_ARRAY.<get-FLOAT_ARRAY>|<get-FLOAT_ARRAY>(){}[0]
        final val FLOAT_VALUE // com.squareup.wire/ProtoAdapter.Companion.FLOAT_VALUE|{}FLOAT_VALUE[0]
            final fun <get-FLOAT_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Float?> // com.squareup.wire/ProtoAdapter.Companion.FLOAT_VALUE.<get-FLOAT_VALUE>|<get-FLOAT_VALUE>(){}[0]
        final val INSTANT // com.squareup.wire/ProtoAdapter.Companion.INSTANT|{}INSTANT[0]
            final fun <get-INSTANT>(): com.squareup.wire/ProtoAdapter<com.squareup.wire/Instant> // com.squareup.wire/ProtoAdapter.Companion.INSTANT.<get-INSTANT>|<get-INSTANT>(){}[0]
        final val INT32 // com.squareup.wire/ProtoAdapter.Companion.INT32|{}INT32[0]
            final fun <get-INT32>(): com.squareup.wire/ProtoAdapter<kotlin/Int> // com.squareup.wire/ProtoAdapter.Companion.INT32.<get-INT32>|<get-INT32>(){}[0]
        final val INT32_ARRAY // com.squareup.wire/ProtoAdapter.Companion.INT32_ARRAY|{}INT32_ARRAY[0]
            final fun <get-INT32_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/IntArray> // com.squareup.wire/ProtoAdapter.Companion.INT32_ARRAY.<get-INT32_ARRAY>|<get-INT32_ARRAY>(){}[0]
        final val INT32_VALUE // com.squareup.wire/ProtoAdapter.Companion.INT32_VALUE|{}INT32_VALUE[0]
            final fun <get-INT32_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Int?> // com.squareup.wire/ProtoAdapter.Companion.INT32_VALUE.<get-INT32_VALUE>|<get-INT32_VALUE>(){}[0]
        final val INT64 // com.squareup.wire/ProtoAdapter.Companion.INT64|{}INT64[0]
            final fun <get-INT64>(): com.squareup.wire/ProtoAdapter<kotlin/Long> // com.squareup.wire/ProtoAdapter.Companion.INT64.<get-INT64>|<get-INT64>(){}[0]
        final val INT64_ARRAY // com.squareup.wire/ProtoAdapter.Companion.INT64_ARRAY|{}INT64_ARRAY[0]
            final fun <get-INT64_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/LongArray> // com.squareup.wire/ProtoAdapter.Companion.INT64_ARRAY.<get-INT64_ARRAY>|<get-INT64_ARRAY>(){}[0]
        final val INT64_VALUE // com.squareup.wire/ProtoAdapter.Companion.INT64_VALUE|{}INT64_VALUE[0]
            final fun <get-INT64_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Long?> // com.squareup.wire/ProtoAdapter.Companion.INT64_VALUE.<get-INT64_VALUE>|<get-INT64_VALUE>(){}[0]
        final val SFIXED32 // com.squareup.wire/ProtoAdapter.Companion.SFIXED32|{}SFIXED32[0]
            final fun <get-SFIXED32>(): com.squareup.wire/ProtoAdapter<kotlin/Int> // com.squareup.wire/ProtoAdapter.Companion.SFIXED32.<get-SFIXED32>|<get-SFIXED32>(){}[0]
        final val SFIXED32_ARRAY // com.squareup.wire/ProtoAdapter.Companion.SFIXED32_ARRAY|{}SFIXED32_ARRAY[0]
            final fun <get-SFIXED32_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/IntArray> // com.squareup.wire/ProtoAdapter.Companion.SFIXED32_ARRAY.<get-SFIXED32_ARRAY>|<get-SFIXED32_ARRAY>(){}[0]
        final val SFIXED64 // com.squareup.wire/ProtoAdapter.Companion.SFIXED64|{}SFIXED64[0]
            final fun <get-SFIXED64>(): com.squareup.wire/ProtoAdapter<kotlin/Long> // com.squareup.wire/ProtoAdapter.Companion.SFIXED64.<get-SFIXED64>|<get-SFIXED64>(){}[0]
        final val SFIXED64_ARRAY // com.squareup.wire/ProtoAdapter.Companion.SFIXED64_ARRAY|{}SFIXED64_ARRAY[0]
            final fun <get-SFIXED64_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/LongArray> // com.squareup.wire/ProtoAdapter.Companion.SFIXED64_ARRAY.<get-SFIXED64_ARRAY>|<get-SFIXED64_ARRAY>(){}[0]
        final val SINT32 // com.squareup.wire/ProtoAdapter.Companion.SINT32|{}SINT32[0]
            final fun <get-SINT32>(): com.squareup.wire/ProtoAdapter<kotlin/Int> // com.squareup.wire/ProtoAdapter.Companion.SINT32.<get-SINT32>|<get-SINT32>(){}[0]
        final val SINT32_ARRAY // com.squareup.wire/ProtoAdapter.Companion.SINT32_ARRAY|{}SINT32_ARRAY[0]
            final fun <get-SINT32_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/IntArray> // com.squareup.wire/ProtoAdapter.Companion.SINT32_ARRAY.<get-SINT32_ARRAY>|<get-SINT32_ARRAY>(){}[0]
        final val SINT64 // com.squareup.wire/ProtoAdapter.Companion.SINT64|{}SINT64[0]
            final fun <get-SINT64>(): com.squareup.wire/ProtoAdapter<kotlin/Long> // com.squareup.wire/ProtoAdapter.Companion.SINT64.<get-SINT64>|<get-SINT64>(){}[0]
        final val SINT64_ARRAY // com.squareup.wire/ProtoAdapter.Companion.SINT64_ARRAY|{}SINT64_ARRAY[0]
            final fun <get-SINT64_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/LongArray> // com.squareup.wire/ProtoAdapter.Companion.SINT64_ARRAY.<get-SINT64_ARRAY>|<get-SINT64_ARRAY>(){}[0]
        final val STRING // com.squareup.wire/ProtoAdapter.Companion.STRING|{}STRING[0]
            final fun <get-STRING>(): com.squareup.wire/ProtoAdapter<kotlin/String> // com.squareup.wire/ProtoAdapter.Companion.STRING.<get-STRING>|<get-STRING>(){}[0]
        final val STRING_VALUE // com.squareup.wire/ProtoAdapter.Companion.STRING_VALUE|{}STRING_VALUE[0]
            final fun <get-STRING_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/String?> // com.squareup.wire/ProtoAdapter.Companion.STRING_VALUE.<get-STRING_VALUE>|<get-STRING_VALUE>(){}[0]
        final val STRUCT_LIST // com.squareup.wire/ProtoAdapter.Companion.STRUCT_LIST|{}STRUCT_LIST[0]
            final fun <get-STRUCT_LIST>(): com.squareup.wire/ProtoAdapter<kotlin.collections/List<*>?> // com.squareup.wire/ProtoAdapter.Companion.STRUCT_LIST.<get-STRUCT_LIST>|<get-STRUCT_LIST>(){}[0]
        final val STRUCT_MAP // com.squareup.wire/ProtoAdapter.Companion.STRUCT_MAP|{}STRUCT_MAP[0]
            final fun <get-STRUCT_MAP>(): com.squareup.wire/ProtoAdapter<kotlin.collections/Map<kotlin/String, *>?> // com.squareup.wire/ProtoAdapter.Companion.STRUCT_MAP.<get-STRUCT_MAP>|<get-STRUCT_MAP>(){}[0]
        final val STRUCT_NULL // com.squareup.wire/ProtoAdapter.Companion.STRUCT_NULL|{}STRUCT_NULL[0]
            final fun <get-STRUCT_NULL>(): com.squareup.wire/ProtoAdapter<kotlin/Nothing?> // com.squareup.wire/ProtoAdapter.Companion.STRUCT_NULL.<get-STRUCT_NULL>|<get-STRUCT_NULL>(){}[0]
        final val STRUCT_VALUE // com.squareup.wire/ProtoAdapter.Companion.STRUCT_VALUE|{}STRUCT_VALUE[0]
            final fun <get-STRUCT_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Any?> // com.squareup.wire/ProtoAdapter.Companion.STRUCT_VALUE.<get-STRUCT_VALUE>|<get-STRUCT_VALUE>(){}[0]
        final val UINT32 // com.squareup.wire/ProtoAdapter.Companion.UINT32|{}UINT32[0]
            final fun <get-UINT32>(): com.squareup.wire/ProtoAdapter<kotlin/Int> // com.squareup.wire/ProtoAdapter.Companion.UINT32.<get-UINT32>|<get-UINT32>(){}[0]
        final val UINT32_ARRAY // com.squareup.wire/ProtoAdapter.Companion.UINT32_ARRAY|{}UINT32_ARRAY[0]
            final fun <get-UINT32_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/IntArray> // com.squareup.wire/ProtoAdapter.Companion.UINT32_ARRAY.<get-UINT32_ARRAY>|<get-UINT32_ARRAY>(){}[0]
        final val UINT32_VALUE // com.squareup.wire/ProtoAdapter.Companion.UINT32_VALUE|{}UINT32_VALUE[0]
            final fun <get-UINT32_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Int?> // com.squareup.wire/ProtoAdapter.Companion.UINT32_VALUE.<get-UINT32_VALUE>|<get-UINT32_VALUE>(){}[0]
        final val UINT64 // com.squareup.wire/ProtoAdapter.Companion.UINT64|{}UINT64[0]
            final fun <get-UINT64>(): com.squareup.wire/ProtoAdapter<kotlin/Long> // com.squareup.wire/ProtoAdapter.Companion.UINT64.<get-UINT64>|<get-UINT64>(){}[0]
        final val UINT64_ARRAY // com.squareup.wire/ProtoAdapter.Companion.UINT64_ARRAY|{}UINT64_ARRAY[0]
            final fun <get-UINT64_ARRAY>(): com.squareup.wire/ProtoAdapter<kotlin/LongArray> // com.squareup.wire/ProtoAdapter.Companion.UINT64_ARRAY.<get-UINT64_ARRAY>|<get-UINT64_ARRAY>(){}[0]
        final val UINT64_VALUE // com.squareup.wire/ProtoAdapter.Companion.UINT64_VALUE|{}UINT64_VALUE[0]
            final fun <get-UINT64_VALUE>(): com.squareup.wire/ProtoAdapter<kotlin/Long?> // com.squareup.wire/ProtoAdapter.Companion.UINT64_VALUE.<get-UINT64_VALUE>|<get-UINT64_VALUE>(){}[0]
    }
    final val identity // com.squareup.wire/ProtoAdapter.identity|{}identity[0]
        final fun <get-identity>(): #A? // com.squareup.wire/ProtoAdapter.identity.<get-identity>|<get-identity>(){}[0]
    final val sourceFile // com.squareup.wire/ProtoAdapter.sourceFile|{}sourceFile[0]
        final fun <get-sourceFile>(): kotlin/String? // com.squareup.wire/ProtoAdapter.sourceFile.<get-sourceFile>|<get-sourceFile>(){}[0]
    final val syntax // com.squareup.wire/ProtoAdapter.syntax|{}syntax[0]
        final fun <get-syntax>(): com.squareup.wire/Syntax // com.squareup.wire/ProtoAdapter.syntax.<get-syntax>|<get-syntax>(){}[0]
    final val type // com.squareup.wire/ProtoAdapter.type|{}type[0]
        final fun <get-type>(): kotlin.reflect/KClass<*>? // com.squareup.wire/ProtoAdapter.type.<get-type>|<get-type>(){}[0]
    final val typeUrl // com.squareup.wire/ProtoAdapter.typeUrl|{}typeUrl[0]
        final fun <get-typeUrl>(): kotlin/String? // com.squareup.wire/ProtoAdapter.typeUrl.<get-typeUrl>|<get-typeUrl>(){}[0]
    open fun encode(com.squareup.wire/ReverseProtoWriter, #A) // com.squareup.wire/ProtoAdapter.encode|encode(com.squareup.wire.ReverseProtoWriter;1:0){}[0]
    open fun encodeWithTag(com.squareup.wire/ProtoWriter, kotlin/Int, #A?) // com.squareup.wire/ProtoAdapter.encodeWithTag|encodeWithTag(com.squareup.wire.ProtoWriter;kotlin.Int;1:0?){}[0]
    open fun encodeWithTag(com.squareup.wire/ReverseProtoWriter, kotlin/Int, #A?) // com.squareup.wire/ProtoAdapter.encodeWithTag|encodeWithTag(com.squareup.wire.ReverseProtoWriter;kotlin.Int;1:0?){}[0]
    open fun encodedSizeWithTag(kotlin/Int, #A?): kotlin/Int // com.squareup.wire/ProtoAdapter.encodedSizeWithTag|encodedSizeWithTag(kotlin.Int;1:0?){}[0]
    open fun toString(#A): kotlin/String // com.squareup.wire/ProtoAdapter.toString|toString(1:0){}[0]
}
abstract class com.squareup.wire.internal/ObjectStreamException : okio/IOException { // com.squareup.wire.internal/ObjectStreamException|null[0]
    constructor <init>() // com.squareup.wire.internal/ObjectStreamException.<init>|<init>(){}[0]
}
abstract interface <#A: in kotlin/Any> com.squareup.wire/MessageSink { // com.squareup.wire/MessageSink|null[0]
    abstract fun cancel() // com.squareup.wire/MessageSink.cancel|cancel(){}[0]
    abstract fun close() // com.squareup.wire/MessageSink.close|close(){}[0]
    abstract fun write(#A) // com.squareup.wire/MessageSink.write|write(1:0){}[0]
}
abstract interface <#A: kotlin/Any, #B: kotlin/Any> com.squareup.wire.internal/MessageBinding { // com.squareup.wire.internal/MessageBinding|null[0]
    abstract fun addUnknownField(#B, kotlin/Int, com.squareup.wire/FieldEncoding, kotlin/Any?) // com.squareup.wire.internal/MessageBinding.addUnknownField|addUnknownField(1:1;kotlin.Int;com.squareup.wire.FieldEncoding;kotlin.Any?){}[0]
    abstract fun build(#B): #A // com.squareup.wire.internal/MessageBinding.build|build(1:1){}[0]
    abstract fun clearUnknownFields(#B) // com.squareup.wire.internal/MessageBinding.clearUnknownFields|clearUnknownFields(1:1){}[0]
    abstract fun getCachedSerializedSize(#A): kotlin/Int // com.squareup.wire.internal/MessageBinding.getCachedSerializedSize|getCachedSerializedSize(1:0){}[0]
    abstract fun newBuilder(): #B // com.squareup.wire.internal/MessageBinding.newBuilder|newBuilder(){}[0]
    abstract fun setCachedSerializedSize(#A, kotlin/Int) // com.squareup.wire.internal/MessageBinding.setCachedSerializedSize|setCachedSerializedSize(1:0;kotlin.Int){}[0]
    abstract fun unknownFields(#A): okio/ByteString // com.squareup.wire.internal/MessageBinding.unknownFields|unknownFields(1:0){}[0]
    abstract val fields // com.squareup.wire.internal/MessageBinding.fields|{}fields[0]
        abstract fun <get-fields>(): kotlin.collections/Map<kotlin/Int, com.squareup.wire.internal/FieldOrOneOfBinding<#A, #B>> // com.squareup.wire.internal/MessageBinding.fields.<get-fields>|<get-fields>(){}[0]
    abstract val messageType // com.squareup.wire.internal/MessageBinding.messageType|{}messageType[0]
        abstract fun <get-messageType>(): kotlin.reflect/KClass<in #A> // com.squareup.wire.internal/MessageBinding.messageType.<get-messageType>|<get-messageType>(){}[0]
    abstract val syntax // com.squareup.wire.internal/MessageBinding.syntax|{}syntax[0]
        abstract fun <get-syntax>(): com.squareup.wire/Syntax // com.squareup.wire.internal/MessageBinding.syntax.<get-syntax>|<get-syntax>(){}[0]
    abstract val typeUrl // com.squareup.wire.internal/MessageBinding.typeUrl|{}typeUrl[0]
        abstract fun <get-typeUrl>(): kotlin/String? // com.squareup.wire.internal/MessageBinding.typeUrl.<get-typeUrl>|<get-typeUrl>(){}[0]
}
abstract interface <#A: out kotlin/Any> com.squareup.wire/MessageSource { // com.squareup.wire/MessageSource|null[0]
    abstract fun close() // com.squareup.wire/MessageSource.close|close(){}[0]
    abstract fun read(): #A? // com.squareup.wire/MessageSource.read|read(){}[0]
}
abstract interface com.squareup.wire.internal/Serializable // com.squareup.wire.internal/Serializable|null[0]
abstract interface com.squareup.wire/Service // com.squareup.wire/Service|null[0]
abstract interface com.squareup.wire/WireEnum { // com.squareup.wire/WireEnum|null[0]
    abstract val value // com.squareup.wire/WireEnum.value|{}value[0]
        abstract fun <get-value>(): kotlin/Int // com.squareup.wire/WireEnum.value.<get-value>|<get-value>(){}[0]
}
final class <#A: kotlin/Any, #B: kotlin/Any> com.squareup.wire.internal/RuntimeMessageAdapter : com.squareup.wire/ProtoAdapter<#A> { // com.squareup.wire.internal/RuntimeMessageAdapter|null[0]
    constructor <init>(com.squareup.wire.internal/MessageBinding<#A, #B>) // com.squareup.wire.internal/RuntimeMessageAdapter.<init>|<init>(com.squareup.wire.internal.MessageBinding<1:0,1:1>){}[0]
    final fun <#A1: kotlin/Any?> writeAllFields(#A?, kotlin.collections/List<#A1>, #A1?, kotlin/Function3<kotlin/String, kotlin/Any?, #A1, kotlin/Unit>) // com.squareup.wire.internal/RuntimeMessageAdapter.writeAllFields|writeAllFields(1:0?;kotlin.collections.List<0:0>;0:0?;kotlin.Function3<kotlin.String,kotlin.Any?,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
    final fun decode(com.squareup.wire/ProtoReader): #A // com.squareup.wire.internal/RuntimeMessageAdapter.decode|decode(com.squareup.wire.ProtoReader){}[0]
    final fun encode(com.squareup.wire/ProtoWriter, #A) // com.squareup.wire.internal/RuntimeMessageAdapter.encode|encode(com.squareup.wire.ProtoWriter;1:0){}[0]
    final fun encode(com.squareup.wire/ReverseProtoWriter, #A) // com.squareup.wire.internal/RuntimeMessageAdapter.encode|encode(com.squareup.wire.ReverseProtoWriter;1:0){}[0]
    final fun encodedSize(#A): kotlin/Int // com.squareup.wire.internal/RuntimeMessageAdapter.encodedSize|encodedSize(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire.internal/RuntimeMessageAdapter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.squareup.wire.internal/RuntimeMessageAdapter.hashCode|hashCode(){}[0]
    final fun newBuilder(): #B // com.squareup.wire.internal/RuntimeMessageAdapter.newBuilder|newBuilder(){}[0]
    final fun redact(#A): #A // com.squareup.wire.internal/RuntimeMessageAdapter.redact|redact(1:0){}[0]
    final fun toString(#A): kotlin/String // com.squareup.wire.internal/RuntimeMessageAdapter.toString|toString(1:0){}[0]
    final object Companion // com.squareup.wire.internal/RuntimeMessageAdapter.Companion|null[0]
    final val fieldBindingsArray // com.squareup.wire.internal/RuntimeMessageAdapter.fieldBindingsArray|{}fieldBindingsArray[0]
        final fun <get-fieldBindingsArray>(): kotlin/Array<com.squareup.wire.internal/FieldOrOneOfBinding<#A, #B>> // com.squareup.wire.internal/RuntimeMessageAdapter.fieldBindingsArray.<get-fieldBindingsArray>|<get-fieldBindingsArray>(){}[0]
    final val fields // com.squareup.wire.internal/RuntimeMessageAdapter.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/Int, com.squareup.wire.internal/FieldOrOneOfBinding<#A, #B>> // com.squareup.wire.internal/RuntimeMessageAdapter.fields.<get-fields>|<get-fields>(){}[0]
    final val jsonAlternateNames // com.squareup.wire.internal/RuntimeMessageAdapter.jsonAlternateNames|{}jsonAlternateNames[0]
        final fun <get-jsonAlternateNames>(): kotlin.collections/List<kotlin/String?> // com.squareup.wire.internal/RuntimeMessageAdapter.jsonAlternateNames.<get-jsonAlternateNames>|<get-jsonAlternateNames>(){}[0]
    final val jsonName // com.squareup.wire.internal/RuntimeMessageAdapter.jsonName|<get-jsonName>@com.squareup.wire.internal.FieldOrOneOfBinding<*,*>(){}[0]
        final fun (com.squareup.wire.internal/FieldOrOneOfBinding<*, *>).<get-jsonName>(): kotlin/String // com.squareup.wire.internal/RuntimeMessageAdapter.jsonName.<get-jsonName>|<get-jsonName>@com.squareup.wire.internal.FieldOrOneOfBinding<*,*>(){}[0]
    final val jsonNames // com.squareup.wire.internal/RuntimeMessageAdapter.jsonNames|{}jsonNames[0]
        final fun <get-jsonNames>(): kotlin.collections/List<kotlin/String> // com.squareup.wire.internal/RuntimeMessageAdapter.jsonNames.<get-jsonNames>|<get-jsonNames>(){}[0]
}
final class <#A: out com.squareup.wire/OneOf.Key<#B>, #B: kotlin/Any?> com.squareup.wire/OneOf { // com.squareup.wire/OneOf|null[0]
    abstract class <#A1: kotlin/Any?> Key { // com.squareup.wire/OneOf.Key|null[0]
        constructor <init>(kotlin/Int, com.squareup.wire/ProtoAdapter<#A1>, kotlin/String, kotlin/Boolean =..., kotlin/String =...) // com.squareup.wire/OneOf.Key.<init>|<init>(kotlin.Int;com.squareup.wire.ProtoAdapter<1:0>;kotlin.String;kotlin.Boolean;kotlin.String){}[0]
        final val adapter // com.squareup.wire/OneOf.Key.adapter|<get-adapter>(){}[0]
            final fun <get-adapter>(): com.squareup.wire/ProtoAdapter<#A1> // com.squareup.wire/OneOf.Key.adapter.<get-adapter>|<get-adapter>(){}[0]
        final val declaredName // com.squareup.wire/OneOf.Key.declaredName|<get-declaredName>(){}[0]
            final fun <get-declaredName>(): kotlin/String // com.squareup.wire/OneOf.Key.declaredName.<get-declaredName>|<get-declaredName>(){}[0]
        final val jsonName // com.squareup.wire/OneOf.Key.jsonName|{}jsonName[0]
            final fun <get-jsonName>(): kotlin/String // com.squareup.wire/OneOf.Key.jsonName.<get-jsonName>|<get-jsonName>(){}[0]
        final val redacted // com.squareup.wire/OneOf.Key.redacted|{}redacted[0]
            final fun <get-redacted>(): kotlin/Boolean // com.squareup.wire/OneOf.Key.redacted.<get-redacted>|<get-redacted>(){}[0]
        final val tag // com.squareup.wire/OneOf.Key.tag|<get-tag>(){}[0]
            final fun <get-tag>(): kotlin/Int // com.squareup.wire/OneOf.Key.tag.<get-tag>|<get-tag>(){}[0]
    }
    constructor <init>(#A, #B) // com.squareup.wire/OneOf.<init>|<init>(1:0;1:1){}[0]
    final fun <#A1: kotlin/Any?> getOrNull(com.squareup.wire/OneOf.Key<#A1>): #A1? // com.squareup.wire/OneOf.getOrNull|getOrNull(com.squareup.wire.OneOf.Key<0:0>){0§<kotlin.Any?>}[0]
    final fun component1(): #A // com.squareup.wire/OneOf.component1|component1(){}[0]
    final fun component2(): #B // com.squareup.wire/OneOf.component2|component2(){}[0]
    final fun copy(#A =..., #B =...): com.squareup.wire/OneOf<#A, #B> // com.squareup.wire/OneOf.copy|copy(1:0;1:1){}[0]
    final fun encodeWithTag(com.squareup.wire/ProtoWriter) // com.squareup.wire/OneOf.encodeWithTag|encodeWithTag(com.squareup.wire.ProtoWriter){}[0]
    final fun encodeWithTag(com.squareup.wire/ReverseProtoWriter) // com.squareup.wire/OneOf.encodeWithTag|encodeWithTag(com.squareup.wire.ReverseProtoWriter){}[0]
    final fun encodedSizeWithTag(): kotlin/Int // com.squareup.wire/OneOf.encodedSizeWithTag|encodedSizeWithTag(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/OneOf.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.squareup.wire/OneOf.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.squareup.wire/OneOf.toString|toString(){}[0]
    final val key // com.squareup.wire/OneOf.key|{}key[0]
        final fun <get-key>(): #A // com.squareup.wire/OneOf.key.<get-key>|<get-key>(){}[0]
    final val value // com.squareup.wire/OneOf.value|{}value[0]
        final fun <get-value>(): #B // com.squareup.wire/OneOf.value.<get-value>|<get-value>(){}[0]
}
final class com.squareup.wire.internal/DoubleArrayList { // com.squareup.wire.internal/DoubleArrayList|null[0]
    constructor <init>(kotlin/Int) // com.squareup.wire.internal/DoubleArrayList.<init>|<init>(kotlin.Int){}[0]
    final fun add(kotlin/Double) // com.squareup.wire.internal/DoubleArrayList.add|add(kotlin.Double){}[0]
    final fun isNotEmpty(): kotlin/Boolean // com.squareup.wire.internal/DoubleArrayList.isNotEmpty|isNotEmpty(){}[0]
    final fun toArray(): kotlin/DoubleArray // com.squareup.wire.internal/DoubleArrayList.toArray|toArray(){}[0]
    final fun toString(): kotlin/String // com.squareup.wire.internal/DoubleArrayList.toString|toString(){}[0]
    final object Companion { // com.squareup.wire.internal/DoubleArrayList.Companion|null[0]
        final fun forDecoding(kotlin/Long, kotlin/Long): com.squareup.wire.internal/DoubleArrayList // com.squareup.wire.internal/DoubleArrayList.Companion.forDecoding|forDecoding(kotlin.Long;kotlin.Long){}[0]
    }
}
final class com.squareup.wire.internal/FloatArrayList { // com.squareup.wire.internal/FloatArrayList|null[0]
    constructor <init>(kotlin/Int) // com.squareup.wire.internal/FloatArrayList.<init>|<init>(kotlin.Int){}[0]
    final fun add(kotlin/Float) // com.squareup.wire.internal/FloatArrayList.add|add(kotlin.Float){}[0]
    final fun isNotEmpty(): kotlin/Boolean // com.squareup.wire.internal/FloatArrayList.isNotEmpty|isNotEmpty(){}[0]
    final fun toArray(): kotlin/FloatArray // com.squareup.wire.internal/FloatArrayList.toArray|toArray(){}[0]
    final fun toString(): kotlin/String // com.squareup.wire.internal/FloatArrayList.toString|toString(){}[0]
    final object Companion { // com.squareup.wire.internal/FloatArrayList.Companion|null[0]
        final fun forDecoding(kotlin/Long, kotlin/Long): com.squareup.wire.internal/FloatArrayList // com.squareup.wire.internal/FloatArrayList.Companion.forDecoding|forDecoding(kotlin.Long;kotlin.Long){}[0]
    }
}
final class com.squareup.wire.internal/IntArrayList { // com.squareup.wire.internal/IntArrayList|null[0]
    constructor <init>(kotlin/Int) // com.squareup.wire.internal/IntArrayList.<init>|<init>(kotlin.Int){}[0]
    final fun add(kotlin/Int) // com.squareup.wire.internal/IntArrayList.add|add(kotlin.Int){}[0]
    final fun isNotEmpty(): kotlin/Boolean // com.squareup.wire.internal/IntArrayList.isNotEmpty|isNotEmpty(){}[0]
    final fun toArray(): kotlin/IntArray // com.squareup.wire.internal/IntArrayList.toArray|toArray(){}[0]
    final fun toString(): kotlin/String // com.squareup.wire.internal/IntArrayList.toString|toString(){}[0]
    final object Companion { // com.squareup.wire.internal/IntArrayList.Companion|null[0]
        final fun forDecoding(kotlin/Long, kotlin/Long): com.squareup.wire.internal/IntArrayList // com.squareup.wire.internal/IntArrayList.Companion.forDecoding|forDecoding(kotlin.Long;kotlin.Long){}[0]
    }
}
final class com.squareup.wire.internal/LongArrayList { // com.squareup.wire.internal/LongArrayList|null[0]
    constructor <init>(kotlin/Int) // com.squareup.wire.internal/LongArrayList.<init>|<init>(kotlin.Int){}[0]
    final fun add(kotlin/Long) // com.squareup.wire.internal/LongArrayList.add|add(kotlin.Long){}[0]
    final fun isNotEmpty(): kotlin/Boolean // com.squareup.wire.internal/LongArrayList.isNotEmpty|isNotEmpty(){}[0]
    final fun toArray(): kotlin/LongArray // com.squareup.wire.internal/LongArrayList.toArray|toArray(){}[0]
    final fun toString(): kotlin/String // com.squareup.wire.internal/LongArrayList.toString|toString(){}[0]
    final object Companion { // com.squareup.wire.internal/LongArrayList.Companion|null[0]
        final fun forDecoding(kotlin/Long, kotlin/Long): com.squareup.wire.internal/LongArrayList // com.squareup.wire.internal/LongArrayList.Companion.forDecoding|forDecoding(kotlin.Long;kotlin.Long){}[0]
    }
}
final class com.squareup.wire.internal/ProtocolException : okio/IOException { // com.squareup.wire.internal/ProtocolException|null[0]
    constructor <init>(kotlin/String) // com.squareup.wire.internal/ProtocolException.<init>|<init>(kotlin.String){}[0]
}
final class com.squareup.wire/AnyMessage : com.squareup.wire/Message<com.squareup.wire/AnyMessage, kotlin/Nothing> { // com.squareup.wire/AnyMessage|null[0]
    constructor <init>(kotlin/String, okio/ByteString =...) // com.squareup.wire/AnyMessage.<init>|<init>(kotlin.String;okio.ByteString){}[0]
    final fun <#A1: kotlin/Any?> unpack(com.squareup.wire/ProtoAdapter<#A1>): #A1 // com.squareup.wire/AnyMessage.unpack|unpack(com.squareup.wire.ProtoAdapter<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> unpackOrNull(com.squareup.wire/ProtoAdapter<#A1>): #A1? // com.squareup.wire/AnyMessage.unpackOrNull|unpackOrNull(com.squareup.wire.ProtoAdapter<0:0>){0§<kotlin.Any?>}[0]
    final fun copy(kotlin/String =..., okio/ByteString =...): com.squareup.wire/AnyMessage // com.squareup.wire/AnyMessage.copy|copy(kotlin.String;okio.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/AnyMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.squareup.wire/AnyMessage.hashCode|hashCode(){}[0]
    final fun newBuilder(): kotlin/Nothing // com.squareup.wire/AnyMessage.newBuilder|newBuilder(){}[0]
    final fun toString(): kotlin/String // com.squareup.wire/AnyMessage.toString|toString(){}[0]
    final object Companion { // com.squareup.wire/AnyMessage.Companion|null[0]
        final fun pack(com.squareup.wire/Message<*, *>): com.squareup.wire/AnyMessage // com.squareup.wire/AnyMessage.Companion.pack|pack(com.squareup.wire.Message<*,*>){}[0]
        final val ADAPTER // com.squareup.wire/AnyMessage.Companion.ADAPTER|<get-ADAPTER>(){}[0]
            final fun <get-ADAPTER>(): com.squareup.wire/ProtoAdapter<com.squareup.wire/AnyMessage> // com.squareup.wire/AnyMessage.Companion.ADAPTER.<get-ADAPTER>|<get-ADAPTER>(){}[0]
    }
    final val typeUrl // com.squareup.wire/AnyMessage.typeUrl|{}typeUrl[0]
        final fun <get-typeUrl>(): kotlin/String // com.squareup.wire/AnyMessage.typeUrl.<get-typeUrl>|<get-typeUrl>(){}[0]
    final val value // com.squareup.wire/AnyMessage.value|{}value[0]
        final fun <get-value>(): okio/ByteString // com.squareup.wire/AnyMessage.value.<get-value>|<get-value>(){}[0]
}
final class com.squareup.wire/Duration { // com.squareup.wire/Duration|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/Duration.equals|equals(kotlin.Any?){}[0]
    final fun getNano(): kotlin/Int // com.squareup.wire/Duration.getNano|getNano(){}[0]
    final fun getSeconds(): kotlin/Long // com.squareup.wire/Duration.getSeconds|getSeconds(){}[0]
    final fun hashCode(): kotlin/Int // com.squareup.wire/Duration.hashCode|hashCode(){}[0]
}
final class com.squareup.wire/Instant { // com.squareup.wire/Instant|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/Instant.equals|equals(kotlin.Any?){}[0]
    final fun getEpochSecond(): kotlin/Long // com.squareup.wire/Instant.getEpochSecond|getEpochSecond(){}[0]
    final fun getNano(): kotlin/Int // com.squareup.wire/Instant.getNano|getNano(){}[0]
    final fun hashCode(): kotlin/Int // com.squareup.wire/Instant.hashCode|hashCode(){}[0]
}
final class com.squareup.wire/ProtoReader { // com.squareup.wire/ProtoReader|null[0]
    constructor <init>(okio/BufferedSource) // com.squareup.wire/ProtoReader.<init>|<init>(okio.BufferedSource){}[0]
    final fun addUnknownField(kotlin/Int, com.squareup.wire/FieldEncoding, kotlin/Any?) // com.squareup.wire/ProtoReader.addUnknownField|addUnknownField(kotlin.Int;com.squareup.wire.FieldEncoding;kotlin.Any?){}[0]
    final fun beginMessage(): kotlin/Long // com.squareup.wire/ProtoReader.beginMessage|beginMessage(){}[0]
    final fun endMessage(kotlin/Long) // com.squareup.wire/ProtoReader.endMessage|endMessage(kotlin.Long){}[0]
    final fun endMessageAndGetUnknownFields(kotlin/Long): okio/ByteString // com.squareup.wire/ProtoReader.endMessageAndGetUnknownFields|endMessageAndGetUnknownFields(kotlin.Long){}[0]
    final fun nextFieldMinLengthInBytes(): kotlin/Long // com.squareup.wire/ProtoReader.nextFieldMinLengthInBytes|nextFieldMinLengthInBytes(){}[0]
    final fun nextLengthDelimited(): kotlin/Int // com.squareup.wire/ProtoReader.nextLengthDelimited|nextLengthDelimited(){}[0]
    final fun nextTag(): kotlin/Int // com.squareup.wire/ProtoReader.nextTag|nextTag(){}[0]
    final fun peekFieldEncoding(): com.squareup.wire/FieldEncoding? // com.squareup.wire/ProtoReader.peekFieldEncoding|peekFieldEncoding(){}[0]
    final fun readBytes(): okio/ByteString // com.squareup.wire/ProtoReader.readBytes|readBytes(){}[0]
    final fun readFixed32(): kotlin/Int // com.squareup.wire/ProtoReader.readFixed32|readFixed32(){}[0]
    final fun readFixed64(): kotlin/Long // com.squareup.wire/ProtoReader.readFixed64|readFixed64(){}[0]
    final fun readString(): kotlin/String // com.squareup.wire/ProtoReader.readString|readString(){}[0]
    final fun readUnknownField(kotlin/Int) // com.squareup.wire/ProtoReader.readUnknownField|readUnknownField(kotlin.Int){}[0]
    final fun readVarint32(): kotlin/Int // com.squareup.wire/ProtoReader.readVarint32|readVarint32(){}[0]
    final fun readVarint64(): kotlin/Long // com.squareup.wire/ProtoReader.readVarint64|readVarint64(){}[0]
    final fun skip() // com.squareup.wire/ProtoReader.skip|skip(){}[0]
    final inline fun forEachTag(kotlin/Function1<kotlin/Int, kotlin/Any>): okio/ByteString // com.squareup.wire/ProtoReader.forEachTag|forEachTag(kotlin.Function1<kotlin.Int,kotlin.Any>){}[0]
    final object Companion // com.squareup.wire/ProtoReader.Companion|null[0]
}
final class com.squareup.wire/ProtoWriter { // com.squareup.wire/ProtoWriter|null[0]
    constructor <init>(okio/BufferedSink) // com.squareup.wire/ProtoWriter.<init>|<init>(okio.BufferedSink){}[0]
    final fun writeBytes(okio/ByteString) // com.squareup.wire/ProtoWriter.writeBytes|writeBytes(okio.ByteString){}[0]
    final fun writeFixed32(kotlin/Int) // com.squareup.wire/ProtoWriter.writeFixed32|writeFixed32(kotlin.Int){}[0]
    final fun writeFixed64(kotlin/Long) // com.squareup.wire/ProtoWriter.writeFixed64|writeFixed64(kotlin.Long){}[0]
    final fun writeString(kotlin/String) // com.squareup.wire/ProtoWriter.writeString|writeString(kotlin.String){}[0]
    final fun writeTag(kotlin/Int, com.squareup.wire/FieldEncoding) // com.squareup.wire/ProtoWriter.writeTag|writeTag(kotlin.Int;com.squareup.wire.FieldEncoding){}[0]
    final fun writeVarint32(kotlin/Int) // com.squareup.wire/ProtoWriter.writeVarint32|writeVarint32(kotlin.Int){}[0]
    final fun writeVarint64(kotlin/Long) // com.squareup.wire/ProtoWriter.writeVarint64|writeVarint64(kotlin.Long){}[0]
    final object Companion // com.squareup.wire/ProtoWriter.Companion|null[0]
}
final class com.squareup.wire/ReverseProtoWriter { // com.squareup.wire/ReverseProtoWriter|null[0]
    constructor <init>() // com.squareup.wire/ReverseProtoWriter.<init>|<init>(){}[0]
    final fun writeBytes(okio/ByteString) // com.squareup.wire/ReverseProtoWriter.writeBytes|writeBytes(okio.ByteString){}[0]
    final fun writeFixed32(kotlin/Int) // com.squareup.wire/ReverseProtoWriter.writeFixed32|writeFixed32(kotlin.Int){}[0]
    final fun writeFixed64(kotlin/Long) // com.squareup.wire/ReverseProtoWriter.writeFixed64|writeFixed64(kotlin.Long){}[0]
    final fun writeString(kotlin/String) // com.squareup.wire/ReverseProtoWriter.writeString|writeString(kotlin.String){}[0]
    final fun writeTag(kotlin/Int, com.squareup.wire/FieldEncoding) // com.squareup.wire/ReverseProtoWriter.writeTag|writeTag(kotlin.Int;com.squareup.wire.FieldEncoding){}[0]
    final fun writeTo(okio/BufferedSink) // com.squareup.wire/ReverseProtoWriter.writeTo|writeTo(okio.BufferedSink){}[0]
    final fun writeVarint32(kotlin/Int) // com.squareup.wire/ReverseProtoWriter.writeVarint32|writeVarint32(kotlin.Int){}[0]
    final fun writeVarint64(kotlin/Long) // com.squareup.wire/ReverseProtoWriter.writeVarint64|writeVarint64(kotlin.Long){}[0]
    final val byteCount // com.squareup.wire/ReverseProtoWriter.byteCount|{}byteCount[0]
        final fun <get-byteCount>(): kotlin/Int // com.squareup.wire/ReverseProtoWriter.byteCount.<get-byteCount>|<get-byteCount>(){}[0]
}
final enum class com.squareup.wire/FieldEncoding : kotlin/Enum<com.squareup.wire/FieldEncoding> { // com.squareup.wire/FieldEncoding|null[0]
    enum entry FIXED32 // com.squareup.wire/FieldEncoding.FIXED32|null[0]
    enum entry FIXED64 // com.squareup.wire/FieldEncoding.FIXED64|null[0]
    enum entry LENGTH_DELIMITED // com.squareup.wire/FieldEncoding.LENGTH_DELIMITED|null[0]
    enum entry VARINT // com.squareup.wire/FieldEncoding.VARINT|null[0]
    final fun rawProtoAdapter(): com.squareup.wire/ProtoAdapter<*> // com.squareup.wire/FieldEncoding.rawProtoAdapter|rawProtoAdapter(){}[0]
    final fun valueOf(kotlin/String): com.squareup.wire/FieldEncoding // com.squareup.wire/FieldEncoding.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.squareup.wire/FieldEncoding> // com.squareup.wire/FieldEncoding.values|values#static(){}[0]
    final object Companion // com.squareup.wire/FieldEncoding.Companion|null[0]
    final val entries // com.squareup.wire/FieldEncoding.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.squareup.wire/FieldEncoding> // com.squareup.wire/FieldEncoding.entries.<get-entries>|<get-entries>#static(){}[0]
}
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).com.squareup.wire.internal/redactElements(com.squareup.wire/ProtoAdapter<#B>): kotlin.collections/Map<#A, #B> // com.squareup.wire.internal/redactElements|redactElements@kotlin.collections.Map<0:0,0:1>(com.squareup.wire.ProtoAdapter<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.squareup.wire.internal/copyOf(kotlin.collections/Map<#A, #B>): kotlin.collections/MutableMap<#A, #B> // com.squareup.wire.internal/copyOf|copyOf(kotlin.collections.Map<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.squareup.wire.internal/copyOf(kotlin/String, kotlin.collections/Map<#A, #B>?): kotlin.collections/MutableMap<#A, #B> // com.squareup.wire.internal/copyOf|copyOf(kotlin.String;kotlin.collections.Map<0:0,0:1>?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.squareup.wire.internal/immutableCopyOf(kotlin/String, kotlin.collections/Map<#A, #B>): kotlin.collections/Map<#A, #B> // com.squareup.wire.internal/immutableCopyOf|immutableCopyOf(kotlin.String;kotlin.collections.Map<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.squareup.wire.internal/immutableCopyOfMapWithStructValues(kotlin/String, kotlin.collections/Map<#A, #B>): kotlin.collections/Map<#A, #B> // com.squareup.wire.internal/immutableCopyOfMapWithStructValues|immutableCopyOfMapWithStructValues(kotlin.String;kotlin.collections.Map<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.squareup.wire.internal/newMutableMap(): kotlin.collections/MutableMap<#A, #B> // com.squareup.wire.internal/newMutableMap|newMutableMap(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).com.squareup.wire.internal/redactElements(com.squareup.wire/ProtoAdapter<#A>): kotlin.collections/List<#A> // com.squareup.wire.internal/redactElements|redactElements@kotlin.collections.List<0:0>(com.squareup.wire.ProtoAdapter<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.squareup.wire.internal/copyOf(kotlin.collections/List<#A>): kotlin.collections/MutableList<#A> // com.squareup.wire.internal/copyOf|copyOf(kotlin.collections.List<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.squareup.wire.internal/copyOf(kotlin/String, kotlin.collections/List<#A>?): kotlin.collections/MutableList<#A> // com.squareup.wire.internal/copyOf|copyOf(kotlin.String;kotlin.collections.List<0:0>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.squareup.wire.internal/immutableCopyOf(kotlin/String, kotlin.collections/List<#A>): kotlin.collections/List<#A> // com.squareup.wire.internal/immutableCopyOf|immutableCopyOf(kotlin.String;kotlin.collections.List<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.squareup.wire.internal/immutableCopyOfStruct(kotlin/String, #A): #A // com.squareup.wire.internal/immutableCopyOfStruct|immutableCopyOfStruct(kotlin.String;0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.squareup.wire.internal/newMutableList(): kotlin.collections/MutableList<#A> // com.squareup.wire.internal/newMutableList|newMutableList(){0§<kotlin.Any?>}[0]
final fun com.squareup.wire.internal/boxedOneOfClassName(kotlin/String): kotlin/String // com.squareup.wire.internal/boxedOneOfClassName|boxedOneOfClassName(kotlin.String){}[0]
final fun com.squareup.wire.internal/boxedOneOfKeyFieldName(kotlin/String, kotlin/String): kotlin/String // com.squareup.wire.internal/boxedOneOfKeyFieldName|boxedOneOfKeyFieldName(kotlin.String;kotlin.String){}[0]
final fun com.squareup.wire.internal/boxedOneOfKeysFieldName(kotlin/String): kotlin/String // com.squareup.wire.internal/boxedOneOfKeysFieldName|boxedOneOfKeysFieldName(kotlin.String){}[0]
final fun com.squareup.wire.internal/camelCase(kotlin/String, kotlin/Boolean =...): kotlin/String // com.squareup.wire.internal/camelCase|camelCase(kotlin.String;kotlin.Boolean){}[0]
final fun com.squareup.wire.internal/checkElementsNotNull(kotlin.collections/List<*>) // com.squareup.wire.internal/checkElementsNotNull|checkElementsNotNull(kotlin.collections.List<*>){}[0]
final fun com.squareup.wire.internal/checkElementsNotNull(kotlin.collections/Map<*, *>) // com.squareup.wire.internal/checkElementsNotNull|checkElementsNotNull(kotlin.collections.Map<*,*>){}[0]
final fun com.squareup.wire.internal/countNonNull(kotlin/Any?, kotlin/Any?): kotlin/Int // com.squareup.wire.internal/countNonNull|countNonNull(kotlin.Any?;kotlin.Any?){}[0]
final fun com.squareup.wire.internal/countNonNull(kotlin/Any?, kotlin/Any?, kotlin/Any?): kotlin/Int // com.squareup.wire.internal/countNonNull|countNonNull(kotlin.Any?;kotlin.Any?;kotlin.Any?){}[0]
final fun com.squareup.wire.internal/countNonNull(kotlin/Any?, kotlin/Any?, kotlin/Any?, kotlin/Any?, kotlin/Array<out kotlin/Any?>...): kotlin/Int // com.squareup.wire.internal/countNonNull|countNonNull(kotlin.Any?;kotlin.Any?;kotlin.Any?;kotlin.Any?;kotlin.Array<out|kotlin.Any?>...){}[0]
final fun com.squareup.wire.internal/decodePrimitive_double(com.squareup.wire/ProtoReader): kotlin/Double // com.squareup.wire.internal/decodePrimitive_double|decodePrimitive_double(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_fixed32(com.squareup.wire/ProtoReader): kotlin/Int // com.squareup.wire.internal/decodePrimitive_fixed32|decodePrimitive_fixed32(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_fixed64(com.squareup.wire/ProtoReader): kotlin/Long // com.squareup.wire.internal/decodePrimitive_fixed64|decodePrimitive_fixed64(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_float(com.squareup.wire/ProtoReader): kotlin/Float // com.squareup.wire.internal/decodePrimitive_float|decodePrimitive_float(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_int32(com.squareup.wire/ProtoReader): kotlin/Int // com.squareup.wire.internal/decodePrimitive_int32|decodePrimitive_int32(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_int64(com.squareup.wire/ProtoReader): kotlin/Long // com.squareup.wire.internal/decodePrimitive_int64|decodePrimitive_int64(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_sfixed32(com.squareup.wire/ProtoReader): kotlin/Int // com.squareup.wire.internal/decodePrimitive_sfixed32|decodePrimitive_sfixed32(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_sfixed64(com.squareup.wire/ProtoReader): kotlin/Long // com.squareup.wire.internal/decodePrimitive_sfixed64|decodePrimitive_sfixed64(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_sint32(com.squareup.wire/ProtoReader): kotlin/Int // com.squareup.wire.internal/decodePrimitive_sint32|decodePrimitive_sint32(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_sint64(com.squareup.wire/ProtoReader): kotlin/Long // com.squareup.wire.internal/decodePrimitive_sint64|decodePrimitive_sint64(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_uint32(com.squareup.wire/ProtoReader): kotlin/Int // com.squareup.wire.internal/decodePrimitive_uint32|decodePrimitive_uint32(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/decodePrimitive_uint64(com.squareup.wire/ProtoReader): kotlin/Long // com.squareup.wire.internal/decodePrimitive_uint64|decodePrimitive_uint64(com.squareup.wire.ProtoReader){}[0]
final fun com.squareup.wire.internal/encodeArray_double(kotlin/DoubleArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_double|encodeArray_double(kotlin.DoubleArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_fixed32(kotlin/IntArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_fixed32|encodeArray_fixed32(kotlin.IntArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_fixed64(kotlin/LongArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_fixed64|encodeArray_fixed64(kotlin.LongArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_float(kotlin/FloatArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_float|encodeArray_float(kotlin.FloatArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_int32(kotlin/IntArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_int32|encodeArray_int32(kotlin.IntArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_int64(kotlin/LongArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_int64|encodeArray_int64(kotlin.LongArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_sfixed32(kotlin/IntArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_sfixed32|encodeArray_sfixed32(kotlin.IntArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_sfixed64(kotlin/LongArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_sfixed64|encodeArray_sfixed64(kotlin.LongArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_sint32(kotlin/IntArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_sint32|encodeArray_sint32(kotlin.IntArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_sint64(kotlin/LongArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_sint64|encodeArray_sint64(kotlin.LongArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_uint32(kotlin/IntArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_uint32|encodeArray_uint32(kotlin.IntArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/encodeArray_uint64(kotlin/LongArray, com.squareup.wire/ReverseProtoWriter, kotlin/Int) // com.squareup.wire.internal/encodeArray_uint64|encodeArray_uint64(kotlin.LongArray;com.squareup.wire.ReverseProtoWriter;kotlin.Int){}[0]
final fun com.squareup.wire.internal/equals(kotlin/Any?, kotlin/Any?): kotlin/Boolean // com.squareup.wire.internal/equals|equals(kotlin.Any?;kotlin.Any?){}[0]
final fun com.squareup.wire.internal/missingRequiredFields(kotlin/Array<out kotlin/Any?>...): kotlin/IllegalStateException // com.squareup.wire.internal/missingRequiredFields|missingRequiredFields(kotlin.Array<out|kotlin.Any?>...){}[0]
final fun com.squareup.wire.internal/sanitize(kotlin.collections/List<kotlin/String>): kotlin/String // com.squareup.wire.internal/sanitize|sanitize(kotlin.collections.List<kotlin.String>){}[0]
final fun com.squareup.wire.internal/sanitize(kotlin/String): kotlin/String // com.squareup.wire.internal/sanitize|sanitize(kotlin.String){}[0]
final fun com.squareup.wire/durationOfSeconds(kotlin/Long, kotlin/Long): com.squareup.wire/Duration // com.squareup.wire/durationOfSeconds|durationOfSeconds(kotlin.Long;kotlin.Long){}[0]
final fun com.squareup.wire/ofEpochSecond(kotlin/Long, kotlin/Long): com.squareup.wire/Instant // com.squareup.wire/ofEpochSecond|ofEpochSecond(kotlin.Long;kotlin.Long){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).com.squareup.wire.internal/toUnmodifiableMap(): kotlin.collections/Map<#A, #B> // com.squareup.wire.internal/toUnmodifiableMap|toUnmodifiableMap@kotlin.collections.MutableMap<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).com.squareup.wire.internal/toUnmodifiableList(): kotlin.collections/List<#A> // com.squareup.wire.internal/toUnmodifiableList|toUnmodifiableList@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
open annotation class com.squareup.wire.internal/JvmDefaultWithCompatibility : kotlin/Annotation { // com.squareup.wire.internal/JvmDefaultWithCompatibility|null[1]
    constructor <init>() // com.squareup.wire.internal/JvmDefaultWithCompatibility.<init>|<init>(){}[1]
}
open annotation class com.squareup.wire.internal/JvmField : kotlin/Annotation { // com.squareup.wire.internal/JvmField|null[0]
    constructor <init>() // com.squareup.wire.internal/JvmField.<init>|<init>(){}[0]
}
open annotation class com.squareup.wire.internal/JvmStatic : kotlin/Annotation { // com.squareup.wire.internal/JvmStatic|null[0]
    constructor <init>() // com.squareup.wire.internal/JvmStatic.<init>|<init>(){}[0]
}
open annotation class com.squareup.wire.internal/JvmSynthetic : kotlin/Annotation { // com.squareup.wire.internal/JvmSynthetic|null[0]
    constructor <init>() // com.squareup.wire.internal/JvmSynthetic.<init>|<init>(){}[0]
}
open annotation class com.squareup.wire.internal/Throws : kotlin/Annotation { // com.squareup.wire.internal/Throws|null[1]
    constructor <init>(kotlin/Array<out kotlin.reflect/KClass<out kotlin/Throwable>>...) // com.squareup.wire.internal/Throws.<init>|<init>(kotlin.Array<out|kotlin.reflect.KClass<out|kotlin.Throwable>>...){}[1]
    final val exceptionClasses // com.squareup.wire.internal/Throws.exceptionClasses|{}exceptionClasses[1]
        final fun <get-exceptionClasses>(): kotlin/Array<out kotlin.reflect/KClass<out kotlin/Throwable>> // com.squareup.wire.internal/Throws.exceptionClasses.<get-exceptionClasses>|<get-exceptionClasses>(){}[1]
}
open annotation class com.squareup.wire/WireEnumConstant : kotlin/Annotation { // com.squareup.wire/WireEnumConstant|null[0]
    constructor <init>(kotlin/String =...) // com.squareup.wire/WireEnumConstant.<init>|<init>(kotlin.String){}[0]
    final val declaredName // com.squareup.wire/WireEnumConstant.declaredName|{}declaredName[0]
        final fun <get-declaredName>(): kotlin/String // com.squareup.wire/WireEnumConstant.declaredName.<get-declaredName>|<get-declaredName>(){}[0]
}
open annotation class com.squareup.wire/WireField : kotlin/Annotation { // com.squareup.wire/WireField|null[0]
    constructor <init>(kotlin/Int, kotlin/String =..., kotlin/String, com.squareup.wire/WireField.Label =..., kotlin/Boolean =..., kotlin/String =..., kotlin/String =..., kotlin/String =..., kotlin/Int =...) // com.squareup.wire/WireField.<init>|<init>(kotlin.Int;kotlin.String;kotlin.String;com.squareup.wire.WireField.Label;kotlin.Boolean;kotlin.String;kotlin.String;kotlin.String;kotlin.Int){}[0]
    final enum class Label : kotlin/Enum<com.squareup.wire/WireField.Label> { // com.squareup.wire/WireField.Label|null[0]
        enum entry OMIT_IDENTITY // com.squareup.wire/WireField.Label.OMIT_IDENTITY|null[0]
        enum entry ONE_OF // com.squareup.wire/WireField.Label.ONE_OF|null[0]
        enum entry OPTIONAL // com.squareup.wire/WireField.Label.OPTIONAL|null[0]
        enum entry PACKED // com.squareup.wire/WireField.Label.PACKED|null[0]
        enum entry REPEATED // com.squareup.wire/WireField.Label.REPEATED|null[0]
        enum entry REQUIRED // com.squareup.wire/WireField.Label.REQUIRED|null[0]
        final fun valueOf(kotlin/String): com.squareup.wire/WireField.Label // com.squareup.wire/WireField.Label.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.squareup.wire/WireField.Label> // com.squareup.wire/WireField.Label.values|values#static(){}[0]
        final val entries // com.squareup.wire/WireField.Label.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.squareup.wire/WireField.Label> // com.squareup.wire/WireField.Label.entries.<get-entries>|<get-entries>#static(){}[0]
        final val isOneOf // com.squareup.wire/WireField.Label.isOneOf|{}isOneOf[0]
            final fun <get-isOneOf>(): kotlin/Boolean // com.squareup.wire/WireField.Label.isOneOf.<get-isOneOf>|<get-isOneOf>(){}[0]
        final val isPacked // com.squareup.wire/WireField.Label.isPacked|{}isPacked[0]
            final fun <get-isPacked>(): kotlin/Boolean // com.squareup.wire/WireField.Label.isPacked.<get-isPacked>|<get-isPacked>(){}[0]
        final val isRepeated // com.squareup.wire/WireField.Label.isRepeated|{}isRepeated[0]
            final fun <get-isRepeated>(): kotlin/Boolean // com.squareup.wire/WireField.Label.isRepeated.<get-isRepeated>|<get-isRepeated>(){}[0]
    }
    final val adapter // com.squareup.wire/WireField.adapter|{}adapter[0]
        final fun <get-adapter>(): kotlin/String // com.squareup.wire/WireField.adapter.<get-adapter>|<get-adapter>(){}[0]
    final val declaredName // com.squareup.wire/WireField.declaredName|{}declaredName[0]
        final fun <get-declaredName>(): kotlin/String // com.squareup.wire/WireField.declaredName.<get-declaredName>|<get-declaredName>(){}[0]
    final val jsonName // com.squareup.wire/WireField.jsonName|{}jsonName[0]
        final fun <get-jsonName>(): kotlin/String // com.squareup.wire/WireField.jsonName.<get-jsonName>|<get-jsonName>(){}[0]
    final val keyAdapter // com.squareup.wire/WireField.keyAdapter|{}keyAdapter[0]
        final fun <get-keyAdapter>(): kotlin/String // com.squareup.wire/WireField.keyAdapter.<get-keyAdapter>|<get-keyAdapter>(){}[0]
    final val label // com.squareup.wire/WireField.label|{}label[0]
        final fun <get-label>(): com.squareup.wire/WireField.Label // com.squareup.wire/WireField.label.<get-label>|<get-label>(){}[0]
    final val oneofName // com.squareup.wire/WireField.oneofName|{}oneofName[0]
        final fun <get-oneofName>(): kotlin/String // com.squareup.wire/WireField.oneofName.<get-oneofName>|<get-oneofName>(){}[0]
    final val redacted // com.squareup.wire/WireField.redacted|{}redacted[0]
        final fun <get-redacted>(): kotlin/Boolean // com.squareup.wire/WireField.redacted.<get-redacted>|<get-redacted>(){}[0]
    final val schemaIndex // com.squareup.wire/WireField.schemaIndex|{}schemaIndex[0]
        final fun <get-schemaIndex>(): kotlin/Int // com.squareup.wire/WireField.schemaIndex.<get-schemaIndex>|<get-schemaIndex>(){}[0]
    final val tag // com.squareup.wire/WireField.tag|{}tag[0]
        final fun <get-tag>(): kotlin/Int // com.squareup.wire/WireField.tag.<get-tag>|<get-tag>(){}[0]
}
open annotation class com.squareup.wire/WireRpc : kotlin/Annotation { // com.squareup.wire/WireRpc|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String =...) // com.squareup.wire/WireRpc.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final val path // com.squareup.wire/WireRpc.path|{}path[0]
        final fun <get-path>(): kotlin/String // com.squareup.wire/WireRpc.path.<get-path>|<get-path>(){}[0]
    final val requestAdapter // com.squareup.wire/WireRpc.requestAdapter|{}requestAdapter[0]
        final fun <get-requestAdapter>(): kotlin/String // com.squareup.wire/WireRpc.requestAdapter.<get-requestAdapter>|<get-requestAdapter>(){}[0]
    final val responseAdapter // com.squareup.wire/WireRpc.responseAdapter|{}responseAdapter[0]
        final fun <get-responseAdapter>(): kotlin/String // com.squareup.wire/WireRpc.responseAdapter.<get-responseAdapter>|<get-responseAdapter>(){}[0]
    final val sourceFile // com.squareup.wire/WireRpc.sourceFile|{}sourceFile[0]
        final fun <get-sourceFile>(): kotlin/String // com.squareup.wire/WireRpc.sourceFile.<get-sourceFile>|<get-sourceFile>(){}[0]
}
sealed class com.squareup.wire/Syntax { // com.squareup.wire/Syntax|null[0]
    constructor <init>(kotlin/String) // com.squareup.wire/Syntax.<init>|<init>(kotlin.String){}[0]
    final class Edition : com.squareup.wire/Syntax { // com.squareup.wire/Syntax.Edition|null[0]
        constructor <init>(kotlin/String) // com.squareup.wire/Syntax.Edition.<init>|<init>(kotlin.String){}[0]
        final fun component1(): kotlin/String // com.squareup.wire/Syntax.Edition.component1|component1(){}[0]
        final fun copy(kotlin/String =...): com.squareup.wire/Syntax.Edition // com.squareup.wire/Syntax.Edition.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/Syntax.Edition.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.squareup.wire/Syntax.Edition.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.squareup.wire/Syntax.Edition.toString|toString(){}[0]
        final val value // com.squareup.wire/Syntax.Edition.value|{}value[0]
            final fun <get-value>(): kotlin/String // com.squareup.wire/Syntax.Edition.value.<get-value>|<get-value>(){}[0]
    }
    final fun name(): kotlin/String // com.squareup.wire/Syntax.name|name(){}[0]
    final object Companion { // com.squareup.wire/Syntax.Companion|null[0]
        final fun get(kotlin/String): com.squareup.wire/Syntax // com.squareup.wire/Syntax.Companion.get|get(kotlin.String){}[0]
        final fun get(kotlin/String, kotlin/Boolean): com.squareup.wire/Syntax // com.squareup.wire/Syntax.Companion.get|get(kotlin.String;kotlin.Boolean){}[0]
    }
    final object PROTO_2 : com.squareup.wire/Syntax { // com.squareup.wire/Syntax.PROTO_2|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/Syntax.PROTO_2.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.squareup.wire/Syntax.PROTO_2.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.squareup.wire/Syntax.PROTO_2.toString|toString(){}[0]
    }
    final object PROTO_3 : com.squareup.wire/Syntax { // com.squareup.wire/Syntax.PROTO_3|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.squareup.wire/Syntax.PROTO_3.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.squareup.wire/Syntax.PROTO_3.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.squareup.wire/Syntax.PROTO_3.toString|toString(){}[0]
    }
}
// Targets: [iosArm64, iosX64, macos, tvosArm64, tvosX64]
final fun <#A: kotlin/Any?> (com.squareup.wire/ProtoAdapter<#A>).com.squareup.wire/decode(platform.Foundation/NSData): #A // com.squareup.wire/decode|decode@com.squareup.wire.ProtoAdapter<0:0>(platform.Foundation.NSData){0§<kotlin.Any?>}[0]
