// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.wire.mutable.Header in squareup/wire/mutable_types.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package squareup.wire.mutable

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.UnsupportedOperationException
import okio.ByteString

public class MutableHeader(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    schemaIndex = 0,
  )
  public var id: Long? = null,
  override var unknownFields: ByteString = ByteString.EMPTY,
) : Message<MutableHeader, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw UnsupportedOperationException("newBuilder() is unsupported for mutable message types")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MutableHeader) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    return true
  }

  override fun hashCode(): Int {
    var result = 0
    result = unknownFields.hashCode()
    result = result * 37 + (id?.hashCode() ?: 0)
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (id != null) result += """id=$id"""
    return result.joinToString(prefix = "MutableHeader{", separator = ", ", postfix = "}")
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<MutableHeader> = object : ProtoAdapter<MutableHeader>(
      FieldEncoding.LENGTH_DELIMITED, 
      MutableHeader::class, 
      "type.googleapis.com/squareup.wire.mutable.Header", 
      PROTO_2, 
      null, 
      "squareup/wire/mutable_types.proto"
    ) {
      override fun encodedSize(`value`: MutableHeader): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: MutableHeader) {
        ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: MutableHeader) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id)
      }

      override fun decode(reader: ProtoReader): MutableHeader {
        var id: Long? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.UINT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return MutableHeader(
          id = id,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: MutableHeader): MutableHeader = throw UnsupportedOperationException("redact() is unsupported for mutable message types")
    }

    private const val serialVersionUID: Long = 0L
  }
}
