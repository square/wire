// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/all_types.proto at 21:1
package com.squareup.wire.protos.alltypes;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.TypeAdapter;
import com.squareup.wire.WireEnum;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;
import okio.ByteString;

public final class AllTypes extends ExtendableMessage<AllTypes> {
  private static final long serialVersionUID = 0L;

  public static final TypeAdapter<AllTypes> ADAPTER = new TypeAdapter.MessageAdapter<AllTypes>() {
    @Override
    public AllTypes read(ProtoReader reader) throws IOException {
      return AllTypes.read(reader);
    }
  };

  public static final Integer DEFAULT_OPT_INT32 = 0;

  public static final Integer DEFAULT_OPT_UINT32 = 0;

  public static final Integer DEFAULT_OPT_SINT32 = 0;

  public static final Integer DEFAULT_OPT_FIXED32 = 0;

  public static final Integer DEFAULT_OPT_SFIXED32 = 0;

  public static final Long DEFAULT_OPT_INT64 = 0L;

  public static final Long DEFAULT_OPT_UINT64 = 0L;

  public static final Long DEFAULT_OPT_SINT64 = 0L;

  public static final Long DEFAULT_OPT_FIXED64 = 0L;

  public static final Long DEFAULT_OPT_SFIXED64 = 0L;

  public static final Boolean DEFAULT_OPT_BOOL = false;

  public static final Float DEFAULT_OPT_FLOAT = 0.0f;

  public static final Double DEFAULT_OPT_DOUBLE = 0.0d;

  public static final String DEFAULT_OPT_STRING = "";

  public static final ByteString DEFAULT_OPT_BYTES = ByteString.EMPTY;

  public static final NestedEnum DEFAULT_OPT_NESTED_ENUM = NestedEnum.A;

  public static final Integer DEFAULT_REQ_INT32 = 0;

  public static final Integer DEFAULT_REQ_UINT32 = 0;

  public static final Integer DEFAULT_REQ_SINT32 = 0;

  public static final Integer DEFAULT_REQ_FIXED32 = 0;

  public static final Integer DEFAULT_REQ_SFIXED32 = 0;

  public static final Long DEFAULT_REQ_INT64 = 0L;

  public static final Long DEFAULT_REQ_UINT64 = 0L;

  public static final Long DEFAULT_REQ_SINT64 = 0L;

  public static final Long DEFAULT_REQ_FIXED64 = 0L;

  public static final Long DEFAULT_REQ_SFIXED64 = 0L;

  public static final Boolean DEFAULT_REQ_BOOL = false;

  public static final Float DEFAULT_REQ_FLOAT = 0.0f;

  public static final Double DEFAULT_REQ_DOUBLE = 0.0d;

  public static final String DEFAULT_REQ_STRING = "";

  public static final ByteString DEFAULT_REQ_BYTES = ByteString.EMPTY;

  public static final NestedEnum DEFAULT_REQ_NESTED_ENUM = NestedEnum.A;

  public static final Integer DEFAULT_DEFAULT_INT32 = 2147483647;

  public static final Integer DEFAULT_DEFAULT_UINT32 = -1;

  public static final Integer DEFAULT_DEFAULT_SINT32 = -2147483648;

  public static final Integer DEFAULT_DEFAULT_FIXED32 = -1;

  public static final Integer DEFAULT_DEFAULT_SFIXED32 = -2147483648;

  public static final Long DEFAULT_DEFAULT_INT64 = 9223372036854775807L;

  public static final Long DEFAULT_DEFAULT_UINT64 = -1L;

  public static final Long DEFAULT_DEFAULT_SINT64 = -9223372036854775808L;

  public static final Long DEFAULT_DEFAULT_FIXED64 = -1L;

  public static final Long DEFAULT_DEFAULT_SFIXED64 = -9223372036854775808L;

  public static final Boolean DEFAULT_DEFAULT_BOOL = true;

  public static final Float DEFAULT_DEFAULT_FLOAT = 123.456e7f;

  public static final Double DEFAULT_DEFAULT_DOUBLE = 123.456e78d;

  public static final String DEFAULT_DEFAULT_STRING = "çok\u0007\b\f\n"
      + "\r\t\u000b\u0001\u0001\u0001\u000f\u000f~\u0001\u0001\u0011\u0001\u0001\u0011güzel";

  public static final ByteString DEFAULT_DEFAULT_BYTES = ByteString.decodeBase64("529rBwgMCg0JCwEBAQ8PfgEBEQEBEWf8emVs");

  public static final NestedEnum DEFAULT_DEFAULT_NESTED_ENUM = NestedEnum.A;

  public final Integer opt_int32;

  public final Integer opt_uint32;

  public final Integer opt_sint32;

  public final Integer opt_fixed32;

  public final Integer opt_sfixed32;

  public final Long opt_int64;

  public final Long opt_uint64;

  public final Long opt_sint64;

  public final Long opt_fixed64;

  public final Long opt_sfixed64;

  public final Boolean opt_bool;

  public final Float opt_float;

  public final Double opt_double;

  public final String opt_string;

  public final ByteString opt_bytes;

  public final NestedEnum opt_nested_enum;

  public final NestedMessage opt_nested_message;

  public final Integer req_int32;

  public final Integer req_uint32;

  public final Integer req_sint32;

  public final Integer req_fixed32;

  public final Integer req_sfixed32;

  public final Long req_int64;

  public final Long req_uint64;

  public final Long req_sint64;

  public final Long req_fixed64;

  public final Long req_sfixed64;

  public final Boolean req_bool;

  public final Float req_float;

  public final Double req_double;

  public final String req_string;

  public final ByteString req_bytes;

  public final NestedEnum req_nested_enum;

  public final NestedMessage req_nested_message;

  public final List<Integer> rep_int32;

  public final List<Integer> rep_uint32;

  public final List<Integer> rep_sint32;

  public final List<Integer> rep_fixed32;

  public final List<Integer> rep_sfixed32;

  public final List<Long> rep_int64;

  public final List<Long> rep_uint64;

  public final List<Long> rep_sint64;

  public final List<Long> rep_fixed64;

  public final List<Long> rep_sfixed64;

  public final List<Boolean> rep_bool;

  public final List<Float> rep_float;

  public final List<Double> rep_double;

  public final List<String> rep_string;

  public final List<ByteString> rep_bytes;

  public final List<NestedEnum> rep_nested_enum;

  public final List<NestedMessage> rep_nested_message;

  public final List<Integer> pack_int32;

  public final List<Integer> pack_uint32;

  public final List<Integer> pack_sint32;

  public final List<Integer> pack_fixed32;

  public final List<Integer> pack_sfixed32;

  public final List<Long> pack_int64;

  public final List<Long> pack_uint64;

  public final List<Long> pack_sint64;

  public final List<Long> pack_fixed64;

  public final List<Long> pack_sfixed64;

  public final List<Boolean> pack_bool;

  public final List<Float> pack_float;

  public final List<Double> pack_double;

  public final List<NestedEnum> pack_nested_enum;

  public final Integer default_int32;

  public final Integer default_uint32;

  public final Integer default_sint32;

  public final Integer default_fixed32;

  public final Integer default_sfixed32;

  public final Long default_int64;

  public final Long default_uint64;

  public final Long default_sint64;

  public final Long default_fixed64;

  public final Long default_sfixed64;

  public final Boolean default_bool;

  public final Float default_float;

  public final Double default_double;

  public final String default_string;

  public final ByteString default_bytes;

  public final NestedEnum default_nested_enum;

  public AllTypes(Integer opt_int32, Integer opt_uint32, Integer opt_sint32, Integer opt_fixed32, Integer opt_sfixed32, Long opt_int64, Long opt_uint64, Long opt_sint64, Long opt_fixed64, Long opt_sfixed64, Boolean opt_bool, Float opt_float, Double opt_double, String opt_string, ByteString opt_bytes, NestedEnum opt_nested_enum, NestedMessage opt_nested_message, Integer req_int32, Integer req_uint32, Integer req_sint32, Integer req_fixed32, Integer req_sfixed32, Long req_int64, Long req_uint64, Long req_sint64, Long req_fixed64, Long req_sfixed64, Boolean req_bool, Float req_float, Double req_double, String req_string, ByteString req_bytes, NestedEnum req_nested_enum, NestedMessage req_nested_message, List<Integer> rep_int32, List<Integer> rep_uint32, List<Integer> rep_sint32, List<Integer> rep_fixed32, List<Integer> rep_sfixed32, List<Long> rep_int64, List<Long> rep_uint64, List<Long> rep_sint64, List<Long> rep_fixed64, List<Long> rep_sfixed64, List<Boolean> rep_bool, List<Float> rep_float, List<Double> rep_double, List<String> rep_string, List<ByteString> rep_bytes, List<NestedEnum> rep_nested_enum, List<NestedMessage> rep_nested_message, List<Integer> pack_int32, List<Integer> pack_uint32, List<Integer> pack_sint32, List<Integer> pack_fixed32, List<Integer> pack_sfixed32, List<Long> pack_int64, List<Long> pack_uint64, List<Long> pack_sint64, List<Long> pack_fixed64, List<Long> pack_sfixed64, List<Boolean> pack_bool, List<Float> pack_float, List<Double> pack_double, List<NestedEnum> pack_nested_enum, Integer default_int32, Integer default_uint32, Integer default_sint32, Integer default_fixed32, Integer default_sfixed32, Long default_int64, Long default_uint64, Long default_sint64, Long default_fixed64, Long default_sfixed64, Boolean default_bool, Float default_float, Double default_double, String default_string, ByteString default_bytes, NestedEnum default_nested_enum) {
    super("AllTypes");
    this.opt_int32 = opt_int32;
    this.opt_uint32 = opt_uint32;
    this.opt_sint32 = opt_sint32;
    this.opt_fixed32 = opt_fixed32;
    this.opt_sfixed32 = opt_sfixed32;
    this.opt_int64 = opt_int64;
    this.opt_uint64 = opt_uint64;
    this.opt_sint64 = opt_sint64;
    this.opt_fixed64 = opt_fixed64;
    this.opt_sfixed64 = opt_sfixed64;
    this.opt_bool = opt_bool;
    this.opt_float = opt_float;
    this.opt_double = opt_double;
    this.opt_string = opt_string;
    this.opt_bytes = opt_bytes;
    this.opt_nested_enum = opt_nested_enum;
    this.opt_nested_message = opt_nested_message;
    this.req_int32 = req_int32;
    this.req_uint32 = req_uint32;
    this.req_sint32 = req_sint32;
    this.req_fixed32 = req_fixed32;
    this.req_sfixed32 = req_sfixed32;
    this.req_int64 = req_int64;
    this.req_uint64 = req_uint64;
    this.req_sint64 = req_sint64;
    this.req_fixed64 = req_fixed64;
    this.req_sfixed64 = req_sfixed64;
    this.req_bool = req_bool;
    this.req_float = req_float;
    this.req_double = req_double;
    this.req_string = req_string;
    this.req_bytes = req_bytes;
    this.req_nested_enum = req_nested_enum;
    this.req_nested_message = req_nested_message;
    this.rep_int32 = immutableCopyOf(rep_int32);
    this.rep_uint32 = immutableCopyOf(rep_uint32);
    this.rep_sint32 = immutableCopyOf(rep_sint32);
    this.rep_fixed32 = immutableCopyOf(rep_fixed32);
    this.rep_sfixed32 = immutableCopyOf(rep_sfixed32);
    this.rep_int64 = immutableCopyOf(rep_int64);
    this.rep_uint64 = immutableCopyOf(rep_uint64);
    this.rep_sint64 = immutableCopyOf(rep_sint64);
    this.rep_fixed64 = immutableCopyOf(rep_fixed64);
    this.rep_sfixed64 = immutableCopyOf(rep_sfixed64);
    this.rep_bool = immutableCopyOf(rep_bool);
    this.rep_float = immutableCopyOf(rep_float);
    this.rep_double = immutableCopyOf(rep_double);
    this.rep_string = immutableCopyOf(rep_string);
    this.rep_bytes = immutableCopyOf(rep_bytes);
    this.rep_nested_enum = immutableCopyOf(rep_nested_enum);
    this.rep_nested_message = immutableCopyOf(rep_nested_message);
    this.pack_int32 = immutableCopyOf(pack_int32);
    this.pack_uint32 = immutableCopyOf(pack_uint32);
    this.pack_sint32 = immutableCopyOf(pack_sint32);
    this.pack_fixed32 = immutableCopyOf(pack_fixed32);
    this.pack_sfixed32 = immutableCopyOf(pack_sfixed32);
    this.pack_int64 = immutableCopyOf(pack_int64);
    this.pack_uint64 = immutableCopyOf(pack_uint64);
    this.pack_sint64 = immutableCopyOf(pack_sint64);
    this.pack_fixed64 = immutableCopyOf(pack_fixed64);
    this.pack_sfixed64 = immutableCopyOf(pack_sfixed64);
    this.pack_bool = immutableCopyOf(pack_bool);
    this.pack_float = immutableCopyOf(pack_float);
    this.pack_double = immutableCopyOf(pack_double);
    this.pack_nested_enum = immutableCopyOf(pack_nested_enum);
    this.default_int32 = default_int32;
    this.default_uint32 = default_uint32;
    this.default_sint32 = default_sint32;
    this.default_fixed32 = default_fixed32;
    this.default_sfixed32 = default_sfixed32;
    this.default_int64 = default_int64;
    this.default_uint64 = default_uint64;
    this.default_sint64 = default_sint64;
    this.default_fixed64 = default_fixed64;
    this.default_sfixed64 = default_sfixed64;
    this.default_bool = default_bool;
    this.default_float = default_float;
    this.default_double = default_double;
    this.default_string = default_string;
    this.default_bytes = default_bytes;
    this.default_nested_enum = default_nested_enum;
  }

  private AllTypes(Builder builder) {
    this(builder.opt_int32, builder.opt_uint32, builder.opt_sint32, builder.opt_fixed32, builder.opt_sfixed32, builder.opt_int64, builder.opt_uint64, builder.opt_sint64, builder.opt_fixed64, builder.opt_sfixed64, builder.opt_bool, builder.opt_float, builder.opt_double, builder.opt_string, builder.opt_bytes, builder.opt_nested_enum, builder.opt_nested_message, builder.req_int32, builder.req_uint32, builder.req_sint32, builder.req_fixed32, builder.req_sfixed32, builder.req_int64, builder.req_uint64, builder.req_sint64, builder.req_fixed64, builder.req_sfixed64, builder.req_bool, builder.req_float, builder.req_double, builder.req_string, builder.req_bytes, builder.req_nested_enum, builder.req_nested_message, builder.rep_int32, builder.rep_uint32, builder.rep_sint32, builder.rep_fixed32, builder.rep_sfixed32, builder.rep_int64, builder.rep_uint64, builder.rep_sint64, builder.rep_fixed64, builder.rep_sfixed64, builder.rep_bool, builder.rep_float, builder.rep_double, builder.rep_string, builder.rep_bytes, builder.rep_nested_enum, builder.rep_nested_message, builder.pack_int32, builder.pack_uint32, builder.pack_sint32, builder.pack_fixed32, builder.pack_sfixed32, builder.pack_int64, builder.pack_uint64, builder.pack_sint64, builder.pack_fixed64, builder.pack_sfixed64, builder.pack_bool, builder.pack_float, builder.pack_double, builder.pack_nested_enum, builder.default_int32, builder.default_uint32, builder.default_sint32, builder.default_fixed32, builder.default_sfixed32, builder.default_int64, builder.default_uint64, builder.default_sint64, builder.default_fixed64, builder.default_sfixed64, builder.default_bool, builder.default_float, builder.default_double, builder.default_string, builder.default_bytes, builder.default_nested_enum);
    setBuilder(builder);
  }

  @Override
  protected void visitFields(Message.Visitor visitor) {
    visitor.value(1, "opt_int32", opt_int32, TypeAdapter.INT32, false);
    visitor.value(2, "opt_uint32", opt_uint32, TypeAdapter.UINT32, false);
    visitor.value(3, "opt_sint32", opt_sint32, TypeAdapter.SINT32, false);
    visitor.value(4, "opt_fixed32", opt_fixed32, TypeAdapter.FIXED32, false);
    visitor.value(5, "opt_sfixed32", opt_sfixed32, TypeAdapter.SFIXED32, false);
    visitor.value(6, "opt_int64", opt_int64, TypeAdapter.INT64, false);
    visitor.value(7, "opt_uint64", opt_uint64, TypeAdapter.UINT64, false);
    visitor.value(8, "opt_sint64", opt_sint64, TypeAdapter.SINT64, false);
    visitor.value(9, "opt_fixed64", opt_fixed64, TypeAdapter.FIXED64, false);
    visitor.value(10, "opt_sfixed64", opt_sfixed64, TypeAdapter.SFIXED64, false);
    visitor.value(11, "opt_bool", opt_bool, TypeAdapter.BOOL, false);
    visitor.value(12, "opt_float", opt_float, TypeAdapter.FLOAT, false);
    visitor.value(13, "opt_double", opt_double, TypeAdapter.DOUBLE, false);
    visitor.value(14, "opt_string", opt_string, TypeAdapter.STRING, false);
    visitor.value(15, "opt_bytes", opt_bytes, TypeAdapter.BYTES, false);
    visitor.value(16, "opt_nested_enum", opt_nested_enum, NestedEnum.ADAPTER, false);
    visitor.value(17, "opt_nested_message", opt_nested_message, NestedMessage.ADAPTER, false);
    visitor.value(101, "req_int32", req_int32, TypeAdapter.INT32, false);
    visitor.value(102, "req_uint32", req_uint32, TypeAdapter.UINT32, false);
    visitor.value(103, "req_sint32", req_sint32, TypeAdapter.SINT32, false);
    visitor.value(104, "req_fixed32", req_fixed32, TypeAdapter.FIXED32, false);
    visitor.value(105, "req_sfixed32", req_sfixed32, TypeAdapter.SFIXED32, false);
    visitor.value(106, "req_int64", req_int64, TypeAdapter.INT64, false);
    visitor.value(107, "req_uint64", req_uint64, TypeAdapter.UINT64, false);
    visitor.value(108, "req_sint64", req_sint64, TypeAdapter.SINT64, false);
    visitor.value(109, "req_fixed64", req_fixed64, TypeAdapter.FIXED64, false);
    visitor.value(110, "req_sfixed64", req_sfixed64, TypeAdapter.SFIXED64, false);
    visitor.value(111, "req_bool", req_bool, TypeAdapter.BOOL, false);
    visitor.value(112, "req_float", req_float, TypeAdapter.FLOAT, false);
    visitor.value(113, "req_double", req_double, TypeAdapter.DOUBLE, false);
    visitor.value(114, "req_string", req_string, TypeAdapter.STRING, false);
    visitor.value(115, "req_bytes", req_bytes, TypeAdapter.BYTES, false);
    visitor.value(116, "req_nested_enum", req_nested_enum, NestedEnum.ADAPTER, false);
    visitor.value(117, "req_nested_message", req_nested_message, NestedMessage.ADAPTER, false);
    visitor.repeated(201, "rep_int32", rep_int32, TypeAdapter.INT32, false);
    visitor.repeated(202, "rep_uint32", rep_uint32, TypeAdapter.UINT32, false);
    visitor.repeated(203, "rep_sint32", rep_sint32, TypeAdapter.SINT32, false);
    visitor.repeated(204, "rep_fixed32", rep_fixed32, TypeAdapter.FIXED32, false);
    visitor.repeated(205, "rep_sfixed32", rep_sfixed32, TypeAdapter.SFIXED32, false);
    visitor.repeated(206, "rep_int64", rep_int64, TypeAdapter.INT64, false);
    visitor.repeated(207, "rep_uint64", rep_uint64, TypeAdapter.UINT64, false);
    visitor.repeated(208, "rep_sint64", rep_sint64, TypeAdapter.SINT64, false);
    visitor.repeated(209, "rep_fixed64", rep_fixed64, TypeAdapter.FIXED64, false);
    visitor.repeated(210, "rep_sfixed64", rep_sfixed64, TypeAdapter.SFIXED64, false);
    visitor.repeated(211, "rep_bool", rep_bool, TypeAdapter.BOOL, false);
    visitor.repeated(212, "rep_float", rep_float, TypeAdapter.FLOAT, false);
    visitor.repeated(213, "rep_double", rep_double, TypeAdapter.DOUBLE, false);
    visitor.repeated(214, "rep_string", rep_string, TypeAdapter.STRING, false);
    visitor.repeated(215, "rep_bytes", rep_bytes, TypeAdapter.BYTES, false);
    visitor.repeated(216, "rep_nested_enum", rep_nested_enum, NestedEnum.ADAPTER, false);
    visitor.repeated(217, "rep_nested_message", rep_nested_message, NestedMessage.ADAPTER, false);
    visitor.packed(301, "pack_int32", pack_int32, TypeAdapter.INT32, false);
    visitor.packed(302, "pack_uint32", pack_uint32, TypeAdapter.UINT32, false);
    visitor.packed(303, "pack_sint32", pack_sint32, TypeAdapter.SINT32, false);
    visitor.packed(304, "pack_fixed32", pack_fixed32, TypeAdapter.FIXED32, false);
    visitor.packed(305, "pack_sfixed32", pack_sfixed32, TypeAdapter.SFIXED32, false);
    visitor.packed(306, "pack_int64", pack_int64, TypeAdapter.INT64, false);
    visitor.packed(307, "pack_uint64", pack_uint64, TypeAdapter.UINT64, false);
    visitor.packed(308, "pack_sint64", pack_sint64, TypeAdapter.SINT64, false);
    visitor.packed(309, "pack_fixed64", pack_fixed64, TypeAdapter.FIXED64, false);
    visitor.packed(310, "pack_sfixed64", pack_sfixed64, TypeAdapter.SFIXED64, false);
    visitor.packed(311, "pack_bool", pack_bool, TypeAdapter.BOOL, false);
    visitor.packed(312, "pack_float", pack_float, TypeAdapter.FLOAT, false);
    visitor.packed(313, "pack_double", pack_double, TypeAdapter.DOUBLE, false);
    visitor.packed(316, "pack_nested_enum", pack_nested_enum, NestedEnum.ADAPTER, false);
    visitor.value(401, "default_int32", default_int32, TypeAdapter.INT32, false);
    visitor.value(402, "default_uint32", default_uint32, TypeAdapter.UINT32, false);
    visitor.value(403, "default_sint32", default_sint32, TypeAdapter.SINT32, false);
    visitor.value(404, "default_fixed32", default_fixed32, TypeAdapter.FIXED32, false);
    visitor.value(405, "default_sfixed32", default_sfixed32, TypeAdapter.SFIXED32, false);
    visitor.value(406, "default_int64", default_int64, TypeAdapter.INT64, false);
    visitor.value(407, "default_uint64", default_uint64, TypeAdapter.UINT64, false);
    visitor.value(408, "default_sint64", default_sint64, TypeAdapter.SINT64, false);
    visitor.value(409, "default_fixed64", default_fixed64, TypeAdapter.FIXED64, false);
    visitor.value(410, "default_sfixed64", default_sfixed64, TypeAdapter.SFIXED64, false);
    visitor.value(411, "default_bool", default_bool, TypeAdapter.BOOL, false);
    visitor.value(412, "default_float", default_float, TypeAdapter.FLOAT, false);
    visitor.value(413, "default_double", default_double, TypeAdapter.DOUBLE, false);
    visitor.value(414, "default_string", default_string, TypeAdapter.STRING, false);
    visitor.value(415, "default_bytes", default_bytes, TypeAdapter.BYTES, false);
    visitor.value(416, "default_nested_enum", default_nested_enum, NestedEnum.ADAPTER, false);
    visitor.extensions(this);
    visitor.unknowns(this);
  }

  public static AllTypes read(ProtoReader reader) throws IOException {
    Builder builder = new Builder();
    while (reader.hasNext()) {
      int tag = reader.nextTag();
      switch (tag) {
        case 1: builder.opt_int32 = reader.value(TypeAdapter.INT32); break;
        case 2: builder.opt_uint32 = reader.value(TypeAdapter.UINT32); break;
        case 3: builder.opt_sint32 = reader.value(TypeAdapter.SINT32); break;
        case 4: builder.opt_fixed32 = reader.value(TypeAdapter.FIXED32); break;
        case 5: builder.opt_sfixed32 = reader.value(TypeAdapter.SFIXED32); break;
        case 6: builder.opt_int64 = reader.value(TypeAdapter.INT64); break;
        case 7: builder.opt_uint64 = reader.value(TypeAdapter.UINT64); break;
        case 8: builder.opt_sint64 = reader.value(TypeAdapter.SINT64); break;
        case 9: builder.opt_fixed64 = reader.value(TypeAdapter.FIXED64); break;
        case 10: builder.opt_sfixed64 = reader.value(TypeAdapter.SFIXED64); break;
        case 11: builder.opt_bool = reader.value(TypeAdapter.BOOL); break;
        case 12: builder.opt_float = reader.value(TypeAdapter.FLOAT); break;
        case 13: builder.opt_double = reader.value(TypeAdapter.DOUBLE); break;
        case 14: builder.opt_string = reader.value(TypeAdapter.STRING); break;
        case 15: builder.opt_bytes = reader.value(TypeAdapter.BYTES); break;
        case 16: builder.opt_nested_enum = enumOrUnknown(16, reader, NestedEnum.ADAPTER, builder); break;
        case 17: builder.opt_nested_message = message(reader, NestedMessage.ADAPTER); break;
        case 101: builder.req_int32 = reader.value(TypeAdapter.INT32); break;
        case 102: builder.req_uint32 = reader.value(TypeAdapter.UINT32); break;
        case 103: builder.req_sint32 = reader.value(TypeAdapter.SINT32); break;
        case 104: builder.req_fixed32 = reader.value(TypeAdapter.FIXED32); break;
        case 105: builder.req_sfixed32 = reader.value(TypeAdapter.SFIXED32); break;
        case 106: builder.req_int64 = reader.value(TypeAdapter.INT64); break;
        case 107: builder.req_uint64 = reader.value(TypeAdapter.UINT64); break;
        case 108: builder.req_sint64 = reader.value(TypeAdapter.SINT64); break;
        case 109: builder.req_fixed64 = reader.value(TypeAdapter.FIXED64); break;
        case 110: builder.req_sfixed64 = reader.value(TypeAdapter.SFIXED64); break;
        case 111: builder.req_bool = reader.value(TypeAdapter.BOOL); break;
        case 112: builder.req_float = reader.value(TypeAdapter.FLOAT); break;
        case 113: builder.req_double = reader.value(TypeAdapter.DOUBLE); break;
        case 114: builder.req_string = reader.value(TypeAdapter.STRING); break;
        case 115: builder.req_bytes = reader.value(TypeAdapter.BYTES); break;
        case 116: builder.req_nested_enum = enumOrUnknown(116, reader, NestedEnum.ADAPTER, builder); break;
        case 117: builder.req_nested_message = message(reader, NestedMessage.ADAPTER); break;
        case 201: builder.rep_int32 = repeated(builder.rep_int32, reader.value(TypeAdapter.INT32)); break;
        case 202: builder.rep_uint32 = repeated(builder.rep_uint32, reader.value(TypeAdapter.UINT32)); break;
        case 203: builder.rep_sint32 = repeated(builder.rep_sint32, reader.value(TypeAdapter.SINT32)); break;
        case 204: builder.rep_fixed32 = repeated(builder.rep_fixed32, reader.value(TypeAdapter.FIXED32)); break;
        case 205: builder.rep_sfixed32 = repeated(builder.rep_sfixed32, reader.value(TypeAdapter.SFIXED32)); break;
        case 206: builder.rep_int64 = repeated(builder.rep_int64, reader.value(TypeAdapter.INT64)); break;
        case 207: builder.rep_uint64 = repeated(builder.rep_uint64, reader.value(TypeAdapter.UINT64)); break;
        case 208: builder.rep_sint64 = repeated(builder.rep_sint64, reader.value(TypeAdapter.SINT64)); break;
        case 209: builder.rep_fixed64 = repeated(builder.rep_fixed64, reader.value(TypeAdapter.FIXED64)); break;
        case 210: builder.rep_sfixed64 = repeated(builder.rep_sfixed64, reader.value(TypeAdapter.SFIXED64)); break;
        case 211: builder.rep_bool = repeated(builder.rep_bool, reader.value(TypeAdapter.BOOL)); break;
        case 212: builder.rep_float = repeated(builder.rep_float, reader.value(TypeAdapter.FLOAT)); break;
        case 213: builder.rep_double = repeated(builder.rep_double, reader.value(TypeAdapter.DOUBLE)); break;
        case 214: builder.rep_string = repeated(builder.rep_string, reader.value(TypeAdapter.STRING)); break;
        case 215: builder.rep_bytes = repeated(builder.rep_bytes, reader.value(TypeAdapter.BYTES)); break;
        case 216: builder.rep_nested_enum = repeatedEnumOrUnknown(216, builder.rep_nested_enum, reader, NestedEnum.ADAPTER, builder); break;
        case 217: builder.rep_nested_message = repeatedMessage(builder.rep_nested_message, reader, NestedMessage.ADAPTER); break;
        case 301: builder.pack_int32 = reader.packed(builder.pack_int32, TypeAdapter.INT32); break;
        case 302: builder.pack_uint32 = reader.packed(builder.pack_uint32, TypeAdapter.UINT32); break;
        case 303: builder.pack_sint32 = reader.packed(builder.pack_sint32, TypeAdapter.SINT32); break;
        case 304: builder.pack_fixed32 = reader.packed(builder.pack_fixed32, TypeAdapter.FIXED32); break;
        case 305: builder.pack_sfixed32 = reader.packed(builder.pack_sfixed32, TypeAdapter.SFIXED32); break;
        case 306: builder.pack_int64 = reader.packed(builder.pack_int64, TypeAdapter.INT64); break;
        case 307: builder.pack_uint64 = reader.packed(builder.pack_uint64, TypeAdapter.UINT64); break;
        case 308: builder.pack_sint64 = reader.packed(builder.pack_sint64, TypeAdapter.SINT64); break;
        case 309: builder.pack_fixed64 = reader.packed(builder.pack_fixed64, TypeAdapter.FIXED64); break;
        case 310: builder.pack_sfixed64 = reader.packed(builder.pack_sfixed64, TypeAdapter.SFIXED64); break;
        case 311: builder.pack_bool = reader.packed(builder.pack_bool, TypeAdapter.BOOL); break;
        case 312: builder.pack_float = reader.packed(builder.pack_float, TypeAdapter.FLOAT); break;
        case 313: builder.pack_double = reader.packed(builder.pack_double, TypeAdapter.DOUBLE); break;
        case 316: builder.pack_nested_enum = packedEnumOrUnknown(316, builder.pack_nested_enum, reader, NestedEnum.ADAPTER, builder); break;
        case 401: builder.default_int32 = reader.value(TypeAdapter.INT32); break;
        case 402: builder.default_uint32 = reader.value(TypeAdapter.UINT32); break;
        case 403: builder.default_sint32 = reader.value(TypeAdapter.SINT32); break;
        case 404: builder.default_fixed32 = reader.value(TypeAdapter.FIXED32); break;
        case 405: builder.default_sfixed32 = reader.value(TypeAdapter.SFIXED32); break;
        case 406: builder.default_int64 = reader.value(TypeAdapter.INT64); break;
        case 407: builder.default_uint64 = reader.value(TypeAdapter.UINT64); break;
        case 408: builder.default_sint64 = reader.value(TypeAdapter.SINT64); break;
        case 409: builder.default_fixed64 = reader.value(TypeAdapter.FIXED64); break;
        case 410: builder.default_sfixed64 = reader.value(TypeAdapter.SFIXED64); break;
        case 411: builder.default_bool = reader.value(TypeAdapter.BOOL); break;
        case 412: builder.default_float = reader.value(TypeAdapter.FLOAT); break;
        case 413: builder.default_double = reader.value(TypeAdapter.DOUBLE); break;
        case 414: builder.default_string = reader.value(TypeAdapter.STRING); break;
        case 415: builder.default_bytes = reader.value(TypeAdapter.BYTES); break;
        case 416: builder.default_nested_enum = enumOrUnknown(416, reader, NestedEnum.ADAPTER, builder); break;
        default: builder.readExtensionOrUnknown(tag, reader); break;
      }
    }
    return builder.build();
  }

  public static final class Builder extends ExtendableMessage.ExtendableBuilder<AllTypes, Builder> {
    public Integer opt_int32;

    public Integer opt_uint32;

    public Integer opt_sint32;

    public Integer opt_fixed32;

    public Integer opt_sfixed32;

    public Long opt_int64;

    public Long opt_uint64;

    public Long opt_sint64;

    public Long opt_fixed64;

    public Long opt_sfixed64;

    public Boolean opt_bool;

    public Float opt_float;

    public Double opt_double;

    public String opt_string;

    public ByteString opt_bytes;

    public NestedEnum opt_nested_enum;

    public NestedMessage opt_nested_message;

    public Integer req_int32;

    public Integer req_uint32;

    public Integer req_sint32;

    public Integer req_fixed32;

    public Integer req_sfixed32;

    public Long req_int64;

    public Long req_uint64;

    public Long req_sint64;

    public Long req_fixed64;

    public Long req_sfixed64;

    public Boolean req_bool;

    public Float req_float;

    public Double req_double;

    public String req_string;

    public ByteString req_bytes;

    public NestedEnum req_nested_enum;

    public NestedMessage req_nested_message;

    public List<Integer> rep_int32 = Collections.emptyList();

    public List<Integer> rep_uint32 = Collections.emptyList();

    public List<Integer> rep_sint32 = Collections.emptyList();

    public List<Integer> rep_fixed32 = Collections.emptyList();

    public List<Integer> rep_sfixed32 = Collections.emptyList();

    public List<Long> rep_int64 = Collections.emptyList();

    public List<Long> rep_uint64 = Collections.emptyList();

    public List<Long> rep_sint64 = Collections.emptyList();

    public List<Long> rep_fixed64 = Collections.emptyList();

    public List<Long> rep_sfixed64 = Collections.emptyList();

    public List<Boolean> rep_bool = Collections.emptyList();

    public List<Float> rep_float = Collections.emptyList();

    public List<Double> rep_double = Collections.emptyList();

    public List<String> rep_string = Collections.emptyList();

    public List<ByteString> rep_bytes = Collections.emptyList();

    public List<NestedEnum> rep_nested_enum = Collections.emptyList();

    public List<NestedMessage> rep_nested_message = Collections.emptyList();

    public List<Integer> pack_int32 = Collections.emptyList();

    public List<Integer> pack_uint32 = Collections.emptyList();

    public List<Integer> pack_sint32 = Collections.emptyList();

    public List<Integer> pack_fixed32 = Collections.emptyList();

    public List<Integer> pack_sfixed32 = Collections.emptyList();

    public List<Long> pack_int64 = Collections.emptyList();

    public List<Long> pack_uint64 = Collections.emptyList();

    public List<Long> pack_sint64 = Collections.emptyList();

    public List<Long> pack_fixed64 = Collections.emptyList();

    public List<Long> pack_sfixed64 = Collections.emptyList();

    public List<Boolean> pack_bool = Collections.emptyList();

    public List<Float> pack_float = Collections.emptyList();

    public List<Double> pack_double = Collections.emptyList();

    public List<NestedEnum> pack_nested_enum = Collections.emptyList();

    public Integer default_int32;

    public Integer default_uint32;

    public Integer default_sint32;

    public Integer default_fixed32;

    public Integer default_sfixed32;

    public Long default_int64;

    public Long default_uint64;

    public Long default_sint64;

    public Long default_fixed64;

    public Long default_sfixed64;

    public Boolean default_bool;

    public Float default_float;

    public Double default_double;

    public String default_string;

    public ByteString default_bytes;

    public NestedEnum default_nested_enum;

    public Builder() {
      super(AllTypes.class, Builder.class);
    }

    public Builder(AllTypes message) {
      super(AllTypes.class, Builder.class, message);
      if (message == null) return;
      this.opt_int32 = message.opt_int32;
      this.opt_uint32 = message.opt_uint32;
      this.opt_sint32 = message.opt_sint32;
      this.opt_fixed32 = message.opt_fixed32;
      this.opt_sfixed32 = message.opt_sfixed32;
      this.opt_int64 = message.opt_int64;
      this.opt_uint64 = message.opt_uint64;
      this.opt_sint64 = message.opt_sint64;
      this.opt_fixed64 = message.opt_fixed64;
      this.opt_sfixed64 = message.opt_sfixed64;
      this.opt_bool = message.opt_bool;
      this.opt_float = message.opt_float;
      this.opt_double = message.opt_double;
      this.opt_string = message.opt_string;
      this.opt_bytes = message.opt_bytes;
      this.opt_nested_enum = message.opt_nested_enum;
      this.opt_nested_message = message.opt_nested_message;
      this.req_int32 = message.req_int32;
      this.req_uint32 = message.req_uint32;
      this.req_sint32 = message.req_sint32;
      this.req_fixed32 = message.req_fixed32;
      this.req_sfixed32 = message.req_sfixed32;
      this.req_int64 = message.req_int64;
      this.req_uint64 = message.req_uint64;
      this.req_sint64 = message.req_sint64;
      this.req_fixed64 = message.req_fixed64;
      this.req_sfixed64 = message.req_sfixed64;
      this.req_bool = message.req_bool;
      this.req_float = message.req_float;
      this.req_double = message.req_double;
      this.req_string = message.req_string;
      this.req_bytes = message.req_bytes;
      this.req_nested_enum = message.req_nested_enum;
      this.req_nested_message = message.req_nested_message;
      this.rep_int32 = copyOf(message.rep_int32);
      this.rep_uint32 = copyOf(message.rep_uint32);
      this.rep_sint32 = copyOf(message.rep_sint32);
      this.rep_fixed32 = copyOf(message.rep_fixed32);
      this.rep_sfixed32 = copyOf(message.rep_sfixed32);
      this.rep_int64 = copyOf(message.rep_int64);
      this.rep_uint64 = copyOf(message.rep_uint64);
      this.rep_sint64 = copyOf(message.rep_sint64);
      this.rep_fixed64 = copyOf(message.rep_fixed64);
      this.rep_sfixed64 = copyOf(message.rep_sfixed64);
      this.rep_bool = copyOf(message.rep_bool);
      this.rep_float = copyOf(message.rep_float);
      this.rep_double = copyOf(message.rep_double);
      this.rep_string = copyOf(message.rep_string);
      this.rep_bytes = copyOf(message.rep_bytes);
      this.rep_nested_enum = copyOf(message.rep_nested_enum);
      this.rep_nested_message = copyOf(message.rep_nested_message);
      this.pack_int32 = copyOf(message.pack_int32);
      this.pack_uint32 = copyOf(message.pack_uint32);
      this.pack_sint32 = copyOf(message.pack_sint32);
      this.pack_fixed32 = copyOf(message.pack_fixed32);
      this.pack_sfixed32 = copyOf(message.pack_sfixed32);
      this.pack_int64 = copyOf(message.pack_int64);
      this.pack_uint64 = copyOf(message.pack_uint64);
      this.pack_sint64 = copyOf(message.pack_sint64);
      this.pack_fixed64 = copyOf(message.pack_fixed64);
      this.pack_sfixed64 = copyOf(message.pack_sfixed64);
      this.pack_bool = copyOf(message.pack_bool);
      this.pack_float = copyOf(message.pack_float);
      this.pack_double = copyOf(message.pack_double);
      this.pack_nested_enum = copyOf(message.pack_nested_enum);
      this.default_int32 = message.default_int32;
      this.default_uint32 = message.default_uint32;
      this.default_sint32 = message.default_sint32;
      this.default_fixed32 = message.default_fixed32;
      this.default_sfixed32 = message.default_sfixed32;
      this.default_int64 = message.default_int64;
      this.default_uint64 = message.default_uint64;
      this.default_sint64 = message.default_sint64;
      this.default_fixed64 = message.default_fixed64;
      this.default_sfixed64 = message.default_sfixed64;
      this.default_bool = message.default_bool;
      this.default_float = message.default_float;
      this.default_double = message.default_double;
      this.default_string = message.default_string;
      this.default_bytes = message.default_bytes;
      this.default_nested_enum = message.default_nested_enum;
    }

    public Builder opt_int32(Integer opt_int32) {
      this.opt_int32 = opt_int32;
      return this;
    }

    public Builder opt_uint32(Integer opt_uint32) {
      this.opt_uint32 = opt_uint32;
      return this;
    }

    public Builder opt_sint32(Integer opt_sint32) {
      this.opt_sint32 = opt_sint32;
      return this;
    }

    public Builder opt_fixed32(Integer opt_fixed32) {
      this.opt_fixed32 = opt_fixed32;
      return this;
    }

    public Builder opt_sfixed32(Integer opt_sfixed32) {
      this.opt_sfixed32 = opt_sfixed32;
      return this;
    }

    public Builder opt_int64(Long opt_int64) {
      this.opt_int64 = opt_int64;
      return this;
    }

    public Builder opt_uint64(Long opt_uint64) {
      this.opt_uint64 = opt_uint64;
      return this;
    }

    public Builder opt_sint64(Long opt_sint64) {
      this.opt_sint64 = opt_sint64;
      return this;
    }

    public Builder opt_fixed64(Long opt_fixed64) {
      this.opt_fixed64 = opt_fixed64;
      return this;
    }

    public Builder opt_sfixed64(Long opt_sfixed64) {
      this.opt_sfixed64 = opt_sfixed64;
      return this;
    }

    public Builder opt_bool(Boolean opt_bool) {
      this.opt_bool = opt_bool;
      return this;
    }

    public Builder opt_float(Float opt_float) {
      this.opt_float = opt_float;
      return this;
    }

    public Builder opt_double(Double opt_double) {
      this.opt_double = opt_double;
      return this;
    }

    public Builder opt_string(String opt_string) {
      this.opt_string = opt_string;
      return this;
    }

    public Builder opt_bytes(ByteString opt_bytes) {
      this.opt_bytes = opt_bytes;
      return this;
    }

    public Builder opt_nested_enum(NestedEnum opt_nested_enum) {
      this.opt_nested_enum = opt_nested_enum;
      return this;
    }

    public Builder opt_nested_message(NestedMessage opt_nested_message) {
      this.opt_nested_message = opt_nested_message;
      return this;
    }

    public Builder req_int32(Integer req_int32) {
      this.req_int32 = req_int32;
      return this;
    }

    public Builder req_uint32(Integer req_uint32) {
      this.req_uint32 = req_uint32;
      return this;
    }

    public Builder req_sint32(Integer req_sint32) {
      this.req_sint32 = req_sint32;
      return this;
    }

    public Builder req_fixed32(Integer req_fixed32) {
      this.req_fixed32 = req_fixed32;
      return this;
    }

    public Builder req_sfixed32(Integer req_sfixed32) {
      this.req_sfixed32 = req_sfixed32;
      return this;
    }

    public Builder req_int64(Long req_int64) {
      this.req_int64 = req_int64;
      return this;
    }

    public Builder req_uint64(Long req_uint64) {
      this.req_uint64 = req_uint64;
      return this;
    }

    public Builder req_sint64(Long req_sint64) {
      this.req_sint64 = req_sint64;
      return this;
    }

    public Builder req_fixed64(Long req_fixed64) {
      this.req_fixed64 = req_fixed64;
      return this;
    }

    public Builder req_sfixed64(Long req_sfixed64) {
      this.req_sfixed64 = req_sfixed64;
      return this;
    }

    public Builder req_bool(Boolean req_bool) {
      this.req_bool = req_bool;
      return this;
    }

    public Builder req_float(Float req_float) {
      this.req_float = req_float;
      return this;
    }

    public Builder req_double(Double req_double) {
      this.req_double = req_double;
      return this;
    }

    public Builder req_string(String req_string) {
      this.req_string = req_string;
      return this;
    }

    public Builder req_bytes(ByteString req_bytes) {
      this.req_bytes = req_bytes;
      return this;
    }

    public Builder req_nested_enum(NestedEnum req_nested_enum) {
      this.req_nested_enum = req_nested_enum;
      return this;
    }

    public Builder req_nested_message(NestedMessage req_nested_message) {
      this.req_nested_message = req_nested_message;
      return this;
    }

    public Builder rep_int32(List<Integer> rep_int32) {
      this.rep_int32 = canonicalizeList(rep_int32);
      return this;
    }

    public Builder rep_uint32(List<Integer> rep_uint32) {
      this.rep_uint32 = canonicalizeList(rep_uint32);
      return this;
    }

    public Builder rep_sint32(List<Integer> rep_sint32) {
      this.rep_sint32 = canonicalizeList(rep_sint32);
      return this;
    }

    public Builder rep_fixed32(List<Integer> rep_fixed32) {
      this.rep_fixed32 = canonicalizeList(rep_fixed32);
      return this;
    }

    public Builder rep_sfixed32(List<Integer> rep_sfixed32) {
      this.rep_sfixed32 = canonicalizeList(rep_sfixed32);
      return this;
    }

    public Builder rep_int64(List<Long> rep_int64) {
      this.rep_int64 = canonicalizeList(rep_int64);
      return this;
    }

    public Builder rep_uint64(List<Long> rep_uint64) {
      this.rep_uint64 = canonicalizeList(rep_uint64);
      return this;
    }

    public Builder rep_sint64(List<Long> rep_sint64) {
      this.rep_sint64 = canonicalizeList(rep_sint64);
      return this;
    }

    public Builder rep_fixed64(List<Long> rep_fixed64) {
      this.rep_fixed64 = canonicalizeList(rep_fixed64);
      return this;
    }

    public Builder rep_sfixed64(List<Long> rep_sfixed64) {
      this.rep_sfixed64 = canonicalizeList(rep_sfixed64);
      return this;
    }

    public Builder rep_bool(List<Boolean> rep_bool) {
      this.rep_bool = canonicalizeList(rep_bool);
      return this;
    }

    public Builder rep_float(List<Float> rep_float) {
      this.rep_float = canonicalizeList(rep_float);
      return this;
    }

    public Builder rep_double(List<Double> rep_double) {
      this.rep_double = canonicalizeList(rep_double);
      return this;
    }

    public Builder rep_string(List<String> rep_string) {
      this.rep_string = canonicalizeList(rep_string);
      return this;
    }

    public Builder rep_bytes(List<ByteString> rep_bytes) {
      this.rep_bytes = canonicalizeList(rep_bytes);
      return this;
    }

    public Builder rep_nested_enum(List<NestedEnum> rep_nested_enum) {
      this.rep_nested_enum = canonicalizeList(rep_nested_enum);
      return this;
    }

    public Builder rep_nested_message(List<NestedMessage> rep_nested_message) {
      this.rep_nested_message = canonicalizeList(rep_nested_message);
      return this;
    }

    public Builder pack_int32(List<Integer> pack_int32) {
      this.pack_int32 = canonicalizeList(pack_int32);
      return this;
    }

    public Builder pack_uint32(List<Integer> pack_uint32) {
      this.pack_uint32 = canonicalizeList(pack_uint32);
      return this;
    }

    public Builder pack_sint32(List<Integer> pack_sint32) {
      this.pack_sint32 = canonicalizeList(pack_sint32);
      return this;
    }

    public Builder pack_fixed32(List<Integer> pack_fixed32) {
      this.pack_fixed32 = canonicalizeList(pack_fixed32);
      return this;
    }

    public Builder pack_sfixed32(List<Integer> pack_sfixed32) {
      this.pack_sfixed32 = canonicalizeList(pack_sfixed32);
      return this;
    }

    public Builder pack_int64(List<Long> pack_int64) {
      this.pack_int64 = canonicalizeList(pack_int64);
      return this;
    }

    public Builder pack_uint64(List<Long> pack_uint64) {
      this.pack_uint64 = canonicalizeList(pack_uint64);
      return this;
    }

    public Builder pack_sint64(List<Long> pack_sint64) {
      this.pack_sint64 = canonicalizeList(pack_sint64);
      return this;
    }

    public Builder pack_fixed64(List<Long> pack_fixed64) {
      this.pack_fixed64 = canonicalizeList(pack_fixed64);
      return this;
    }

    public Builder pack_sfixed64(List<Long> pack_sfixed64) {
      this.pack_sfixed64 = canonicalizeList(pack_sfixed64);
      return this;
    }

    public Builder pack_bool(List<Boolean> pack_bool) {
      this.pack_bool = canonicalizeList(pack_bool);
      return this;
    }

    public Builder pack_float(List<Float> pack_float) {
      this.pack_float = canonicalizeList(pack_float);
      return this;
    }

    public Builder pack_double(List<Double> pack_double) {
      this.pack_double = canonicalizeList(pack_double);
      return this;
    }

    public Builder pack_nested_enum(List<NestedEnum> pack_nested_enum) {
      this.pack_nested_enum = canonicalizeList(pack_nested_enum);
      return this;
    }

    public Builder default_int32(Integer default_int32) {
      this.default_int32 = default_int32;
      return this;
    }

    public Builder default_uint32(Integer default_uint32) {
      this.default_uint32 = default_uint32;
      return this;
    }

    public Builder default_sint32(Integer default_sint32) {
      this.default_sint32 = default_sint32;
      return this;
    }

    public Builder default_fixed32(Integer default_fixed32) {
      this.default_fixed32 = default_fixed32;
      return this;
    }

    public Builder default_sfixed32(Integer default_sfixed32) {
      this.default_sfixed32 = default_sfixed32;
      return this;
    }

    public Builder default_int64(Long default_int64) {
      this.default_int64 = default_int64;
      return this;
    }

    public Builder default_uint64(Long default_uint64) {
      this.default_uint64 = default_uint64;
      return this;
    }

    public Builder default_sint64(Long default_sint64) {
      this.default_sint64 = default_sint64;
      return this;
    }

    public Builder default_fixed64(Long default_fixed64) {
      this.default_fixed64 = default_fixed64;
      return this;
    }

    public Builder default_sfixed64(Long default_sfixed64) {
      this.default_sfixed64 = default_sfixed64;
      return this;
    }

    public Builder default_bool(Boolean default_bool) {
      this.default_bool = default_bool;
      return this;
    }

    public Builder default_float(Float default_float) {
      this.default_float = default_float;
      return this;
    }

    public Builder default_double(Double default_double) {
      this.default_double = default_double;
      return this;
    }

    public Builder default_string(String default_string) {
      this.default_string = default_string;
      return this;
    }

    public Builder default_bytes(ByteString default_bytes) {
      this.default_bytes = default_bytes;
      return this;
    }

    public Builder default_nested_enum(NestedEnum default_nested_enum) {
      this.default_nested_enum = default_nested_enum;
      return this;
    }

    @Override
    public AllTypes build() {
      if (req_int32 == null
          || req_uint32 == null
          || req_sint32 == null
          || req_fixed32 == null
          || req_sfixed32 == null
          || req_int64 == null
          || req_uint64 == null
          || req_sint64 == null
          || req_fixed64 == null
          || req_sfixed64 == null
          || req_bool == null
          || req_float == null
          || req_double == null
          || req_string == null
          || req_bytes == null
          || req_nested_enum == null
          || req_nested_message == null) {
        throw missingRequiredFields(req_int32, "req_int32",
            req_uint32, "req_uint32",
            req_sint32, "req_sint32",
            req_fixed32, "req_fixed32",
            req_sfixed32, "req_sfixed32",
            req_int64, "req_int64",
            req_uint64, "req_uint64",
            req_sint64, "req_sint64",
            req_fixed64, "req_fixed64",
            req_sfixed64, "req_sfixed64",
            req_bool, "req_bool",
            req_float, "req_float",
            req_double, "req_double",
            req_string, "req_string",
            req_bytes, "req_bytes",
            req_nested_enum, "req_nested_enum",
            req_nested_message, "req_nested_message");
      }
      return new AllTypes(this);
    }
  }

  public enum NestedEnum implements WireEnum {
    A(1);

    public static final TypeAdapter.EnumAdapter<NestedEnum> ADAPTER = new TypeAdapter.EnumAdapter<NestedEnum>() {
      @Override
      public NestedEnum fromValue(int value) {
        return NestedEnum.fromValue(value);
      }
    };

    private final int value;

    NestedEnum(int value) {
      this.value = value;
    }

    @Override
    public int value() {
      return value;
    }

    public static NestedEnum fromValue(int value) {
      switch (value) {
        case 1: return A;
        default: return null;
      }
    }
  }

  public static final class NestedMessage extends Message<NestedMessage> {
    private static final long serialVersionUID = 0L;

    public static final TypeAdapter<NestedMessage> ADAPTER = new TypeAdapter.MessageAdapter<NestedMessage>() {
      @Override
      public NestedMessage read(ProtoReader reader) throws IOException {
        return NestedMessage.read(reader);
      }
    };

    public static final Integer DEFAULT_A = 0;

    public final Integer a;

    public NestedMessage(Integer a) {
      super("NestedMessage");
      this.a = a;
    }

    private NestedMessage(Builder builder) {
      this(builder.a);
      setBuilder(builder);
    }

    @Override
    protected void visitFields(Message.Visitor visitor) {
      visitor.value(1, "a", a, TypeAdapter.INT32, false);
      visitor.unknowns(this);
    }

    public static NestedMessage read(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      while (reader.hasNext()) {
        int tag = reader.nextTag();
        switch (tag) {
          case 1: builder.a = reader.value(TypeAdapter.INT32); break;
          default: builder.readUnknown(tag, reader); break;
        }
      }
      return builder.build();
    }

    public static final class Builder extends com.squareup.wire.Message.Builder<NestedMessage> {
      public Integer a;

      public Builder() {
      }

      public Builder(NestedMessage message) {
        super(message);
        if (message == null) return;
        this.a = message.a;
      }

      public Builder a(Integer a) {
        this.a = a;
        return this;
      }

      @Override
      public NestedMessage build() {
        return new NestedMessage(this);
      }
    }
  }
}
